; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\system_stm32f4xx.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\FWLIB\STM32F4xx_StdPeriph_Driver\inc -I..\USER -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\ETHERNET -I..\HARDWARE\TIMER -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\RTC -I..\HARDWARE\ADC -I..\HARDWARE\SRAM -I..\HARDWARE\InterTemperate -I..\FWLIB\STM32F4x7_ETH_Driver\inc -I..\MALLOC -I..\USMART -I..\HARDWARE -I..\ETHERCAT -I.\RTE\_LWIP -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS --omf_browse=..\obj\system_stm32f4xx.crf system_stm32f4xx.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;509      */
;;;510    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;511    {
;;;512    /******************************************************************************/
;;;513    /*            PLL (clocked by HSE) used as System clock source                */
;;;514    /******************************************************************************/
;;;515      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2200              MOVS     r2,#0
;;;516      
;;;517      /* Enable HSE */
;;;518      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000004  4954              LDR      r1,|L1.344|
000006  9200              STR      r2,[sp,#0]            ;515
000008  9201              STR      r2,[sp,#4]
00000a  6808              LDR      r0,[r1,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  6008              STR      r0,[r1,#0]
;;;519     
;;;520      /* Wait till HSE is ready and if Time out is reached exit */
;;;521      do
;;;522      {
;;;523        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;524        StartUpCounter++;
;;;525      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000012  f44f43a0          MOV      r3,#0x5000
                  |L1.22|
000016  6808              LDR      r0,[r1,#0]            ;523
000018  f4003000          AND      r0,r0,#0x20000        ;523
00001c  9001              STR      r0,[sp,#4]            ;524
00001e  9800              LDR      r0,[sp,#0]            ;524
000020  1c40              ADDS     r0,r0,#1              ;524
000022  9000              STR      r0,[sp,#0]
000024  9801              LDR      r0,[sp,#4]
000026  b910              CBNZ     r0,|L1.46|
000028  9800              LDR      r0,[sp,#0]
00002a  4298              CMP      r0,r3
00002c  d1f3              BNE      |L1.22|
                  |L1.46|
;;;526    
;;;527      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
00002e  6808              LDR      r0,[r1,#0]
000030  0380              LSLS     r0,r0,#14
000032  d534              BPL      |L1.158|
;;;528      {
;;;529        HSEStatus = (uint32_t)0x01;
000034  2001              MOVS     r0,#1
;;;530      }
;;;531      else
;;;532      {
;;;533        HSEStatus = (uint32_t)0x00;
;;;534      }
;;;535    
;;;536      if (HSEStatus == (uint32_t)0x01)
;;;537      {
;;;538        /* Select regulator voltage output Scale 1 mode */
;;;539        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
000036  9001              STR      r0,[sp,#4]
000038  4847              LDR      r0,|L1.344|
00003a  3040              ADDS     r0,r0,#0x40
00003c  6802              LDR      r2,[r0,#0]
00003e  f0425280          ORR      r2,r2,#0x10000000
000042  6002              STR      r2,[r0,#0]
;;;540        PWR->CR |= PWR_CR_VOS;
000044  4845              LDR      r0,|L1.348|
000046  6802              LDR      r2,[r0,#0]
000048  f4424240          ORR      r2,r2,#0xc000
00004c  6002              STR      r2,[r0,#0]
;;;541    
;;;542        /* HCLK = SYSCLK / 1*/
;;;543        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
00004e  4842              LDR      r0,|L1.344|
000050  3008              ADDS     r0,r0,#8
000052  6802              LDR      r2,[r0,#0]
000054  6002              STR      r2,[r0,#0]
;;;544    
;;;545    #if defined (STM32F40_41xxx) || defined (STM32F427_437xx) || defined (STM32F429_439xx)      
;;;546        /* PCLK2 = HCLK / 2*/
;;;547        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000056  6802              LDR      r2,[r0,#0]
000058  f4424200          ORR      r2,r2,#0x8000
00005c  6002              STR      r2,[r0,#0]
;;;548        
;;;549        /* PCLK1 = HCLK / 4*/
;;;550        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00005e  6802              LDR      r2,[r0,#0]
000060  f44252a0          ORR      r2,r2,#0x1400
000064  6002              STR      r2,[r0,#0]
;;;551    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx */
;;;552    
;;;553    #if defined (STM32F401xx)
;;;554        /* PCLK2 = HCLK / 2*/
;;;555        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;556        
;;;557        /* PCLK1 = HCLK / 4*/
;;;558        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;559    #endif /* STM32F401xx */
;;;560       
;;;561        /* Configure the main PLL */
;;;562        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000066  1f03              SUBS     r3,r0,#4
000068  4a3d              LDR      r2,|L1.352|
00006a  601a              STR      r2,[r3,#0]
;;;563                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;564    
;;;565        /* Enable the main PLL */
;;;566        RCC->CR |= RCC_CR_PLLON;
00006c  680a              LDR      r2,[r1,#0]
00006e  f0427280          ORR      r2,r2,#0x1000000
000072  600a              STR      r2,[r1,#0]
                  |L1.116|
;;;567    
;;;568        /* Wait till the main PLL is ready */
;;;569        while((RCC->CR & RCC_CR_PLLRDY) == 0)
000074  680a              LDR      r2,[r1,#0]
000076  0192              LSLS     r2,r2,#6
000078  d5fc              BPL      |L1.116|
;;;570        {
;;;571        }
;;;572       
;;;573    #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
;;;574        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;575        PWR->CR |= PWR_CR_ODEN;
;;;576        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;577        {
;;;578        }
;;;579        PWR->CR |= PWR_CR_ODSWEN;
;;;580        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;581        {
;;;582        }      
;;;583        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;584        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;585    #endif /* STM32F427_437x || STM32F429_439xx  */
;;;586    
;;;587    #if defined (STM32F40_41xxx)     
;;;588        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;589        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
00007a  493a              LDR      r1,|L1.356|
00007c  f2407205          MOV      r2,#0x705
000080  600a              STR      r2,[r1,#0]
;;;590    #endif /* STM32F40_41xxx  */
;;;591    
;;;592    #if defined (STM32F401xx)
;;;593        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;594        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;595    #endif /* STM32F401xx */
;;;596    
;;;597        /* Select the main PLL as system clock source */
;;;598        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000082  6801              LDR      r1,[r0,#0]
000084  f0210103          BIC      r1,r1,#3
000088  6001              STR      r1,[r0,#0]
;;;599        RCC->CFGR |= RCC_CFGR_SW_PLL;
00008a  6801              LDR      r1,[r0,#0]
00008c  f0410102          ORR      r1,r1,#2
000090  6001              STR      r1,[r0,#0]
                  |L1.146|
;;;600    
;;;601        /* Wait till the main PLL is used as system clock source */
;;;602        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
000092  6801              LDR      r1,[r0,#0]
000094  f3c10181          UBFX     r1,r1,#2,#2
000098  2902              CMP      r1,#2
00009a  d1fa              BNE      |L1.146|
;;;603        {
;;;604        }
;;;605      }
;;;606      else
;;;607      { /* If HSE fails to start-up, the application will have wrong clock
;;;608             configuration. User can add here some code to deal with this error */
;;;609      }
;;;610    
;;;611    }
00009c  bd0c              POP      {r2,r3,pc}
                  |L1.158|
00009e  9201              STR      r2,[sp,#4]            ;533
0000a0  bd0c              POP      {r2,r3,pc}
;;;612    
                          ENDP

                  SystemInit PROC
;;;376      */
;;;377    void SystemInit(void)
0000a2  4831              LDR      r0,|L1.360|
;;;378    {
0000a4  b510              PUSH     {r4,lr}
;;;379      /* FPU settings ------------------------------------------------------------*/
;;;380      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;381        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
0000a6  6801              LDR      r1,[r0,#0]
0000a8  f4410170          ORR      r1,r1,#0xf00000
0000ac  6001              STR      r1,[r0,#0]
;;;382      #endif
;;;383      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;384      /* Set HSION bit */
;;;385      RCC->CR |= (uint32_t)0x00000001;
0000ae  482a              LDR      r0,|L1.344|
0000b0  6801              LDR      r1,[r0,#0]
0000b2  f0410101          ORR      r1,r1,#1
0000b6  6001              STR      r1,[r0,#0]
;;;386    
;;;387      /* Reset CFGR register */
;;;388      RCC->CFGR = 0x00000000;
0000b8  4a27              LDR      r2,|L1.344|
0000ba  2100              MOVS     r1,#0
0000bc  3208              ADDS     r2,r2,#8
0000be  6011              STR      r1,[r2,#0]
;;;389    
;;;390      /* Reset HSEON, CSSON and PLLON bits */
;;;391      RCC->CR &= (uint32_t)0xFEF6FFFF;
0000c0  6802              LDR      r2,[r0,#0]
0000c2  4b2a              LDR      r3,|L1.364|
0000c4  401a              ANDS     r2,r2,r3
0000c6  6002              STR      r2,[r0,#0]
;;;392    
;;;393      /* Reset PLLCFGR register */
;;;394      RCC->PLLCFGR = 0x24003010;
0000c8  1d03              ADDS     r3,r0,#4
0000ca  4a29              LDR      r2,|L1.368|
0000cc  601a              STR      r2,[r3,#0]
;;;395    
;;;396      /* Reset HSEBYP bit */
;;;397      RCC->CR &= (uint32_t)0xFFFBFFFF;
0000ce  6802              LDR      r2,[r0,#0]
0000d0  f4222280          BIC      r2,r2,#0x40000
0000d4  6002              STR      r2,[r0,#0]
;;;398    
;;;399      /* Disable all interrupts */
;;;400      RCC->CIR = 0x00000000;
0000d6  4820              LDR      r0,|L1.344|
0000d8  300c              ADDS     r0,r0,#0xc
0000da  6001              STR      r1,[r0,#0]
;;;401    
;;;402    #if defined (DATA_IN_ExtSRAM) || defined (DATA_IN_ExtSDRAM)
;;;403      SystemInit_ExtMemCtl();
;;;404    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;405             
;;;406      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;407         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;408      SetSysClock();
0000dc  f7fffffe          BL       SetSysClock
;;;409    
;;;410      /* Configure the Vector Table location add offset address ------------------*/
;;;411    #ifdef VECT_TAB_SRAM
;;;412      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;413    #else
;;;414      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
0000e0  4921              LDR      r1,|L1.360|
0000e2  f04f6000          MOV      r0,#0x8000000
0000e6  3980              SUBS     r1,r1,#0x80
0000e8  6008              STR      r0,[r1,#0]
;;;415    #endif
;;;416    }
0000ea  bd10              POP      {r4,pc}
;;;417    
                          ENDP

                  SystemCoreClockUpdate PROC
;;;453      */
;;;454    void SystemCoreClockUpdate(void)
0000ec  b570              PUSH     {r4-r6,lr}
;;;455    {
;;;456      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;457      
;;;458      /* Get SYSCLK source -------------------------------------------------------*/
;;;459      tmp = RCC->CFGR & RCC_CFGR_SWS;
0000ee  4d1a              LDR      r5,|L1.344|
0000f0  3508              ADDS     r5,r5,#8
0000f2  6828              LDR      r0,[r5,#0]
;;;460    
;;;461      switch (tmp)
;;;462      {
;;;463        case 0x00:  /* HSI used as system clock source */
;;;464          SystemCoreClock = HSI_VALUE;
0000f4  4b1f              LDR      r3,|L1.372|
0000f6  4920              LDR      r1,|L1.376|
0000f8  f010000c          ANDS     r0,r0,#0xc            ;459
0000fc  d004              BEQ      |L1.264|
;;;465          break;
;;;466        case 0x04:  /* HSE used as system clock source */
;;;467          SystemCoreClock = HSE_VALUE;
0000fe  4e1f              LDR      r6,|L1.380|
000100  2804              CMP      r0,#4                 ;461
000102  d003              BEQ      |L1.268|
000104  2808              CMP      r0,#8                 ;461
000106  d003              BEQ      |L1.272|
                  |L1.264|
000108  600b              STR      r3,[r1,#0]            ;465  ; SystemCoreClock
00010a  e01b              B        |L1.324|
                  |L1.268|
;;;468          break;
00010c  600e              STR      r6,[r1,#0]  ; SystemCoreClock
00010e  e019              B        |L1.324|
                  |L1.272|
;;;469        case 0x08:  /* PLL used as system clock source */
;;;470    
;;;471          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;472             SYSCLK = PLL_VCO / PLL_P
;;;473             */    
;;;474          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000110  4a11              LDR      r2,|L1.344|
000112  1d12              ADDS     r2,r2,#4
000114  6810              LDR      r0,[r2,#0]
000116  f3c05480          UBFX     r4,r0,#22,#1
;;;475          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00011a  6810              LDR      r0,[r2,#0]
00011c  f000003f          AND      r0,r0,#0x3f
;;;476          
;;;477          if (pllsource != 0)
000120  b114              CBZ      r4,|L1.296|
;;;478          {
;;;479            /* HSE used as PLL clock source */
;;;480            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000122  fbb6f0f0          UDIV     r0,r6,r0
000126  e001              B        |L1.300|
                  |L1.296|
;;;481          }
;;;482          else
;;;483          {
;;;484            /* HSI used as PLL clock source */
;;;485            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
000128  fbb3f0f0          UDIV     r0,r3,r0
                  |L1.300|
00012c  6813              LDR      r3,[r2,#0]
;;;486          }
;;;487    
;;;488          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
00012e  6812              LDR      r2,[r2,#0]
000130  f3c31388          UBFX     r3,r3,#6,#9           ;485
000134  4358              MULS     r0,r3,r0              ;485
000136  f3c24201          UBFX     r2,r2,#16,#2
00013a  1c52              ADDS     r2,r2,#1
00013c  0052              LSLS     r2,r2,#1
;;;489          SystemCoreClock = pllvco/pllp;
00013e  fbb0f0f2          UDIV     r0,r0,r2
000142  6008              STR      r0,[r1,#0]  ; SystemCoreClock
                  |L1.324|
;;;490          break;
;;;491        default:
;;;492          SystemCoreClock = HSI_VALUE;
;;;493          break;
;;;494      }
;;;495      /* Compute HCLK frequency --------------------------------------------------*/
;;;496      /* Get HCLK prescaler */
;;;497      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000144  6828              LDR      r0,[r5,#0]
000146  4a0c              LDR      r2,|L1.376|
000148  f3c01003          UBFX     r0,r0,#4,#4
00014c  1d12              ADDS     r2,r2,#4
00014e  5c10              LDRB     r0,[r2,r0]
;;;498      /* HCLK frequency */
;;;499      SystemCoreClock >>= tmp;
000150  680a              LDR      r2,[r1,#0]  ; SystemCoreClock
000152  40c2              LSRS     r2,r2,r0
000154  600a              STR      r2,[r1,#0]  ; SystemCoreClock
;;;500    }
000156  bd70              POP      {r4-r6,pc}
;;;501    
                          ENDP

                  |L1.344|
                          DCD      0x40023800
                  |L1.348|
                          DCD      0x40007000
                  |L1.352|
                          DCD      0x07405419
                  |L1.356|
                          DCD      0x40023c00
                  |L1.360|
                          DCD      0xe000ed88
                  |L1.364|
                          DCD      0xfef6ffff
                  |L1.368|
                          DCD      0x24003010
                  |L1.372|
                          DCD      0x00f42400
                  |L1.376|
                          DCD      ||.data||
                  |L1.380|
                          DCD      0x017d7840

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 144
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
