; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\rtc.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\rtc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\FWLIB\STM32F4xx_StdPeriph_Driver\inc -I..\USER -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\ETHERNET -I..\HARDWARE\TIMER -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\RTC -I..\HARDWARE\ADC -I..\HARDWARE\SRAM -I..\HARDWARE\InterTemperate -I..\FWLIB\STM32F4x7_ETH_Driver\inc -I..\MALLOC -I..\USMART -I..\HARDWARE -I..\ETHERCAT -I.\RTE\_LWIP -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS --omf_browse=..\obj\rtc.crf ..\HARDWARE\RTC\rtc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  RTC_Set_Time PROC
;;;28     //       ERROR(0),进入初始化模式失败 
;;;29     ErrorStatus RTC_Set_Time(u8 hour,u8 min,u8 sec,u8 ampm)
000000  b508              PUSH     {r3,lr}
;;;30     {
;;;31     	RTC_TimeTypeDef RTC_TimeTypeInitStructure;
;;;32     	
;;;33     	RTC_TimeTypeInitStructure.RTC_Hours=hour;
000002  f88d0000          STRB     r0,[sp,#0]
;;;34     	RTC_TimeTypeInitStructure.RTC_Minutes=min;
000006  f88d1001          STRB     r1,[sp,#1]
;;;35     	RTC_TimeTypeInitStructure.RTC_Seconds=sec;
00000a  f88d2002          STRB     r2,[sp,#2]
;;;36     	RTC_TimeTypeInitStructure.RTC_H12=ampm;
00000e  f88d3003          STRB     r3,[sp,#3]
;;;37     	
;;;38     	return RTC_SetTime(RTC_Format_BIN,&RTC_TimeTypeInitStructure);
000012  4669              MOV      r1,sp
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       RTC_SetTime
;;;39     	
;;;40     }
00001a  bd08              POP      {r3,pc}
;;;41     //RTC日期设置
                          ENDP

                  RTC_Set_Date PROC
;;;45     //       ERROR(0),进入初始化模式失败 
;;;46     ErrorStatus RTC_Set_Date(u8 year,u8 month,u8 date,u8 week)
00001c  b508              PUSH     {r3,lr}
;;;47     {
;;;48     	
;;;49     	RTC_DateTypeDef RTC_DateTypeInitStructure;
;;;50     	RTC_DateTypeInitStructure.RTC_Date=date;
00001e  f88d2002          STRB     r2,[sp,#2]
;;;51     	RTC_DateTypeInitStructure.RTC_Month=month;
000022  f88d1001          STRB     r1,[sp,#1]
;;;52     	RTC_DateTypeInitStructure.RTC_WeekDay=week;
000026  f88d3000          STRB     r3,[sp,#0]
;;;53     	RTC_DateTypeInitStructure.RTC_Year=year;
00002a  f88d0003          STRB     r0,[sp,#3]
;;;54     	return RTC_SetDate(RTC_Format_BIN,&RTC_DateTypeInitStructure);
00002e  4669              MOV      r1,sp
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       RTC_SetDate
;;;55     }
000036  bd08              POP      {r3,pc}
;;;56     
                          ENDP

                  My_RTC_Init PROC
;;;60     //       2,进入初始化模式失败;
;;;61     u8 My_RTC_Init(void)
000038  b53e              PUSH     {r1-r5,lr}
;;;62     {
;;;63     	RTC_InitTypeDef RTC_InitStructure;
;;;64     	u16 retry=0X1FFF; 
;;;65       RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);//使能PWR时钟
00003a  2101              MOVS     r1,#1
00003c  f64174ff          MOV      r4,#0x1fff            ;64
000040  0708              LSLS     r0,r1,#28
000042  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;66     	PWR_BackupAccessCmd(ENABLE);	//使能后备寄存器访问 
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       PWR_BackupAccessCmd
;;;67     	
;;;68     	if(RTC_ReadBackupRegister(RTC_BKP_DR0)!=0x5050)		//是否第一次配置?
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       RTC_ReadBackupRegister
000052  f2450550          MOV      r5,#0x5050
000056  42a8              CMP      r0,r5
000058  d02e              BEQ      |L1.184|
;;;69     	{
;;;70     		RCC_LSEConfig(RCC_LSE_ON);//LSE 开启    
00005a  2001              MOVS     r0,#1
00005c  f7fffffe          BL       RCC_LSEConfig
;;;71     		while (RCC_GetFlagStatus(RCC_FLAG_LSERDY) == RESET)	//检查指定的RCC标志位设置与否,等待低速晶振就绪
000060  e004              B        |L1.108|
                  |L1.98|
000062  1c64              ADDS     r4,r4,#1
;;;72     			{
;;;73     			retry++;
000064  b2a4              UXTH     r4,r4
;;;74     			Delay_ms(10);
000066  200a              MOVS     r0,#0xa
000068  f7fffffe          BL       Delay_ms
                  |L1.108|
00006c  2041              MOVS     r0,#0x41              ;71
00006e  f7fffffe          BL       RCC_GetFlagStatus
000072  2800              CMP      r0,#0                 ;71
000074  d0f5              BEQ      |L1.98|
;;;75     			}
;;;76     		if(retry==0)return 1;		//LSE 开启失败. 
000076  b30c              CBZ      r4,|L1.188|
;;;77     			
;;;78     		RCC_RTCCLKConfig(RCC_RTCCLKSource_LSE);		//设置RTC时钟(RTCCLK),选择LSE作为RTC时钟    
000078  f44f7080          MOV      r0,#0x100
00007c  f7fffffe          BL       RCC_RTCCLKConfig
;;;79     		RCC_RTCCLKCmd(ENABLE);	//使能RTC时钟 
000080  2001              MOVS     r0,#1
000082  f7fffffe          BL       RCC_RTCCLKCmd
;;;80     
;;;81         RTC_InitStructure.RTC_AsynchPrediv = 0x7F;//RTC异步分频系数(1~0X7F)
000086  207f              MOVS     r0,#0x7f
;;;82         RTC_InitStructure.RTC_SynchPrediv  = 0xFF;//RTC同步分频系数(0~7FFF)
000088  9001              STR      r0,[sp,#4]
00008a  20ff              MOVS     r0,#0xff
;;;83         RTC_InitStructure.RTC_HourFormat   = RTC_HourFormat_24;//RTC设置为,24小时格式
00008c  9002              STR      r0,[sp,#8]
00008e  2000              MOVS     r0,#0
;;;84         RTC_Init(&RTC_InitStructure);
000090  9000              STR      r0,[sp,#0]
000092  4668              MOV      r0,sp
000094  f7fffffe          BL       RTC_Init
;;;85      
;;;86     		RTC_Set_Time(23,59,56,RTC_H12_AM);	//设置时间
000098  2300              MOVS     r3,#0
00009a  2238              MOVS     r2,#0x38
00009c  213b              MOVS     r1,#0x3b
00009e  2017              MOVS     r0,#0x17
0000a0  f7fffffe          BL       RTC_Set_Time
;;;87     		RTC_Set_Date(14,5,5,6);		//设置日期
0000a4  2205              MOVS     r2,#5
0000a6  2306              MOVS     r3,#6
0000a8  4611              MOV      r1,r2
0000aa  200e              MOVS     r0,#0xe
0000ac  f7fffffe          BL       RTC_Set_Date
;;;88     	 
;;;89     		RTC_WriteBackupRegister(RTC_BKP_DR0,0x5050);	//标记已经初始化过了
0000b0  4629              MOV      r1,r5
0000b2  2000              MOVS     r0,#0
0000b4  f7fffffe          BL       RTC_WriteBackupRegister
                  |L1.184|
;;;90     	} 
;;;91      
;;;92     	return 0;
0000b8  2000              MOVS     r0,#0
;;;93     }
0000ba  bd3e              POP      {r1-r5,pc}
                  |L1.188|
0000bc  2001              MOVS     r0,#1                 ;76
0000be  bd3e              POP      {r1-r5,pc}
;;;94     
                          ENDP

                  RTC_Set_AlarmA PROC
;;;97     //hour,min,sec:小时,分钟,秒钟
;;;98     void RTC_Set_AlarmA(u8 week,u8 hour,u8 min,u8 sec)
0000c0  e92d43f0          PUSH     {r4-r9,lr}
;;;99     { 
0000c4  460d              MOV      r5,r1
0000c6  4681              MOV      r9,r0
;;;100    	EXTI_InitTypeDef   EXTI_InitStructure;
;;;101    	RTC_AlarmTypeDef RTC_AlarmTypeInitStructure;
;;;102    	RTC_TimeTypeDef RTC_TimeTypeInitStructure;
;;;103    	
;;;104    	RTC_AlarmCmd(RTC_Alarm_A,DISABLE);//关闭闹钟A 
0000c8  f44f7680          MOV      r6,#0x100
0000cc  b087              SUB      sp,sp,#0x1c           ;99
0000ce  461f              MOV      r7,r3                 ;99
0000d0  4690              MOV      r8,r2                 ;99
0000d2  2100              MOVS     r1,#0
0000d4  4630              MOV      r0,r6
0000d6  f7fffffe          BL       RTC_AlarmCmd
0000da  f3650407          BFI      r4,r5,#0,#8
0000de  f368240f          BFI      r4,r8,#8,#8
0000e2  f3674417          BFI      r4,r7,#16,#8
;;;105    	
;;;106      RTC_TimeTypeInitStructure.RTC_Hours=hour;//小时
;;;107    	RTC_TimeTypeInitStructure.RTC_Minutes=min;//分钟
;;;108    	RTC_TimeTypeInitStructure.RTC_Seconds=sec;//秒
;;;109    	RTC_TimeTypeInitStructure.RTC_H12=RTC_H12_AM;
0000e6  2500              MOVS     r5,#0
0000e8  f365641f          BFI      r4,r5,#24,#8
;;;110      
;;;111    	RTC_AlarmTypeInitStructure.RTC_AlarmDateWeekDay=week;//星期
0000ec  f88d900c          STRB     r9,[sp,#0xc]
;;;112    	RTC_AlarmTypeInitStructure.RTC_AlarmDateWeekDaySel=RTC_AlarmDateWeekDaySel_WeekDay;//按星期闹
0000f0  05b0              LSLS     r0,r6,#22
;;;113    	RTC_AlarmTypeInitStructure.RTC_AlarmMask=RTC_AlarmMask_None;//精确匹配星期，时分秒
;;;114    	RTC_AlarmTypeInitStructure.RTC_AlarmTime=RTC_TimeTypeInitStructure;
;;;115      RTC_SetAlarm(RTC_Format_BIN,RTC_Alarm_A,&RTC_AlarmTypeInitStructure);
0000f2  9400              STR      r4,[sp,#0]
0000f4  e9cd5001          STRD     r5,r0,[sp,#4]
0000f8  466a              MOV      r2,sp
0000fa  4631              MOV      r1,r6
0000fc  4628              MOV      r0,r5
0000fe  f7fffffe          BL       RTC_SetAlarm
;;;116     
;;;117    	
;;;118    	RTC_ClearITPendingBit(RTC_IT_ALRA);//清除RTC闹钟A的标志
000102  0137              LSLS     r7,r6,#4
000104  4638              MOV      r0,r7
000106  f7fffffe          BL       RTC_ClearITPendingBit
;;;119      EXTI_ClearITPendingBit(EXTI_Line17);//清除LINE17上的中断标志位 
00010a  0274              LSLS     r4,r6,#9
00010c  4620              MOV      r0,r4
00010e  f7fffffe          BL       EXTI_ClearITPendingBit
;;;120    	
;;;121    	RTC_ITConfig(RTC_IT_ALRA,ENABLE);//开启闹钟A中断
000112  2101              MOVS     r1,#1
000114  4638              MOV      r0,r7
000116  f7fffffe          BL       RTC_ITConfig
;;;122    	RTC_AlarmCmd(RTC_Alarm_A,ENABLE);//开启闹钟A 
00011a  2101              MOVS     r1,#1
00011c  4630              MOV      r0,r6
00011e  f7fffffe          BL       RTC_AlarmCmd
;;;123    	
;;;124    	EXTI_InitStructure.EXTI_Line = EXTI_Line17;//LINE17
;;;125      EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;//中断事件
000122  f88d5014          STRB     r5,[sp,#0x14]
;;;126      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising; //上升沿触发 
000126  2008              MOVS     r0,#8
000128  9404              STR      r4,[sp,#0x10]         ;125
00012a  f88d0015          STRB     r0,[sp,#0x15]
;;;127      EXTI_InitStructure.EXTI_LineCmd = ENABLE;//使能LINE17
00012e  2401              MOVS     r4,#1
000130  f88d4016          STRB     r4,[sp,#0x16]
;;;128      EXTI_Init(&EXTI_InitStructure);//配置
000134  a804              ADD      r0,sp,#0x10
000136  f7fffffe          BL       EXTI_Init
;;;129    
;;;130    	NVIC_InitStructure.NVIC_IRQChannel = RTC_Alarm_IRQn; 
00013a  4835              LDR      r0,|L1.528|
00013c  2129              MOVS     r1,#0x29
00013e  7001              STRB     r1,[r0,#0]
;;;131      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;//抢占优先级1
000140  2102              MOVS     r1,#2
000142  7041              STRB     r1,[r0,#1]
;;;132      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;//子优先级2
000144  7081              STRB     r1,[r0,#2]
;;;133      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//使能外部中断通道
000146  70c4              STRB     r4,[r0,#3]
;;;134      NVIC_Init(&NVIC_InitStructure);//配置
000148  f7fffffe          BL       NVIC_Init
;;;135    }
00014c  b007              ADD      sp,sp,#0x1c
00014e  e8bd83f0          POP      {r4-r9,pc}
;;;136    
                          ENDP

                  RTC_Set_WakeUp PROC
;;;146    //cnt:自动重装载值.减到0,产生中断.
;;;147    void RTC_Set_WakeUp(u32 wksel,u16 cnt)
000152  b57c              PUSH     {r2-r6,lr}
;;;148    { 
000154  4604              MOV      r4,r0
000156  460d              MOV      r5,r1
;;;149    	EXTI_InitTypeDef   EXTI_InitStructure;
;;;150    	
;;;151    	RTC_WakeUpCmd(DISABLE);//关闭WAKE UP
000158  2000              MOVS     r0,#0
00015a  f7fffffe          BL       RTC_WakeUpCmd
;;;152    	
;;;153    	RTC_WakeUpClockConfig(wksel);//唤醒时钟选择
00015e  4620              MOV      r0,r4
000160  f7fffffe          BL       RTC_WakeUpClockConfig
;;;154    	
;;;155    	RTC_SetWakeUpCounter(cnt);//设置WAKE UP自动重装载寄存器
000164  4628              MOV      r0,r5
000166  f7fffffe          BL       RTC_SetWakeUpCounter
;;;156    	
;;;157    	
;;;158    	RTC_ClearITPendingBit(RTC_IT_WUT); //清除RTC WAKE UP的标志
00016a  f44f4580          MOV      r5,#0x4000
00016e  4628              MOV      r0,r5
000170  f7fffffe          BL       RTC_ClearITPendingBit
;;;159      EXTI_ClearITPendingBit(EXTI_Line22);//清除LINE22上的中断标志位 
000174  022c              LSLS     r4,r5,#8
000176  4620              MOV      r0,r4
000178  f7fffffe          BL       EXTI_ClearITPendingBit
;;;160    	 
;;;161    	RTC_ITConfig(RTC_IT_WUT,ENABLE);//开启WAKE UP 定时器中断
00017c  2101              MOVS     r1,#1
00017e  4628              MOV      r0,r5
000180  f7fffffe          BL       RTC_ITConfig
;;;162    	RTC_WakeUpCmd( ENABLE);//开启WAKE UP 定时器　
000184  2001              MOVS     r0,#1
000186  f7fffffe          BL       RTC_WakeUpCmd
;;;163    	
;;;164    	EXTI_InitStructure.EXTI_Line = EXTI_Line22;//LINE22
;;;165      EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;//中断事件
00018a  2000              MOVS     r0,#0
00018c  f88d0004          STRB     r0,[sp,#4]
;;;166      EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising; //上升沿触发 
000190  2008              MOVS     r0,#8
000192  9400              STR      r4,[sp,#0]            ;165
000194  f88d0005          STRB     r0,[sp,#5]
;;;167      EXTI_InitStructure.EXTI_LineCmd = ENABLE;//使能LINE22
000198  2401              MOVS     r4,#1
00019a  f88d4006          STRB     r4,[sp,#6]
;;;168      EXTI_Init(&EXTI_InitStructure);//配置
00019e  4668              MOV      r0,sp
0001a0  f7fffffe          BL       EXTI_Init
;;;169     
;;;170     
;;;171    	NVIC_InitStructure.NVIC_IRQChannel = RTC_WKUP_IRQn; 
0001a4  481a              LDR      r0,|L1.528|
0001a6  2103              MOVS     r1,#3
0001a8  7001              STRB     r1,[r0,#0]
;;;172      NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;//抢占优先级1
0001aa  2102              MOVS     r1,#2
0001ac  7041              STRB     r1,[r0,#1]
;;;173      NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;//子优先级2
0001ae  7081              STRB     r1,[r0,#2]
;;;174      NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//使能外部中断通道
0001b0  70c4              STRB     r4,[r0,#3]
;;;175      NVIC_Init(&NVIC_InitStructure);//配置
0001b2  f7fffffe          BL       NVIC_Init
;;;176    }
0001b6  bd7c              POP      {r2-r6,pc}
;;;177    
                          ENDP

                  RTC_Alarm_IRQHandler PROC
;;;178    //RTC闹钟中断服务函数
;;;179    void RTC_Alarm_IRQHandler(void)
0001b8  b510              PUSH     {r4,lr}
;;;180    {    
;;;181    	if(RTC_GetFlagStatus(RTC_FLAG_ALRAF)==SET)//ALARM A中断?
0001ba  f44f7480          MOV      r4,#0x100
0001be  4620              MOV      r0,r4
0001c0  f7fffffe          BL       RTC_GetFlagStatus
0001c4  2801              CMP      r0,#1
0001c6  d102              BNE      |L1.462|
;;;182    	{
;;;183    		RTC_ClearFlag(RTC_FLAG_ALRAF);//清除中断标志
0001c8  4620              MOV      r0,r4
0001ca  f7fffffe          BL       RTC_ClearFlag
                  |L1.462|
;;;184    	}   
;;;185    	EXTI_ClearITPendingBit(EXTI_Line17);	//清除中断线17的中断标志 											 
0001ce  e8bd4010          POP      {r4,lr}
0001d2  f44f3000          MOV      r0,#0x20000
0001d6  f7ffbffe          B.W      EXTI_ClearITPendingBit
;;;186    }
;;;187    
                          ENDP

                  RTC_WKUP_IRQHandler PROC
;;;188    //RTC WAKE UP中断服务函数
;;;189    void RTC_WKUP_IRQHandler(void)
0001da  b510              PUSH     {r4,lr}
;;;190    {    
;;;191    	if(RTC_GetFlagStatus(RTC_FLAG_WUTF)==SET)//WK_UP中断?
0001dc  f44f6480          MOV      r4,#0x400
0001e0  4620              MOV      r0,r4
0001e2  f7fffffe          BL       RTC_GetFlagStatus
0001e6  2801              CMP      r0,#1
0001e8  d109              BNE      |L1.510|
;;;192    	{ 
;;;193    		RTC_ClearFlag(RTC_FLAG_WUTF);	//清除中断标志
0001ea  4620              MOV      r0,r4
0001ec  f7fffffe          BL       RTC_ClearFlag
;;;194    		LED1=!LED1; 
0001f0  4908              LDR      r1,|L1.532|
0001f2  f8d102a8          LDR      r0,[r1,#0x2a8]
0001f6  b140              CBZ      r0,|L1.522|
0001f8  2000              MOVS     r0,#0
                  |L1.506|
0001fa  f8c102a8          STR      r0,[r1,#0x2a8]
                  |L1.510|
;;;195    	}   
;;;196    	EXTI_ClearITPendingBit(EXTI_Line22);//清除中断线22的中断标志 								
0001fe  e8bd4010          POP      {r4,lr}
000202  f44f0080          MOV      r0,#0x400000
000206  f7ffbffe          B.W      EXTI_ClearITPendingBit
                  |L1.522|
00020a  2001              MOVS     r0,#1                 ;194
00020c  e7f5              B        |L1.506|
;;;197    }
;;;198     
                          ENDP

00020e  0000              DCW      0x0000
                  |L1.528|
                          DCD      ||.data||
                  |L1.532|
                          DCD      0x42428000

                          AREA ||.data||, DATA, ALIGN=0

                  NVIC_InitStructure
                          DCDU     0x00000000

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\RTC\\rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_7da1f693____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___5_rtc_c_7da1f693____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_7da1f693____REVSH|
#line 144
|__asm___5_rtc_c_7da1f693____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
