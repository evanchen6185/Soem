; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\bsp_timer.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\bsp_timer.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\FWLIB\STM32F4xx_StdPeriph_Driver\inc -I..\USER -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\ETHERNET -I..\HARDWARE\TIMER -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\RTC -I..\HARDWARE\ADC -I..\HARDWARE\SRAM -I..\HARDWARE\InterTemperate -I..\FWLIB\STM32F4x7_ETH_Driver\inc -I..\MALLOC -I..\USMART -I..\HARDWARE -I..\ETHERCAT -I.\RTE\_LWIP -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS --omf_browse=..\obj\bsp_timer.crf ..\HARDWARE\bsp_timer.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  bsp_InitTimer PROC
;;;23     */
;;;24     void bsp_InitTimer(void)
000000  4827              LDR      r0,|L1.160|
;;;25     {
;;;26     	/*
;;;27     		配置systic中断周期为1ms，并启动systick中断。
;;;28     
;;;29         	SystemCoreClock 是固件中定义的系统内核时钟，对于STM32F4XX,一般为 168MHz
;;;30     
;;;31         	SysTick_Config() 函数的形参表示内核时钟多少个周期后触发一次Systick定时中断.
;;;32     	    	-- SystemCoreClock / 1000  表示定时频率为 1000Hz， 也就是定时周期为  1ms
;;;33     	    	-- SystemCoreClock / 500   表示定时频率为 500Hz，  也就是定时周期为  2ms
;;;34     	    	-- SystemCoreClock / 2000  表示定时频率为 2000Hz， 也就是定时周期为  500us
;;;35     
;;;36         	对于常规的应用，我们一般取定时周期1ms。对于低速CPU或者低功耗应用，可以设置定时周期为 10ms
;;;37         */
;;;38     	SysTick_Config(SystemCoreClock /1000000);
000002  4928              LDR      r1,|L1.164|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  fbb0f0f1          UDIV     r0,r0,r1
00000a  1e40              SUBS     r0,r0,#1
00000c  f1b07f80          CMP      r0,#0x1000000
000010  d20a              BCS      |L1.40|
000012  f04f21e0          MOV      r1,#0xe000e000        ;25
000016  6148              STR      r0,[r1,#0x14]         ;25
000018  4a23              LDR      r2,|L1.168|
00001a  20f0              MOVS     r0,#0xf0              ;25
00001c  f8820d14          STRB     r0,[r2,#0xd14]        ;25
000020  2000              MOVS     r0,#0                 ;25
000022  6188              STR      r0,[r1,#0x18]         ;25
000024  2007              MOVS     r0,#7                 ;25
000026  6108              STR      r0,[r1,#0x10]         ;25
                  |L1.40|
;;;39     }
000028  4770              BX       lr
;;;40     uint32_t bsp_GetTickCount(void)
                          ENDP

                  bsp_GetTickCount PROC
00002a  b510              PUSH     {r4,lr}
;;;41     {
;;;42     	g_iRunTime=TIM_GetCounter(TIM2);
00002c  f04f4080          MOV      r0,#0x40000000
000030  f7fffffe          BL       TIM_GetCounter
000034  491d              LDR      r1,|L1.172|
000036  6008              STR      r0,[r1,#0]  ; g_iRunTime
;;;43        return g_iRunTime;
000038  6808              LDR      r0,[r1,#0]  ; g_iRunTime
;;;44     }
00003a  bd10              POP      {r4,pc}
;;;45     
                          ENDP

                  TIM2_Int_Init PROC
;;;46     
;;;47     void TIM2_Int_Init(u32 arr,u16 psc)
00003c  b53e              PUSH     {r1-r5,lr}
;;;48     {
00003e  460d              MOV      r5,r1
000040  4604              MOV      r4,r0
;;;49     	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
;;;50     	NVIC_InitTypeDef NVIC_InitStructure;
;;;51     	
;;;52     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2,ENABLE);  ///使能TIM2时钟
000042  2101              MOVS     r1,#1
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;53     	
;;;54       TIM_TimeBaseInitStructure.TIM_Period = arr; 	//自动重装载值
;;;55     	TIM_TimeBaseInitStructure.TIM_Prescaler=psc;  //定时器分频
;;;56     	TIM_TimeBaseInitStructure.TIM_CounterMode=TIM_CounterMode_Up; //向上计数模式
00004a  2000              MOVS     r0,#0
00004c  9401              STR      r4,[sp,#4]            ;55
00004e  f8ad5000          STRH     r5,[sp,#0]            ;55
000052  f8ad0002          STRH     r0,[sp,#2]
;;;57     	TIM_TimeBaseInitStructure.TIM_ClockDivision=TIM_CKD_DIV1; 
000056  f8ad0008          STRH     r0,[sp,#8]
;;;58     	
;;;59     	TIM_TimeBaseInit(TIM2,&TIM_TimeBaseInitStructure);//初始化TIM2
00005a  f04f4480          MOV      r4,#0x40000000
00005e  4669              MOV      r1,sp
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       TIM_TimeBaseInit
;;;60     	TIM_Cmd(TIM2,ENABLE); //使能定时器2
000066  2101              MOVS     r1,#1
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       TIM_Cmd
;;;61     }
00006e  bd3e              POP      {r1-r5,pc}
;;;62     /******************************************************************************
                          ENDP

                  Delay_us PROC
;;;68     ****************************************************************************************/
;;;69     void Delay_us(uint32_t time)
000070  e002              B        |L1.120|
                  |L1.114|
;;;70     {    
;;;71        uint32_t i=0; 
;;;72        while(time--)
;;;73        {
;;;74           i=45;   
000072  212d              MOVS     r1,#0x2d
                  |L1.116|
000074  1e49              SUBS     r1,r1,#1
;;;75           while(i--);    
000076  d2fd              BCS      |L1.116|
                  |L1.120|
000078  1e40              SUBS     r0,r0,#1
00007a  d2fa              BCS      |L1.114|
;;;76        }
;;;77     }
00007c  4770              BX       lr
;;;78      /***************************************************************************************
                          ENDP

                  Delay_ms PROC
;;;83     ****************************************************************************************/
;;;84     void Delay_ms(uint32_t time)
00007e  f64b43e1          MOV      r3,#0xbce1
;;;85     {
000082  e002              B        |L1.138|
                  |L1.132|
;;;86        uint32_t i=0;
;;;87        while(time--)
;;;88        {
;;;89           i=48353; 
000084  4619              MOV      r1,r3
                  |L1.134|
000086  1e49              SUBS     r1,r1,#1
;;;90           while(i--);    
000088  d2fd              BCS      |L1.134|
                  |L1.138|
00008a  1e40              SUBS     r0,r0,#1
00008c  d2fa              BCS      |L1.132|
;;;91        }
;;;92     }
00008e  4770              BX       lr
;;;93     void delay(__IO uint32_t nCount)
                          ENDP

                  delay PROC
000090  b501              PUSH     {r0,lr}
;;;94     {
;;;95         for (; nCount != 0; nCount--);
000092  9800              LDR      r0,[sp,#0]
000094  e001              B        |L1.154|
                  |L1.150|
000096  1e40              SUBS     r0,r0,#1
000098  9000              STR      r0,[sp,#0]
                  |L1.154|
00009a  2800              CMP      r0,#0
00009c  d1fb              BNE      |L1.150|
;;;96     }
00009e  bd08              POP      {r3,pc}
                          ENDP

                  |L1.160|
                          DCD      SystemCoreClock
                  |L1.164|
                          DCD      0x000f4240
                  |L1.168|
                          DCD      0xe000e00f
                  |L1.172|
                          DCD      g_iRunTime

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\bsp_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_d0ccb292____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___11_bsp_timer_c_d0ccb292____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_d0ccb292____REVSH|
#line 144
|__asm___11_bsp_timer_c_d0ccb292____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
