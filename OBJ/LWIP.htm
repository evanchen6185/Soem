<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\LWIP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\LWIP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Apr 22 20:41:18 2023
<BR><P>
<H3>Maximum Stack Usage =       6968 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from rtc.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from ethercat_master.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[60]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[5f]">fputc</a> from usart.o(.text) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[5c]">main</a> from ethercat_master.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[61]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[182]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[183]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[184]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[185]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[186]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>ETH_MACDMA_Config</STRONG> (Thumb, 122 bytes, Stack size 192 bytes, dm9162.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_StructInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_SoftwareReset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GetSoftwareResetStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9162_Init
</UL>

<P><STRONG><a name="[73]"></a>DM9162_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dm9162.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = DM9162_Init &rArr; ETH_MACDMA_Config &rArr; ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config_RMII
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>MAC_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, dm9162.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MAC_Init &rArr; ETH_DMATxDescChainInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACAddressConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChecksumInsertionConfig
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATxDescChainInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[187]"></a>ETH_Rx_Packet</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, dm9162.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>ETH_Tx_Packet</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, dm9162.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>ETH_GetCurrentTxBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dm9162.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>lwip_pkt_handle</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dm9162.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lwip_pkt_handle &rArr; ETH_Get_Received_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Get_Received_Frame
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>

<P><STRONG><a name="[7e]"></a>Eth_Link_PHYITConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dm9162.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[81]"></a>dm9k_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dm9000.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_interrupt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_send_packet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_receive_packet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_err_reset
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Initnic
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_reset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_phy_write
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_hash_table
</UL>

<P><STRONG><a name="[80]"></a>dm9k_hash_table</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dm9k_hash_table
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Initnic
</UL>

<P><STRONG><a name="[83]"></a>dm9k_ReadReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dm9000.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_interrupt
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_send_packet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_receive_packet
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_reset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_phy_write
</UL>

<P><STRONG><a name="[82]"></a>dm9k_phy_write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dm9k_phy_write
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_WriteReg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Initnic
</UL>

<P><STRONG><a name="[84]"></a>dm9k_reset</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dm9k_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_WriteReg
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Initnic
</UL>

<P><STRONG><a name="[85]"></a>DM9000_Initnic</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DM9000_Initnic &rArr; dm9k_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_reset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_phy_write
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_hash_table
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_WriteReg
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
</UL>

<P><STRONG><a name="[8b]"></a>DM9000_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DM9000_Init &rArr; DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Initnic
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>dm9k_err_reset</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_receive_packet
</UL>

<P><STRONG><a name="[8e]"></a>dm9k_receive_packet</STRONG> (Thumb, 252 bytes, Stack size 3216 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_err_reset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_WriteReg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>

<P><STRONG><a name="[8f]"></a>dm9k_send_packet</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dm9k_send_packet &rArr; bsp_GetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetTickCount
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
</UL>

<P><STRONG><a name="[91]"></a>dm9k_interrupt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dm9000.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadReg
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_WriteReg
</UL>

<P><STRONG><a name="[92]"></a>dm9k_ReadID</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = dm9k_ReadID &rArr; DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadReg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>RTC_Set_Time</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[95]"></a>RTC_Set_Date</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[97]"></a>My_RTC_Init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[a1]"></a>RTC_Set_AlarmA</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>

<P><STRONG><a name="[a9]"></a>RTC_Set_WakeUp</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpCmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WakeUpClockConfig
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetWakeUpCounter
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>

<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Alarm_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WKUP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetFlagStatus
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18a]"></a>bsp_InitTimer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, bsp_timer.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>bsp_GetTickCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_GetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_send_packet
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyAP
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[b0]"></a>TIM2_Int_Init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bsp_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM2_Int_Init &rArr; TIM_TimeBaseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>Delay_us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_err_reset
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writeeepromAP
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromAP
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyAP
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writeeepromFP
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[71]"></a>Delay_ms</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Initnic
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_reset
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_phy_write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config_RMII
</UL>

<P><STRONG><a name="[18b]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_timer.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>ST_A1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>ST_A2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>Get_Syn_cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>Set_Syn_answer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>bsp_LedOff</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
</UL>

<P><STRONG><a name="[b3]"></a>bsp_InitLed</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsp_InitLed &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
</UL>

<P><STRONG><a name="[b5]"></a>bsp_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsp_Init &rArr; bsp_InitLed &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>bsp_LedOn</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>bsp_LedToggle</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>bsp_IsLedOn</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>bsp_HWDT_service</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 942 bytes, Stack size 24 bytes, ethercat_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6968<LI>Call Chain = main &rArr; ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_writestate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_statecheck
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readstate
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dcsync0
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_configdc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedToggle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOn
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_LedOff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Int_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadReg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9162_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 738 bytes, Stack size 8 bytes, ethercat_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = TIM3_IRQHandler &rArr; ecat_loop &rArr; ec_receive_processdata &rArr; ec_receive_processdata_group &rArr; ecx_receive_processdata_group &rArr; ecx_waitinframe &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_loop
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>ecx_setupdatagram</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecx_setupdatagram
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_setupdatagram
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRWDC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LWR
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRW
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FRMW
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_ARMW
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_redundant
</UL>

<P><STRONG><a name="[cd]"></a>ecx_adddatagram</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecx_adddatagram
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_adddatagram
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRWDC
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[ce]"></a>ecx_BWR</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = ecx_BWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_slaves_to_default
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_BWR
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writestate
</UL>

<P><STRONG><a name="[d2]"></a>ecx_BRD</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = ecx_BRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_BRD
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
</UL>

<P><STRONG><a name="[d3]"></a>ecx_APRD</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = ecx_APRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recover_slave
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_APRD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRDw
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromAP
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyAP
</UL>

<P><STRONG><a name="[d4]"></a>ecx_ARMW</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_ARMW
</UL>

<P><STRONG><a name="[d5]"></a>ecx_FRMW</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_FRMW
</UL>

<P><STRONG><a name="[d6]"></a>ecx_APRDw</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3432<LI>Call Chain = ecx_APRDw &rArr; ecx_APRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[d7]"></a>ecx_FPRD</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_FPRD
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRDw
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync01
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>

<P><STRONG><a name="[d8]"></a>ecx_FPRDw</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3432<LI>Call Chain = ecx_FPRDw &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recover_slave
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[d9]"></a>ecx_APWR</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = ecx_APWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_APWR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWRw
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writeeepromAP
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromAP
</UL>

<P><STRONG><a name="[da]"></a>ecx_APWRw</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3440<LI>Call Chain = ecx_APWRw &rArr; ecx_APWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recover_slave
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[db]"></a>ecx_FPWR</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sm
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_FPWR
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync01
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writeeepromFP
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
</UL>

<P><STRONG><a name="[dc]"></a>ecx_FPWRw</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, ethercatbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3440<LI>Call Chain = ecx_FPWRw &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recover_slave
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writestate
</UL>

<P><STRONG><a name="[dd]"></a>ecx_LRW</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_LRW
</UL>

<P><STRONG><a name="[de]"></a>ecx_LRD</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_LRD
</UL>

<P><STRONG><a name="[df]"></a>ecx_LWR</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_LWR
</UL>

<P><STRONG><a name="[e0]"></a>ecx_LRWDC</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_LRWDC
</UL>

<P><STRONG><a name="[e1]"></a>ec_setupdatagram</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
</UL>

<P><STRONG><a name="[e2]"></a>ec_adddatagram</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
</UL>

<P><STRONG><a name="[e3]"></a>ec_BWR</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
</UL>

<P><STRONG><a name="[e4]"></a>ec_BRD</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
</UL>

<P><STRONG><a name="[e5]"></a>ec_APRD</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_APRDw
</UL>

<P><STRONG><a name="[e6]"></a>ec_ARMW</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_ARMW
</UL>

<P><STRONG><a name="[e7]"></a>ec_FRMW</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FRMW
</UL>

<P><STRONG><a name="[e8]"></a>ec_APRDw</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_APRD
</UL>

<P><STRONG><a name="[e9]"></a>ec_FPRD</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_FPRDw
</UL>

<P><STRONG><a name="[ea]"></a>ec_FPRDw</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_FPRD
</UL>

<P><STRONG><a name="[eb]"></a>ec_APWR</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_APWRw
</UL>

<P><STRONG><a name="[ec]"></a>ec_APWRw</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_APWR
</UL>

<P><STRONG><a name="[ed]"></a>ec_FPWR</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_FPWRw
</UL>

<P><STRONG><a name="[ee]"></a>ec_FPWRw</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_FPWR
</UL>

<P><STRONG><a name="[ef]"></a>ec_LRW</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRW
</UL>

<P><STRONG><a name="[f0]"></a>ec_LRD</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRD
</UL>

<P><STRONG><a name="[f1]"></a>ec_LWR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LWR
</UL>

<P><STRONG><a name="[f2]"></a>ec_LRWDC</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ethercatbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRWDC
</UL>

<P><STRONG><a name="[fa]"></a>ec_findconfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ec_findconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_from_table
</UL>

<P><STRONG><a name="[f4]"></a>ecx_init_context</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3600<LI>Call Chain = ecx_init_context &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[f7]"></a>ecx_detect_slaves</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3448<LI>Call Chain = ecx_detect_slaves &rArr; ecx_BRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[fe]"></a>ecx_config_init</STRONG> (Thumb, 1830 bytes, Stack size 72 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3752<LI>Call Chain = ecx_config_init &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_context
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_prev_sii
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_from_table
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_slaves_to_default
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWRw
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRDw
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRDw
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_init
</UL>

<P><STRONG><a name="[10d]"></a>ecx_recover_slave</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, ethercatconfig.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWRw
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRDw
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_recover_slave
</UL>

<P><STRONG><a name="[c0]"></a>ec_config_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3752<LI>Call Chain = ec_config_init &rArr; ecx_config_init &rArr; ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>ecx_config_map_group</STRONG> (Thumb, 2676 bytes, Stack size 112 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6944<LI>Call Chain = ecx_config_map_group &rArr; ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sm
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_statecheck
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map_group
</UL>

<P><STRONG><a name="[111]"></a>ec_config_map_group</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6944<LI>Call Chain = ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map
</UL>

<P><STRONG><a name="[c1]"></a>ec_config_map</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6944<LI>Call Chain = ec_config_map &rArr; ec_config_map_group &rArr; ecx_config_map_group &rArr; ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_map_group
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>ec_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ethercatconfig.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[113]"></a>ec_recover_slave</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethercatconfig.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recover_slave
</UL>

<P><STRONG><a name="[ca]"></a>ecat_loop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3408<LI>Call Chain = ecat_loop &rArr; ec_receive_processdata &rArr; ec_receive_processdata_group &rArr; ecx_receive_processdata_group &rArr; ecx_waitinframe &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>ecx_pusherror</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_packeterror
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxreceive
</UL>

<P><STRONG><a name="[192]"></a>ecx_poperror</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, ethercatmain.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>ecx_packeterror</STRONG> (Thumb, 50 bytes, Stack size 28 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
</UL>

<P><STRONG><a name="[116]"></a>ecx_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecx_init &rArr; ecx_setupnic
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_init
</UL>

<P><STRONG><a name="[118]"></a>ecx_init_redundant</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ecx_init_redundant &rArr; ecx_setupnic
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_init
</UL>

<P><STRONG><a name="[119]"></a>ecx_eeprom_waitnotbusyFP</STRONG> (Thumb, 102 bytes, Stack size 64 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3472<LI>Call Chain = ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetTickCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom2
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writeeepromFP
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
</UL>

<P><STRONG><a name="[11a]"></a>ecx_readeepromFP</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560<LI>Call Chain = ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom
</UL>

<P><STRONG><a name="[10e]"></a>ecx_eeprom2master</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3456<LI>Call Chain = ecx_eeprom2master &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom1
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeeprom
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recover_slave
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writeeeprom
</UL>

<P><STRONG><a name="[f6]"></a>ecx_siigetbyte</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3592<LI>Call Chain = ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_context
</UL>

<P><STRONG><a name="[108]"></a>ecx_eeprom2pdi</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3456<LI>Call Chain = ecx_eeprom2pdi &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSMnext
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[102]"></a>ecx_siifind</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3624<LI>Call Chain = ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siistring
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiSM
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiFMMU
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[103]"></a>ecx_siistring</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3680<LI>Call Chain = ecx_siistring &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[107]"></a>ecx_siiFMMU</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3656<LI>Call Chain = ecx_siiFMMU &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[105]"></a>ecx_siiSM</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3656<LI>Call Chain = ecx_siiSM &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[106]"></a>ecx_siiSMnext</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3624<LI>Call Chain = ecx_siiSMnext &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[10b]"></a>ecx_siiPDO</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3680<LI>Call Chain = ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siifind
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2pdi
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
</UL>

<P><STRONG><a name="[101]"></a>ecx_statecheck</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3488<LI>Call Chain = ecx_statecheck &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetTickCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_statecheck
</UL>

<P><STRONG><a name="[193]"></a>ec_nextmbxcnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatmain.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>ec_clearmbx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[11c]"></a>ecx_mbxempty</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetTickCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxsend
</UL>

<P><STRONG><a name="[11d]"></a>ecx_mbxsend</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_mbxempty
</UL>

<P><STRONG><a name="[11e]"></a>ecx_mbxreceive</STRONG> (Thumb, 576 bytes, Stack size 88 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pusherror
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetTickCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[10f]"></a>ecx_readeeprom</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromFP
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_recover_slave
</UL>

<P><STRONG><a name="[11f]"></a>ecx_writeeepromFP</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writeeeprom
</UL>

<P><STRONG><a name="[120]"></a>ecx_writeeeprom</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writeeepromFP
</UL>

<P><STRONG><a name="[121]"></a>ecx_eeprom_waitnotbusyAP</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetTickCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writeeepromAP
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readeepromAP
</UL>

<P><STRONG><a name="[122]"></a>ecx_readeepromAP</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyAP
</UL>

<P><STRONG><a name="[123]"></a>ecx_writeeepromAP</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, ethercatmain.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyAP
</UL>

<P><STRONG><a name="[ff]"></a>ecx_readeeprom1</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3520<LI>Call Chain = ecx_readeeprom1 &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom2master
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[100]"></a>ecx_readeeprom2</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3520<LI>Call Chain = ecx_readeeprom2 &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_eeprom_waitnotbusyFP
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[be]"></a>ec_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ec_init &rArr; ecx_init_redundant &rArr; ecx_setupnic
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_redundant
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>ec_statecheck</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3488<LI>Call Chain = ec_statecheck &rArr; ecx_statecheck &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_statecheck
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>ecx_FPRD_multi</STRONG> (Thumb, 278 bytes, Stack size 320 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3680<LI>Call Chain = ecx_FPRD_multi &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
</UL>

<P><STRONG><a name="[125]"></a>ecx_readstate</STRONG> (Thumb, 386 bytes, Stack size 560 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4240<LI>Call Chain = ecx_readstate &rArr; ecx_FPRD_multi &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_readstate
</UL>

<P><STRONG><a name="[c8]"></a>ec_readstate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4240<LI>Call Chain = ec_readstate &rArr; ecx_readstate &rArr; ecx_FPRD_multi &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_readstate
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>ecx_receive_processdata_group</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400<LI>Call Chain = ecx_receive_processdata_group &rArr; ecx_waitinframe &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pullindex
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata_group
</UL>

<P><STRONG><a name="[129]"></a>ecx_writestate</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464<LI>Call Chain = ecx_writestate &rArr; ecx_FPWRw &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWRw
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_writestate
</UL>

<P><STRONG><a name="[c7]"></a>ec_writestate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464<LI>Call Chain = ec_writestate &rArr; ecx_writestate &rArr; ecx_FPWRw &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writestate
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>ecx_send_processdata_group</STRONG> (Thumb, 864 bytes, Stack size 88 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ecx_send_processdata_group &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; MAC_Send &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_pushindex
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata_group
</UL>

<P><STRONG><a name="[12d]"></a>ec_send_processdata_group</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ec_send_processdata_group &rArr; ecx_send_processdata_group &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; MAC_Send &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata
</UL>

<P><STRONG><a name="[12e]"></a>ec_receive_processdata_group</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400<LI>Call Chain = ec_receive_processdata_group &rArr; ecx_receive_processdata_group &rArr; ecx_waitinframe &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata
</UL>

<P><STRONG><a name="[c5]"></a>ec_send_processdata</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ec_send_processdata &rArr; ec_send_processdata_group &rArr; ecx_send_processdata_group &rArr; ecx_outframe_red &rArr; ecx_outframe &rArr; MAC_Send &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_send_processdata_group
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_loop
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>ec_receive_processdata</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400<LI>Call Chain = ec_receive_processdata &rArr; ec_receive_processdata_group &rArr; ecx_receive_processdata_group &rArr; ecx_waitinframe &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_receive_processdata_group
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecat_loop
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>ecx_dcsync0</STRONG> (Thumb, 260 bytes, Stack size 72 bytes, ethercatdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3480<LI>Call Chain = ecx_dcsync0 &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dcsync0
</UL>

<P><STRONG><a name="[131]"></a>ecx_dcsync01</STRONG> (Thumb, 290 bytes, Stack size 96 bytes, ethercatdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_dcsync01
</UL>

<P><STRONG><a name="[132]"></a>ecx_configdc</STRONG> (Thumb, 1046 bytes, Stack size 96 bytes, ethercatdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3504<LI>Call Chain = ecx_configdc &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_parentport
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_prevport
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_porttime
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_configdc
</UL>

<P><STRONG><a name="[c3]"></a>ec_dcsync0</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ethercatdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3496<LI>Call Chain = ec_dcsync0 &rArr; ecx_dcsync0 &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>ec_dcsync01</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethercatdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync01
</UL>

<P><STRONG><a name="[c2]"></a>ec_configdc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ethercatdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3504<LI>Call Chain = ec_configdc &rArr; ecx_configdc &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>MAC_Send</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nicdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MAC_Send &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Prepare_Transmit_Descriptors
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
</UL>

<P><STRONG><a name="[13a]"></a>ec_setupheader</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nicdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>

<P><STRONG><a name="[117]"></a>ecx_setupnic</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, nicdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ecx_setupnic
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_setupheader
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_clear_rxbufstat
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_redundant
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init
</UL>

<P><STRONG><a name="[cf]"></a>ecx_getindex</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, nicdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecx_getindex
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRWDC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LWR
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRW
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FRMW
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_ARMW
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_getindex
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[d1]"></a>ecx_setbufstat</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, nicdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRWDC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LWR
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRW
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FRMW
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_ARMW
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_setbufstat
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[13b]"></a>ecx_outframe</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nicdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ecx_outframe &rArr; MAC_Send &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_send_packet
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_outframe
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
</UL>

<P><STRONG><a name="[12b]"></a>ecx_outframe_red</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, nicdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ecx_outframe_red &rArr; ecx_outframe &rArr; MAC_Send &rArr; ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_outframe_red
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
</UL>

<P><STRONG><a name="[13c]"></a>ecx_inframe</STRONG> (Thumb, 314 bytes, Stack size 48 bytes, nicdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3272<LI>Call Chain = ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_receive_packet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_pkt_handle
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_CheckFrameReceived
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_inframe
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
</UL>

<P><STRONG><a name="[13e]"></a>ecx_waitinframe_red</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, nicdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3328<LI>Call Chain = ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetTickCount
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe
</UL>

<P><STRONG><a name="[128]"></a>ecx_waitinframe</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nicdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3344<LI>Call Chain = ecx_waitinframe &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[13f]"></a>ec_setbufstat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nicdrv.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setbufstat
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
</UL>

<P><STRONG><a name="[d0]"></a>ecx_srconfirm</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, nicdrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3360<LI>Call Chain = ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetTickCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadReg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_setbufstat
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRWDC
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LWR
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRW
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APWR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FRMW
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_ARMW
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_srconfirm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD_multi
</UL>

<P><STRONG><a name="[140]"></a>ec_getindex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nicdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_getindex
</UL>

<P><STRONG><a name="[141]"></a>ec_outframe</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nicdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe
</UL>

<P><STRONG><a name="[142]"></a>ec_outframe_red</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nicdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_outframe_red
</UL>

<P><STRONG><a name="[143]"></a>ec_inframe</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nicdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>

<P><STRONG><a name="[144]"></a>ec_srconfirm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nicdrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
</UL>

<P><STRONG><a name="[194]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>GPIO_DeInit</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[6e]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config_RMII
</UL>

<P><STRONG><a name="[197]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_reset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config_RMII
</UL>

<P><STRONG><a name="[70]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_reset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config_RMII
</UL>

<P><STRONG><a name="[19d]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config_RMII
</UL>

<P><STRONG><a name="[1a0]"></a>RCC_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[147]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[1a2]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>RCC_LSEConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[1a4]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>RCC_PLLSAIConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>RCC_PLLSAICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>RCC_MCO1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>RCC_MCO2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[9d]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[9e]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[1b3]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>RCC_SAIPLLI2SClkDivConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>RCC_SAIPLLSAIClkDivConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>RCC_SAIBlockACLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>RCC_SAIBlockBCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>RCC_LTDCCLKDivConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>RCC_TIMCLKPresConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitLed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config_RMII
</UL>

<P><STRONG><a name="[1bb]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
</UL>

<P><STRONG><a name="[98]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Int_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[6c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_CtrlLinesConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config_RMII
</UL>

<P><STRONG><a name="[146]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DeInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[1bc]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[149]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
</UL>

<P><STRONG><a name="[1be]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>RCC_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>RCC_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>SYSCFG_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[1c7]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>SYSCFG_MemorySwappingBank</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>SYSCFG_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_GPIO_Config_RMII
</UL>

<P><STRONG><a name="[1ca]"></a>SYSCFG_CompensationCellCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>SYSCFG_GetCompensationCellStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>TIM_DeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[b1]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Int_Init
</UL>

<P><STRONG><a name="[1cc]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetTickCount
</UL>

<P><STRONG><a name="[1d1]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_Int_Init
</UL>

<P><STRONG><a name="[1d7]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>TIM_SelectOCxM</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[152]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[151]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[14f]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[14c]"></a>TIM_ICInit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1fa]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>TIM_PWMIConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[1fb]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>TIM_SelectCOM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[204]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[207]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[154]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[156]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[158]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[157]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[159]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[20b]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>USART_DeInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[15b]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[211]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>USART_ClockInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[214]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[218]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[225]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[227]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>ETH_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ETH_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[69]"></a>ETH_StructInit</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[7f]"></a>ETH_WritePHYRegister</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_WritePHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_PHYITConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYLoopBackCmd
</UL>

<P><STRONG><a name="[74]"></a>ETH_ReadPHYRegister</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_ReadPHYRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_srconfirm
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eth_Link_PHYITConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9162_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_PHYLoopBackCmd
</UL>

<P><STRONG><a name="[6a]"></a>ETH_Init</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ETH_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[161]"></a>ETH_DMAReceptionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[160]"></a>ETH_DMATransmissionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[15f]"></a>ETH_MACReceptionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[15e]"></a>ETH_FlushTransmitFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[15d]"></a>ETH_MACTransmissionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Start
</UL>

<P><STRONG><a name="[7a]"></a>ETH_Start</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ETH_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACTransmissionCmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_FlushTransmitFIFO
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACReceptionCmd
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMATransmissionCmd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_DMAReceptionCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_Init
</UL>

<P><STRONG><a name="[228]"></a>ETH_GetFlowControlBusyStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>ETH_InitiatePauseControlFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>ETH_BackPressureActivationCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>ETH_GetMACFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>ETH_GetMACITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>ETH_MACITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>ETH_MACAddressConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_Init
</UL>

<P><STRONG><a name="[22e]"></a>ETH_GetMACAddress</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>ETH_MACAddressPerfectFilterCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>ETH_MACAddressFilterConfig</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>ETH_MACAddressMaskBytesFilterConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>ETH_Get_Received_Frame</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ETH_Get_Received_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_pkt_handle
</UL>

<P><STRONG><a name="[232]"></a>ETH_Get_Received_Frame_interrupt</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>ETH_Prepare_Transmit_Descriptors</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_Prepare_Transmit_Descriptors
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_Send
</UL>

<P><STRONG><a name="[78]"></a>ETH_DMARxDescChainInit</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMARxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_Init
</UL>

<P><STRONG><a name="[13d]"></a>ETH_CheckFrameReceived</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>

<P><STRONG><a name="[77]"></a>ETH_DMATxDescChainInit</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ETH_DMATxDescChainInit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_Init
</UL>

<P><STRONG><a name="[233]"></a>ETH_GetDMATxDescFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>ETH_GetDMATxDescCollisionCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>ETH_SetDMATxDescOwnBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>ETH_DMATxDescTransmitITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>ETH_DMATxDescFrameSegmentConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>ETH_DMATxDescChecksumInsertionConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_Init
</UL>

<P><STRONG><a name="[238]"></a>ETH_DMATxDescCRCCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>ETH_DMATxDescSecondAddressChainedCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>ETH_DMATxDescShortFramePaddingCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>ETH_DMATxDescBufferSizeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>ETH_GetDMARxDescFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>ETH_GetDMAPTPRxDescExtendedFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>ETH_SetDMARxDescOwnBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>ETH_GetDMARxDescFrameLength</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>ETH_DMARxDescReceiveITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>ETH_GetDMARxDescBufferSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>ETH_GetRxPktSize</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>ETH_EnhancedDescriptorCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>ETH_SoftwareReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[68]"></a>ETH_GetSoftwareResetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_MACDMA_Config
</UL>

<P><STRONG><a name="[244]"></a>ETH_GetDMAFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>ETH_DMAClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>ETH_DMAITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>ETH_GetDMAITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>ETH_DMAClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>ETH_GetTransmitProcessState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>ETH_GetReceiveProcessState</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>ETH_GetFlushTransmitFIFOStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>ETH_GetDMAOverflowStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>ETH_GetRxOverflowMissedFrameCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>ETH_GetBufferUnavailableMissedFrameCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>ETH_GetCurrentTxDescStartAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>ETH_GetCurrentRxDescStartAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>ETH_GetCurrentTxBufferAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>ETH_GetCurrentRxBufferAddress</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>ETH_ResumeDMATransmission</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>ETH_ResumeDMAReception</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>ETH_SetReceiveWatchdogTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>ETH_PHYLoopBackCmd</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f4x7_eth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_WritePHYRegister
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_ReadPHYRegister
</UL>

<P><STRONG><a name="[256]"></a>ETH_ResetWakeUpFrameFilterRegisterPointer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>ETH_SetWakeUpFrameFilterRegister</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>ETH_GlobalUnicastWakeUpCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>ETH_GetPMTFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>ETH_WakeUpFrameDetectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>ETH_MagicPacketDetectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>ETH_PowerDownCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>ETH_MMCCounterFullPreset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>ETH_MMCCounterHalfPreset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>ETH_MMCCounterFreezeCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>ETH_MMCResetOnReadCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>ETH_MMCCounterRolloverCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>ETH_MMCCountersReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>ETH_MMCITConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>ETH_GetMMCITStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>ETH_GetMMCRegister</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4x7_eth.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
</UL>

<P><STRONG><a name="[267]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9K_FSMCConfig
</UL>

<P><STRONG><a name="[268]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>FSMC_NANDInit</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>FSMC_NANDCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>FSMC_GetECC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>FSMC_ITConfig</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>FSMC_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>FSMC_GetITStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SynchroShiftConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[164]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[163]"></a>RTC_DeInit</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[166]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
</UL>

<P><STRONG><a name="[9f]"></a>RTC_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[277]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>RTC_RefClockCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[279]"></a>RTC_BypassShadowCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>RTC_SetTime</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Time
</UL>

<P><STRONG><a name="[27a]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>RTC_GetTime</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[27b]"></a>RTC_GetSubSecond</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>RTC_SetDate</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_Date
</UL>

<P><STRONG><a name="[27c]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>RTC_GetDate</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[a3]"></a>RTC_SetAlarm</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
</UL>

<P><STRONG><a name="[27d]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>RTC_GetAlarm</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[a2]"></a>RTC_AlarmCmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
</UL>

<P><STRONG><a name="[27e]"></a>RTC_AlarmSubSecondConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>RTC_GetAlarmSubSecond</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
</UL>

<P><STRONG><a name="[ac]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
</UL>

<P><STRONG><a name="[280]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
</UL>

<P><STRONG><a name="[281]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>RTC_OutputConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[16e]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[284]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>RTC_CalibOutputConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>RTC_SmoothCalibConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[288]"></a>RTC_GetTimeStampSubSecond</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>RTC_TamperCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>RTC_TamperFilterConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>RTC_TamperSamplingFreqConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>RTC_TamperPinsPrechargeDuration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>RTC_TimeStampOnTamperDetectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>RTC_TamperPullUpCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[9a]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[290]"></a>RTC_TamperPinSelection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>RTC_TimeStampPinSelection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>RTC_SynchroShiftConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[a6]"></a>RTC_ITConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
</UL>

<P><STRONG><a name="[ad]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>RTC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[293]"></a>RTC_GetITStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
</UL>

<P><STRONG><a name="[294]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f4xx_exti.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
</UL>

<P><STRONG><a name="[295]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>EXTI_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WKUP_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_WakeUp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set_AlarmA
</UL>

<P><STRONG><a name="[171]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[99]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;My_RTC_Init
</UL>

<P><STRONG><a name="[29a]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>PWR_MainRegulatorModeConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>PWR_OverDriveCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>PWR_OverDriveSWCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>PWR_UnderDriveCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>PWR_MainRegulatorLowVoltageCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>PWR_LowRegulatorLowVoltageCmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>PWR_EnterUnderDriveSTOPMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[b8]"></a>uart_init</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync01
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_dcsync0
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRWDC
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRD
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_LRW
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPRD
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FRMW
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_ARMW
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_APRD
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BRD
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_receive_packet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_pkt_handle
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_waitinframe_red
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MAC_Send
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_prev_sii
</UL>

<P><STRONG><a name="[2ab]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2ac]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_clearmbx
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_writedatagramdata
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_inframe
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siigetbyte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_init_context
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_set_slaves_to_default
</UL>

<P><STRONG><a name="[2ae]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fb]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_from_table
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[62]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2af]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2b0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[2b1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b2]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[bc]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_detect_slaves
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sm
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_mapping
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_prev_sii
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2b3]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[104]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[2b4]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2b5]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2b6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[63]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[6b]"></a>ETH_GPIO_Config_RMII</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, dm9162.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ETH_GPIO_Config_RMII &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_ETH_MediaInterfaceConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9162_Init
</UL>

<P><STRONG><a name="[86]"></a>DM9K_FSMCConfig</STRONG> (Thumb, 80 bytes, Stack size 96 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DM9K_FSMCConfig &rArr; FSMC_NORSRAMInit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
</UL>

<P><STRONG><a name="[89]"></a>DM9K_CtrlLinesConfig</STRONG> (Thumb, 394 bytes, Stack size 32 bytes, dm9000.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DM9K_CtrlLinesConfig &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm9k_ReadID
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DM9000_Init
</UL>

<P><STRONG><a name="[cc]"></a>ecx_writedatagramdata</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ethercatbase.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_adddatagram
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupdatagram
</UL>

<P><STRONG><a name="[f8]"></a>ecx_set_slaves_to_default</STRONG> (Thumb, 294 bytes, Stack size 112 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3520<LI>Call Chain = ecx_set_slaves_to_default &rArr; ecx_BWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_BWR
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[f9]"></a>ecx_config_from_table</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ecx_config_from_table &rArr; ec_findconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ec_findconfig
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[fc]"></a>ecx_lookup_prev_sii</STRONG> (Thumb, 440 bytes, Stack size 32 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecx_lookup_prev_sii &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_init
</UL>

<P><STRONG><a name="[109]"></a>ecx_lookup_mapping</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ecx_lookup_mapping &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_map_sii
</UL>

<P><STRONG><a name="[10a]"></a>ecx_map_sii</STRONG> (Thumb, 470 bytes, Stack size 3152 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 6832<LI>Call Chain = ecx_map_sii &rArr; ecx_siiPDO &rArr; ecx_siifind &rArr; ecx_siigetbyte &rArr; ecx_readeepromFP &rArr; ecx_eeprom_waitnotbusyFP &rArr; ecx_FPRD &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_siiPDO
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_lookup_mapping
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[10c]"></a>ecx_map_sm</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, ethercatconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3456<LI>Call Chain = ecx_map_sm &rArr; ecx_FPWR &rArr; ecx_srconfirm &rArr; ecx_waitinframe_red &rArr; ecx_inframe &rArr; dm9k_receive_packet &rArr; dm9k_err_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_FPWR
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_config_map_group
</UL>

<P><STRONG><a name="[12c]"></a>ecx_pushindex</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ethercatmain.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ecx_pushindex
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_send_processdata_group
</UL>

<P><STRONG><a name="[127]"></a>ecx_pullindex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ethercatmain.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_receive_processdata_group
</UL>

<P><STRONG><a name="[134]"></a>ecx_porttime</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ethercatdc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[135]"></a>ecx_prevport</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ethercatdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecx_prevport
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[133]"></a>ecx_parentport</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ethercatdc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecx_parentport
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_configdc
</UL>

<P><STRONG><a name="[139]"></a>ecx_clear_rxbufstat</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nicdrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecx_setupnic
</UL>

<P><STRONG><a name="[150]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[14e]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[15c]"></a>ETH_Delay</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, stm32f4x7_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ETH_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_Init
</UL>

<P><STRONG><a name="[169]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[168]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>

<P><STRONG><a name="[17d]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[180]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17f]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[60]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
