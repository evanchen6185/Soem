; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\stm32f4xx_gpio.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_gpio.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\FWLIB\STM32F4xx_StdPeriph_Driver\inc -I..\USER -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\ETHERNET -I..\HARDWARE\TIMER -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\RTC -I..\HARDWARE\ADC -I..\HARDWARE\SRAM -I..\HARDWARE\InterTemperate -I..\FWLIB\STM32F4x7_ETH_Driver\inc -I..\MALLOC -I..\USMART -I..\HARDWARE -I..\ETHERCAT -I.\RTE\_LWIP -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS --omf_browse=..\obj\stm32f4xx_gpio.crf ..\FWLIB\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_gpio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;126      */
;;;127    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  4977              LDR      r1,|L1.480|
;;;128    {
000002  b510              PUSH     {r4,lr}
;;;129      /* Check the parameters */
;;;130      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;131    
;;;132      if (GPIOx == GPIOA)
000004  4288              CMP      r0,r1
000006  d106              BNE      |L1.22|
;;;133      {
;;;134        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000008  2101              MOVS     r1,#1
00000a  4608              MOV      r0,r1
00000c  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;135        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
000010  2100              MOVS     r1,#0
000012  2001              MOVS     r0,#1
000014  e05b              B        |L1.206|
                  |L1.22|
;;;136      }
;;;137      else if (GPIOx == GPIOB)
000016  4973              LDR      r1,|L1.484|
000018  4288              CMP      r0,r1
00001a  d106              BNE      |L1.42|
;;;138      {
;;;139        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
00001c  2101              MOVS     r1,#1
00001e  2002              MOVS     r0,#2
000020  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;140        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
000024  2100              MOVS     r1,#0
000026  2002              MOVS     r0,#2
000028  e051              B        |L1.206|
                  |L1.42|
;;;141      }
;;;142      else if (GPIOx == GPIOC)
00002a  496f              LDR      r1,|L1.488|
00002c  4288              CMP      r0,r1
00002e  d106              BNE      |L1.62|
;;;143      {
;;;144        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
000030  2101              MOVS     r1,#1
000032  2004              MOVS     r0,#4
000034  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;145        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
000038  2100              MOVS     r1,#0
00003a  2004              MOVS     r0,#4
00003c  e047              B        |L1.206|
                  |L1.62|
;;;146      }
;;;147      else if (GPIOx == GPIOD)
00003e  496b              LDR      r1,|L1.492|
000040  4288              CMP      r0,r1
000042  d106              BNE      |L1.82|
;;;148      {
;;;149        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
000044  2101              MOVS     r1,#1
000046  2008              MOVS     r0,#8
000048  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;150        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
00004c  2100              MOVS     r1,#0
00004e  2008              MOVS     r0,#8
000050  e03d              B        |L1.206|
                  |L1.82|
;;;151      }
;;;152      else if (GPIOx == GPIOE)
000052  4967              LDR      r1,|L1.496|
000054  4288              CMP      r0,r1
000056  d106              BNE      |L1.102|
;;;153      {
;;;154        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
000058  2101              MOVS     r1,#1
00005a  2010              MOVS     r0,#0x10
00005c  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;155        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
000060  2100              MOVS     r1,#0
000062  2010              MOVS     r0,#0x10
000064  e033              B        |L1.206|
                  |L1.102|
;;;156      }
;;;157      else if (GPIOx == GPIOF)
000066  4963              LDR      r1,|L1.500|
000068  4288              CMP      r0,r1
00006a  d106              BNE      |L1.122|
;;;158      {
;;;159        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
00006c  2101              MOVS     r1,#1
00006e  2020              MOVS     r0,#0x20
000070  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;160        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
000074  2100              MOVS     r1,#0
000076  2020              MOVS     r0,#0x20
000078  e029              B        |L1.206|
                  |L1.122|
;;;161      }
;;;162      else if (GPIOx == GPIOG)
00007a  495f              LDR      r1,|L1.504|
00007c  4288              CMP      r0,r1
00007e  d106              BNE      |L1.142|
;;;163      {
;;;164        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
000080  2101              MOVS     r1,#1
000082  2040              MOVS     r0,#0x40
000084  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;165        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
000088  2100              MOVS     r1,#0
00008a  2040              MOVS     r0,#0x40
00008c  e01f              B        |L1.206|
                  |L1.142|
;;;166      }
;;;167      else if (GPIOx == GPIOH)
00008e  495b              LDR      r1,|L1.508|
000090  4288              CMP      r0,r1
000092  d106              BNE      |L1.162|
;;;168      {
;;;169        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
000094  2101              MOVS     r1,#1
000096  2080              MOVS     r0,#0x80
000098  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;170        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
00009c  2100              MOVS     r1,#0
00009e  2080              MOVS     r0,#0x80
0000a0  e015              B        |L1.206|
                  |L1.162|
;;;171      }
;;;172    
;;;173      else if (GPIOx == GPIOI)
0000a2  4957              LDR      r1,|L1.512|
0000a4  4288              CMP      r0,r1
0000a6  d102              BNE      |L1.174|
;;;174      {
;;;175        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
0000a8  2101              MOVS     r1,#1
0000aa  1584              ASRS     r4,r0,#22
;;;176        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
0000ac  e00a              B        |L1.196|
                  |L1.174|
;;;177      }
;;;178      else if (GPIOx == GPIOJ)
0000ae  4955              LDR      r1,|L1.516|
0000b0  4288              CMP      r0,r1
0000b2  d102              BNE      |L1.186|
;;;179      {
;;;180        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
0000b4  2101              MOVS     r1,#1
0000b6  1544              ASRS     r4,r0,#21
;;;181        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
0000b8  e004              B        |L1.196|
                  |L1.186|
;;;182      }
;;;183      else
;;;184      {
;;;185        if (GPIOx == GPIOK)
0000ba  4953              LDR      r1,|L1.520|
0000bc  4288              CMP      r0,r1
0000be  d10a              BNE      |L1.214|
;;;186        {
;;;187          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
0000c0  2101              MOVS     r1,#1
0000c2  1504              ASRS     r4,r0,#20
                  |L1.196|
0000c4  4620              MOV      r0,r4
0000c6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;188          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
0000ca  2100              MOVS     r1,#0
0000cc  4620              MOV      r0,r4
                  |L1.206|
0000ce  e8bd4010          POP      {r4,lr}
0000d2  f7ffbffe          B.W      RCC_AHB1PeriphResetCmd
                  |L1.214|
;;;189        }
;;;190      }
;;;191    }
0000d6  bd10              POP      {r4,pc}
;;;192    
                          ENDP

                  GPIO_Init PROC
;;;201      */
;;;202    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
0000d8  b5f0              PUSH     {r4-r7,lr}
;;;203    {
;;;204      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
0000da  2200              MOVS     r2,#0
;;;205    
;;;206      /* Check the parameters */
;;;207      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;208      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;209      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;210      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;211    
;;;212      /* ------------------------- Configure the port pins ---------------- */
;;;213      /*-- GPIO Mode Configuration --*/
;;;214      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
;;;215      {
;;;216        pos = ((uint32_t)0x01) << pinpos;
0000dc  2701              MOVS     r7,#1
;;;217        /* Get the port pins position */
;;;218        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
;;;219    
;;;220        if (currentpin == pos)
;;;221        {
;;;222          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
0000de  f04f0c03          MOV      r12,#3
                  |L1.226|
0000e2  680b              LDR      r3,[r1,#0]            ;218
0000e4  fa07f502          LSL      r5,r7,r2              ;216
0000e8  402b              ANDS     r3,r3,r5              ;218
0000ea  42ab              CMP      r3,r5                 ;220
0000ec  d12c              BNE      |L1.328|
0000ee  6806              LDR      r6,[r0,#0]
0000f0  0053              LSLS     r3,r2,#1
0000f2  fa0cf403          LSL      r4,r12,r3
0000f6  43a6              BICS     r6,r6,r4
0000f8  6006              STR      r6,[r0,#0]
;;;223          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
0000fa  790e              LDRB     r6,[r1,#4]
0000fc  f8d0e000          LDR      lr,[r0,#0]
000100  409e              LSLS     r6,r6,r3
000102  ea46060e          ORR      r6,r6,lr
000106  6006              STR      r6,[r0,#0]
;;;224    
;;;225          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
000108  790e              LDRB     r6,[r1,#4]
00010a  2e01              CMP      r6,#1
00010c  d001              BEQ      |L1.274|
00010e  2e02              CMP      r6,#2
000110  d112              BNE      |L1.312|
                  |L1.274|
;;;226          {
;;;227            /* Check Speed mode parameters */
;;;228            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;229    
;;;230            /* Speed mode configuration */
;;;231            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
000112  6886              LDR      r6,[r0,#8]
000114  43a6              BICS     r6,r6,r4
000116  6086              STR      r6,[r0,#8]
;;;232            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
000118  794e              LDRB     r6,[r1,#5]
00011a  f8d0e008          LDR      lr,[r0,#8]
00011e  409e              LSLS     r6,r6,r3
000120  ea46060e          ORR      r6,r6,lr
000124  6086              STR      r6,[r0,#8]
;;;233    
;;;234            /* Check Output mode parameters */
;;;235            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;236    
;;;237            /* Output mode configuration*/
;;;238            GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
000126  6846              LDR      r6,[r0,#4]
000128  43ae              BICS     r6,r6,r5
00012a  6046              STR      r6,[r0,#4]
;;;239            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
00012c  6845              LDR      r5,[r0,#4]
00012e  798e              LDRB     r6,[r1,#6]
000130  4096              LSLS     r6,r6,r2
000132  b2b6              UXTH     r6,r6
000134  4335              ORRS     r5,r5,r6
000136  6045              STR      r5,[r0,#4]
                  |L1.312|
;;;240          }
;;;241    
;;;242          /* Pull-up Pull down resistor configuration*/
;;;243          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
000138  68c5              LDR      r5,[r0,#0xc]
00013a  43a5              BICS     r5,r5,r4
00013c  60c5              STR      r5,[r0,#0xc]
;;;244          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
00013e  79cc              LDRB     r4,[r1,#7]
000140  409c              LSLS     r4,r4,r3
000142  68c3              LDR      r3,[r0,#0xc]
000144  431c              ORRS     r4,r4,r3
000146  60c4              STR      r4,[r0,#0xc]
                  |L1.328|
000148  1c52              ADDS     r2,r2,#1
00014a  2a10              CMP      r2,#0x10              ;214
00014c  d3c9              BCC      |L1.226|
;;;245        }
;;;246      }
;;;247    }
00014e  bdf0              POP      {r4-r7,pc}
;;;248    
                          ENDP

                  GPIO_StructInit PROC
;;;253      */
;;;254    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000150  f64f71ff          MOV      r1,#0xffff
;;;255    {
;;;256      /* Reset GPIO init structure parameters values */
;;;257      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
;;;258      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
000154  6001              STR      r1,[r0,#0]
000156  2100              MOVS     r1,#0
000158  7101              STRB     r1,[r0,#4]
;;;259      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
00015a  7141              STRB     r1,[r0,#5]
;;;260      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
00015c  7181              STRB     r1,[r0,#6]
;;;261      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
00015e  71c1              STRB     r1,[r0,#7]
;;;262    }
000160  4770              BX       lr
;;;263    
                          ENDP

                  GPIO_PinLockConfig PROC
;;;276      */
;;;277    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000162  b508              PUSH     {r3,lr}
;;;278    {
;;;279      __IO uint32_t tmp = 0x00010000;
;;;280    
;;;281      /* Check the parameters */
;;;282      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;283      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;284    
;;;285      tmp |= GPIO_Pin;
000164  f4413280          ORR      r2,r1,#0x10000
;;;286      /* Set LCKK bit */
;;;287      GPIOx->LCKR = tmp;
000168  9200              STR      r2,[sp,#0]
00016a  61c2              STR      r2,[r0,#0x1c]
;;;288      /* Reset LCKK bit */
;;;289      GPIOx->LCKR =  GPIO_Pin;
00016c  61c1              STR      r1,[r0,#0x1c]
;;;290      /* Set LCKK bit */
;;;291      GPIOx->LCKR = tmp;
00016e  9900              LDR      r1,[sp,#0]
000170  61c1              STR      r1,[r0,#0x1c]
;;;292      /* Read LCKK bit*/
;;;293      tmp = GPIOx->LCKR;
000172  69c1              LDR      r1,[r0,#0x1c]
;;;294      /* Read LCKK bit*/
;;;295      tmp = GPIOx->LCKR;
000174  69c0              LDR      r0,[r0,#0x1c]
000176  9000              STR      r0,[sp,#0]
;;;296    }
000178  bd08              POP      {r3,pc}
;;;297    
                          ENDP

                  GPIO_ReadInputDataBit PROC
;;;322      */
;;;323    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00017a  4602              MOV      r2,r0
;;;324    {
;;;325      uint8_t bitstatus = 0x00;
00017c  2000              MOVS     r0,#0
;;;326    
;;;327      /* Check the parameters */
;;;328      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;329      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;330    
;;;331      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
00017e  6912              LDR      r2,[r2,#0x10]
000180  420a              TST      r2,r1
000182  d000              BEQ      |L1.390|
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_SET;
000184  2001              MOVS     r0,#1
                  |L1.390|
;;;334      }
;;;335      else
;;;336      {
;;;337        bitstatus = (uint8_t)Bit_RESET;
;;;338      }
;;;339      return bitstatus;
;;;340    }
000186  4770              BX       lr
;;;341    
                          ENDP

                  GPIO_ReadInputData PROC
;;;348      */
;;;349    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000188  6900              LDR      r0,[r0,#0x10]
;;;350    {
;;;351      /* Check the parameters */
;;;352      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;353    
;;;354      return ((uint16_t)GPIOx->IDR);
00018a  b280              UXTH     r0,r0
;;;355    }
00018c  4770              BX       lr
;;;356    
                          ENDP

                  GPIO_ReadOutputDataBit PROC
;;;365      */
;;;366    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
00018e  4602              MOV      r2,r0
;;;367    {
;;;368      uint8_t bitstatus = 0x00;
000190  2000              MOVS     r0,#0
;;;369    
;;;370      /* Check the parameters */
;;;371      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;372      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;373    
;;;374      if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
000192  6952              LDR      r2,[r2,#0x14]
000194  420a              TST      r2,r1
000196  d000              BEQ      |L1.410|
;;;375      {
;;;376        bitstatus = (uint8_t)Bit_SET;
000198  2001              MOVS     r0,#1
                  |L1.410|
;;;377      }
;;;378      else
;;;379      {
;;;380        bitstatus = (uint8_t)Bit_RESET;
;;;381      }
;;;382      return bitstatus;
;;;383    }
00019a  4770              BX       lr
;;;384    
                          ENDP

                  GPIO_ReadOutputData PROC
;;;391      */
;;;392    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
00019c  6940              LDR      r0,[r0,#0x14]
;;;393    {
;;;394      /* Check the parameters */
;;;395      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;396    
;;;397      return ((uint16_t)GPIOx->ODR);
00019e  b280              UXTH     r0,r0
;;;398    }
0001a0  4770              BX       lr
;;;399    
                          ENDP

                  GPIO_SetBits PROC
;;;411      */
;;;412    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001a2  8301              STRH     r1,[r0,#0x18]
;;;413    {
;;;414      /* Check the parameters */
;;;415      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;416      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;417    
;;;418      GPIOx->BSRRL = GPIO_Pin;
;;;419    }
0001a4  4770              BX       lr
;;;420    
                          ENDP

                  GPIO_ResetBits PROC
;;;432      */
;;;433    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001a6  8341              STRH     r1,[r0,#0x1a]
;;;434    {
;;;435      /* Check the parameters */
;;;436      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;437      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;438    
;;;439      GPIOx->BSRRH = GPIO_Pin;
;;;440    }
0001a8  4770              BX       lr
;;;441    
                          ENDP

                  GPIO_WriteBit PROC
;;;454      */
;;;455    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
0001aa  b10a              CBZ      r2,|L1.432|
;;;456    {
;;;457      /* Check the parameters */
;;;458      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;459      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;460      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;461    
;;;462      if (BitVal != Bit_RESET)
;;;463      {
;;;464        GPIOx->BSRRL = GPIO_Pin;
0001ac  8301              STRH     r1,[r0,#0x18]
;;;465      }
;;;466      else
;;;467      {
;;;468        GPIOx->BSRRH = GPIO_Pin ;
;;;469      }
;;;470    }
0001ae  4770              BX       lr
                  |L1.432|
0001b0  8341              STRH     r1,[r0,#0x1a]         ;468
0001b2  4770              BX       lr
;;;471    
                          ENDP

                  GPIO_Write PROC
;;;479      */
;;;480    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
0001b4  6141              STR      r1,[r0,#0x14]
;;;481    {
;;;482      /* Check the parameters */
;;;483      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;484    
;;;485      GPIOx->ODR = PortVal;
;;;486    }
0001b6  4770              BX       lr
;;;487    
                          ENDP

                  GPIO_ToggleBits PROC
;;;495      */
;;;496    void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
0001b8  6942              LDR      r2,[r0,#0x14]
;;;497    {
;;;498      /* Check the parameters */
;;;499      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;500    
;;;501      GPIOx->ODR ^= GPIO_Pin;
0001ba  404a              EORS     r2,r2,r1
0001bc  6142              STR      r2,[r0,#0x14]
;;;502    }
0001be  4770              BX       lr
;;;503    
                          ENDP

                  GPIO_PinAFConfig PROC
;;;578      */
;;;579    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
0001c0  074b              LSLS     r3,r1,#29
;;;580    {
;;;581      uint32_t temp = 0x00;
;;;582      uint32_t temp_2 = 0x00;
;;;583      
;;;584      /* Check the parameters */
;;;585      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;586      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;587      assert_param(IS_GPIO_AF(GPIO_AF));
;;;588      
;;;589      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
0001c2  0edb              LSRS     r3,r3,#27
0001c4  409a              LSLS     r2,r2,r3
;;;590      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
0001c6  08c9              LSRS     r1,r1,#3
0001c8  b510              PUSH     {r4,lr}               ;580
0001ca  eb000081          ADD      r0,r0,r1,LSL #2
0001ce  6a01              LDR      r1,[r0,#0x20]
0001d0  240f              MOVS     r4,#0xf
0001d2  409c              LSLS     r4,r4,r3
0001d4  43a1              BICS     r1,r1,r4
0001d6  6201              STR      r1,[r0,#0x20]
;;;591      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
0001d8  6a01              LDR      r1,[r0,#0x20]
0001da  4311              ORRS     r1,r1,r2
;;;592      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
0001dc  6201              STR      r1,[r0,#0x20]
;;;593    }
0001de  bd10              POP      {r4,pc}
;;;594    
                          ENDP

                  |L1.480|
                          DCD      0x40020000
                  |L1.484|
                          DCD      0x40020400
                  |L1.488|
                          DCD      0x40020800
                  |L1.492|
                          DCD      0x40020c00
                  |L1.496|
                          DCD      0x40021000
                  |L1.500|
                          DCD      0x40021400
                  |L1.504|
                          DCD      0x40021800
                  |L1.508|
                          DCD      0x40021c00
                  |L1.512|
                          DCD      0x40022000
                  |L1.516|
                          DCD      0x40022400
                  |L1.520|
                          DCD      0x40022800

;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH|
#line 144
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
