; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\usmart_str.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\usmart_str.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\FWLIB\STM32F4xx_StdPeriph_Driver\inc -I..\USER -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\ETHERNET -I..\HARDWARE\TIMER -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\RTC -I..\HARDWARE\ADC -I..\HARDWARE\SRAM -I..\HARDWARE\InterTemperate -I..\FWLIB\STM32F4x7_ETH_Driver\inc -I..\MALLOC -I..\USMART -I..\HARDWARE -I..\ETHERCAT -IE:\EtherCAT\EthercatMaster\EthercatMaster_V3.0-新电路板\USER\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\1.0.8\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F40_41xxx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS --omf_browse=..\obj\usmart_str.crf ..\USMART\usmart_str.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  usmart_strcmp PROC
                  |L1.0|
;;;65     //返回值:0，相等;1，不相等;
;;;66     u8 usmart_strcmp(u8 *str1,u8 *str2)
000000  7802              LDRB     r2,[r0,#0]
;;;67     {
;;;68     	while(1)
;;;69     	{
;;;70     		if(*str1!=*str2)return 1;//不相等
000002  780b              LDRB     r3,[r1,#0]
000004  429a              CMP      r2,r3
000006  d001              BEQ      |L1.12|
000008  2001              MOVS     r0,#1
;;;71     		if(*str1=='\0')break;//对比完成了.
;;;72     		str1++;
;;;73     		str2++;
;;;74     	}
;;;75     	return 0;//两个字符串相等
;;;76     }
00000a  4770              BX       lr
                  |L1.12|
00000c  b112              CBZ      r2,|L1.20|
00000e  1c40              ADDS     r0,r0,#1              ;71
000010  1c49              ADDS     r1,r1,#1              ;71
000012  e7f5              B        |L1.0|
                  |L1.20|
000014  2000              MOVS     r0,#0                 ;75
000016  4770              BX       lr
;;;77     //把str1的内容copy到str2
                          ENDP

                  usmart_strcopy PROC
                  |L1.24|
;;;79     //*str2:字符串2指针			   
;;;80     void usmart_strcopy(u8*str1,u8 *str2)
000018  7802              LDRB     r2,[r0,#0]
;;;81     {
;;;82     	while(1)
;;;83     	{										   
;;;84     		*str2=*str1;	//拷贝
00001a  700a              STRB     r2,[r1,#0]
;;;85     		if(*str1=='\0')break;//拷贝完成了.
00001c  7802              LDRB     r2,[r0,#0]
00001e  2a00              CMP      r2,#0
000020  d002              BEQ      |L1.40|
000022  1c40              ADDS     r0,r0,#1
000024  1c49              ADDS     r1,r1,#1
;;;86     		str1++;
;;;87     		str2++;
000026  e7f7              B        |L1.24|
                  |L1.40|
;;;88     	}
;;;89     }
000028  4770              BX       lr
;;;90     //得到字符串的长度(字节)
                          ENDP

                  usmart_strlen PROC
;;;92     //返回值:字符串的长度		   
;;;93     u8 usmart_strlen(u8*str)
00002a  2100              MOVS     r1,#0
                  |L1.44|
;;;94     {
;;;95     	u8 len=0;
;;;96     	while(1)
;;;97     	{							 
;;;98     		if(*str=='\0')break;//拷贝完成了.
00002c  7802              LDRB     r2,[r0,#0]
00002e  b11a              CBZ      r2,|L1.56|
000030  1c49              ADDS     r1,r1,#1
;;;99     		len++;
000032  b2c9              UXTB     r1,r1
000034  1c40              ADDS     r0,r0,#1
000036  e7f9              B        |L1.44|
                  |L1.56|
;;;100    		str++;
;;;101    	}
;;;102    	return len;
000038  4608              MOV      r0,r1
;;;103    }
00003a  4770              BX       lr
;;;104    //m^n函数
                          ENDP

                  usmart_pow PROC
;;;105    //返回值:m^n次方
;;;106    u32 usmart_pow(u8 m,u8 n)
00003c  4603              MOV      r3,r0
;;;107    {
;;;108    	u32 result=1;	 
00003e  2001              MOVS     r0,#1
000040  e000              B        |L1.68|
                  |L1.66|
;;;109    	while(n--)result*=m;    
000042  4358              MULS     r0,r3,r0
                  |L1.68|
000044  1e49              SUBS     r1,r1,#1
000046  b2c9              UXTB     r1,r1
000048  d2fb              BCS      |L1.66|
;;;110    	return result;
;;;111    }	    
00004a  4770              BX       lr
;;;112    //把字符串转为数字
                          ENDP

                  usmart_str2num PROC
;;;118    //1,数据格式错误.2,16进制位数为0.3,起始格式错误.4,十进制位数为0.
;;;119    u8 usmart_str2num(u8*str,u32 *res)
00004c  b5f0              PUSH     {r4-r7,lr}
;;;120    {
;;;121    	u32 t;
;;;122    	u8 bnum=0;	//数字的位数
00004e  2400              MOVS     r4,#0
000050  460f              MOV      r7,r1                 ;120
000052  4605              MOV      r5,r0                 ;120
;;;123    	u8 *p;		  
;;;124    	u8 hexdec=10;//默认为十进制数据
000054  260a              MOVS     r6,#0xa
;;;125    	p=str;
;;;126    	*res=0;//清零.
000056  600c              STR      r4,[r1,#0]
                  |L1.88|
;;;127    	while(1)
;;;128    	{
;;;129    		if((*p<='9'&&*p>='0')||(*p<='F'&&*p>='A')||(*p=='X'&&bnum==1))//参数合法
000058  7801              LDRB     r1,[r0,#0]
00005a  f1a10230          SUB      r2,r1,#0x30
00005e  2a09              CMP      r2,#9
000060  d90c              BLS      |L1.124|
000062  3a11              SUBS     r2,r2,#0x11
000064  2a05              CMP      r2,#5
000066  d909              BLS      |L1.124|
000068  2958              CMP      r1,#0x58
00006a  d004              BEQ      |L1.118|
;;;130    		{
;;;131    			if(*p>='A')hexdec=16;	//字符串中存在字母,为16进制格式.
;;;132    			bnum++;					//位数增加.
;;;133    		}else if(*p=='\0')break;	//碰到结束符,退出.
00006c  f0110fff          TST      r1,#0xff
000070  d00b              BEQ      |L1.138|
                  |L1.114|
;;;134    		else return 1;				//不全是十进制或者16进制数据.
000072  2001              MOVS     r0,#1
;;;135    		p++; 
;;;136    	} 
;;;137    	p=str;			    //重新定位到字符串开始的地址.
;;;138    	if(hexdec==16)		//16进制数据
;;;139    	{
;;;140    		if(bnum<3)return 2;			//位数小于3，直接退出.因为0X就占了2个,如果0X后面不跟数据,则该数据非法.
;;;141    		if(*p=='0' && (*(p+1)=='X'))//必须以'0X'开头.
;;;142    		{
;;;143    			p+=2;	//偏移到数据起始地址.
;;;144    			bnum-=2;//减去偏移量	 
;;;145    		}else return 3;//起始头的格式不对
;;;146    	}else if(bnum==0)return 4;//位数为0，直接退出.	  
;;;147    	while(1)
;;;148    	{
;;;149    		if(bnum)bnum--;
;;;150    		if(*p<='9'&&*p>='0')t=*p-'0';	//得到数字的值
;;;151    		else t=*p-'A'+10;				//得到A~F对应的值	    
;;;152    		*res+=t*usmart_pow(hexdec,bnum);		   
;;;153    		p++;
;;;154    		if(*p=='\0')break;//数据都查完了.	
;;;155    	}
;;;156    	return 0;//成功转换
;;;157    }
000074  bdf0              POP      {r4-r7,pc}
                  |L1.118|
000076  2c01              CMP      r4,#1                 ;129
000078  d002              BEQ      |L1.128|
00007a  e7fa              B        |L1.114|
                  |L1.124|
00007c  2941              CMP      r1,#0x41              ;131
00007e  d300              BCC      |L1.130|
                  |L1.128|
000080  2610              MOVS     r6,#0x10              ;131
                  |L1.130|
000082  1c64              ADDS     r4,r4,#1              ;131
000084  b2e4              UXTB     r4,r4                 ;132
000086  1c40              ADDS     r0,r0,#1              ;132
000088  e7e6              B        |L1.88|
                  |L1.138|
00008a  2e10              CMP      r6,#0x10              ;138
00008c  d001              BEQ      |L1.146|
00008e  b184              CBZ      r4,|L1.178|
000090  e012              B        |L1.184|
                  |L1.146|
000092  2c03              CMP      r4,#3                 ;140
000094  d201              BCS      |L1.154|
000096  2002              MOVS     r0,#2                 ;140
000098  bdf0              POP      {r4-r7,pc}
                  |L1.154|
00009a  7828              LDRB     r0,[r5,#0]            ;141
00009c  2830              CMP      r0,#0x30              ;141
00009e  d102              BNE      |L1.166|
0000a0  7868              LDRB     r0,[r5,#1]            ;141
0000a2  2858              CMP      r0,#0x58              ;141
0000a4  d001              BEQ      |L1.170|
                  |L1.166|
0000a6  2003              MOVS     r0,#3                 ;145
0000a8  bdf0              POP      {r4-r7,pc}
                  |L1.170|
0000aa  1ea4              SUBS     r4,r4,#2
0000ac  b2e4              UXTB     r4,r4                 ;144
0000ae  1cad              ADDS     r5,r5,#2              ;144
0000b0  e001              B        |L1.182|
                  |L1.178|
0000b2  2004              MOVS     r0,#4                 ;146
0000b4  bdf0              POP      {r4-r7,pc}
                  |L1.182|
0000b6  b10c              CBZ      r4,|L1.188|
                  |L1.184|
0000b8  1e64              SUBS     r4,r4,#1              ;149
0000ba  b2e4              UXTB     r4,r4                 ;149
                  |L1.188|
0000bc  f895c000          LDRB     r12,[r5,#0]           ;150
0000c0  4660              MOV      r0,r12                ;150
0000c2  f1ac0c30          SUB      r12,r12,#0x30         ;150
0000c6  f1bc0f09          CMP      r12,#9                ;150
0000ca  d901              BLS      |L1.208|
0000cc  f1a00c37          SUB      r12,r0,#0x37          ;150
                  |L1.208|
0000d0  4621              MOV      r1,r4                 ;152
0000d2  4630              MOV      r0,r6                 ;152
0000d4  f7fffffe          BL       usmart_pow
0000d8  6839              LDR      r1,[r7,#0]            ;152
0000da  fb0c1000          MLA      r0,r12,r0,r1          ;152
0000de  6038              STR      r0,[r7,#0]            ;154
0000e0  f8150f01          LDRB     r0,[r5,#1]!           ;154
0000e4  2800              CMP      r0,#0                 ;154
0000e6  d1e6              BNE      |L1.182|
0000e8  bdf0              POP      {r4-r7,pc}
;;;158    //得到指令名
                          ENDP

                  usmart_get_cmdname PROC
;;;163    //返回值:0,成功;其他,失败.	  
;;;164    u8 usmart_get_cmdname(u8*str,u8*cmdname,u8 *nlen,u8 maxlen)
0000ea  b530              PUSH     {r4,r5,lr}
;;;165    {
;;;166    	*nlen=0;
0000ec  2500              MOVS     r5,#0
0000ee  7015              STRB     r5,[r2,#0]
0000f0  e00a              B        |L1.264|
                  |L1.242|
;;;167     	while(*str!=' '&&*str!='\0') //找到空格或者结束符则认为结束了
;;;168    	{
;;;169    		*cmdname=*str;
0000f2  f8014b01          STRB     r4,[r1],#1
;;;170    		str++;
;;;171    		cmdname++;
;;;172    		(*nlen)++;//统计命令长度
0000f6  7814              LDRB     r4,[r2,#0]
0000f8  1c40              ADDS     r0,r0,#1
0000fa  1c64              ADDS     r4,r4,#1
0000fc  b2e4              UXTB     r4,r4
0000fe  7014              STRB     r4,[r2,#0]
;;;173    		if(*nlen>=maxlen)return 1;//错误的指令
000100  429c              CMP      r4,r3
000102  d301              BCC      |L1.264|
000104  2001              MOVS     r0,#1
;;;174    	}
;;;175    	*cmdname='\0';//加入结束符
;;;176    	return 0;//正常返回
;;;177    }
000106  bd30              POP      {r4,r5,pc}
                  |L1.264|
000108  7804              LDRB     r4,[r0,#0]            ;167
00010a  2c20              CMP      r4,#0x20              ;167
00010c  d001              BEQ      |L1.274|
00010e  2c00              CMP      r4,#0                 ;167
000110  d1ef              BNE      |L1.242|
                  |L1.274|
000112  700d              STRB     r5,[r1,#0]            ;175
000114  2000              MOVS     r0,#0                 ;176
000116  bd30              POP      {r4,r5,pc}
;;;178    //获取下一个字符（当中间有很多空格的时候，此函数直接忽略空格，找到空格之后的第一个字符）
                          ENDP

                  usmart_search_nextc PROC
                  |L1.280|
;;;180    //返回值:下一个字符
;;;181    u8 usmart_search_nextc(u8* str)
000118  f8101f01          LDRB     r1,[r0,#1]!
;;;182    {		   	 	
;;;183    	str++;
;;;184    	while(*str==' '&&str!='\0')str++;
00011c  2920              CMP      r1,#0x20
00011e  d101              BNE      |L1.292|
000120  2800              CMP      r0,#0
000122  d1f9              BNE      |L1.280|
                  |L1.292|
;;;185    	return *str;
000124  b2c8              UXTB     r0,r1
;;;186    } 
000126  4770              BX       lr
;;;187    //从str中得到函数名
                          ENDP

                  usmart_get_fname PROC
;;;192    //返回值:0,成功;其他,错误代码.
;;;193    u8 usmart_get_fname(u8*str,u8*fname,u8 *pnum,u8 *rval)
000128  e92d4fff          PUSH     {r0-r11,lr}
;;;194    {
;;;195    	u8 res;
;;;196    	u8 fover=0;	  //括号深度
00012c  2400              MOVS     r4,#0
00012e  b082              SUB      sp,sp,#8              ;194
000130  4688              MOV      r8,r1                 ;194
000132  4683              MOV      r11,r0                ;194
;;;197    	u8 *strtemp;
;;;198    	u8 offset=0;  
000134  46a1              MOV      r9,r4
;;;199    	u8 parmnum=0;
000136  4627              MOV      r7,r4
;;;200    	u8 temp=1;
000138  2501              MOVS     r5,#1
;;;201    	u8 fpname[6];//void+X+'/0'
;;;202    	u8 fplcnt=0; //第一个参数的长度计数器
00013a  4626              MOV      r6,r4
;;;203    	u8 pcnt=0;	 //参数计数器
00013c  4622              MOV      r2,r4
;;;204    	u8 nchar;
;;;205    	//判断函数是否有返回值
;;;206    	strtemp=str;
00013e  4659              MOV      r1,r11
000140  46ea              MOV      r10,sp                ;201
000142  e015              B        |L1.368|
                  |L1.324|
;;;207    	while(*strtemp!='\0')//没有结束
;;;208    	{
;;;209    		if(*strtemp!=' '&&(pcnt&0X7F)<5)//最多记录5个字符
000144  2820              CMP      r0,#0x20
000146  d010              BEQ      |L1.362|
000148  f002037f          AND      r3,r2,#0x7f
00014c  2b05              CMP      r3,#5
00014e  d20c              BCS      |L1.362|
;;;210    		{	
;;;211    			if(pcnt==0)pcnt|=0X80;//置位最高位,标记开始接收返回值类型
000150  b902              CBNZ     r2,|L1.340|
000152  2280              MOVS     r2,#0x80
                  |L1.340|
;;;212    			if(((pcnt&0x7f)==4)&&(*strtemp!='*'))break;//最后一个字符,必须是*
000154  f002037f          AND      r3,r2,#0x7f
000158  2b04              CMP      r3,#4
00015a  d101              BNE      |L1.352|
00015c  282a              CMP      r0,#0x2a
00015e  d10a              BNE      |L1.374|
                  |L1.352|
;;;213    			fpname[pcnt&0x7f]=*strtemp;//记录函数的返回值类型
000160  1c52              ADDS     r2,r2,#1
000162  f80a0003          STRB     r0,[r10,r3]
;;;214    			pcnt++;
000166  b2d2              UXTB     r2,r2
000168  e001              B        |L1.366|
                  |L1.362|
;;;215    		}else if(pcnt==0X85)break;
00016a  2a85              CMP      r2,#0x85
00016c  d004              BEQ      |L1.376|
                  |L1.366|
00016e  1c49              ADDS     r1,r1,#1
                  |L1.368|
000170  7808              LDRB     r0,[r1,#0]            ;207
000172  2800              CMP      r0,#0                 ;207
000174  d1e6              BNE      |L1.324|
                  |L1.374|
;;;216    		strtemp++; 
;;;217    	} 
;;;218    	if(pcnt)//接收完了
000176  b172              CBZ      r2,|L1.406|
                  |L1.376|
;;;219    	{
;;;220    		fpname[pcnt&0x7f]='\0';//加入结束符
000178  f002027f          AND      r2,r2,#0x7f
00017c  f04f0c00          MOV      r12,#0
000180  f80ac002          STRB     r12,[r10,r2]
;;;221    		if(usmart_strcmp(fpname,"void")==0)*rval=0;//不需要返回值
000184  a1a3              ADR      r1,|L1.1044|
000186  4650              MOV      r0,r10
000188  f7fffffe          BL       usmart_strcmp
00018c  b138              CBZ      r0,|L1.414|
;;;222    		else *rval=1;							   //需要返回值
00018e  9805              LDR      r0,[sp,#0x14]
000190  2101              MOVS     r1,#1
000192  7001              STRB     r1,[r0,#0]
                  |L1.404|
;;;223    		pcnt=0;
000194  2200              MOVS     r2,#0
                  |L1.406|
;;;224    	} 
;;;225    	res=0;
000196  f04f0c00          MOV      r12,#0
;;;226    	strtemp=str;
00019a  465b              MOV      r3,r11
;;;227    	while(*strtemp!='('&&*strtemp!='\0') //此代码找到函数名的真正起始位置
00019c  e015              B        |L1.458|
                  |L1.414|
00019e  9905              LDR      r1,[sp,#0x14]         ;221
0001a0  f881c000          STRB     r12,[r1,#0]           ;221
0001a4  e7f6              B        |L1.404|
                  |L1.422|
;;;228    	{  
;;;229    		strtemp++;
;;;230    		res++;
;;;231    		if(*strtemp==' '||*strtemp=='*')
0001a6  f8130f01          LDRB     r0,[r3,#1]!
0001aa  f10c0c01          ADD      r12,r12,#1            ;221
0001ae  f00c0cff          AND      r12,r12,#0xff         ;230
0001b2  2820              CMP      r0,#0x20
0001b4  d001              BEQ      |L1.442|
0001b6  282a              CMP      r0,#0x2a
0001b8  d107              BNE      |L1.458|
                  |L1.442|
;;;232    		{
;;;233    			nchar=usmart_search_nextc(strtemp);		//获取下一个字符
0001ba  4618              MOV      r0,r3
0001bc  f7fffffe          BL       usmart_search_nextc
;;;234    			if(nchar!='('&&nchar!='*')offset=res;	//跳过空格和*号
0001c0  2828              CMP      r0,#0x28
0001c2  d002              BEQ      |L1.458|
0001c4  282a              CMP      r0,#0x2a
0001c6  d000              BEQ      |L1.458|
0001c8  46e1              MOV      r9,r12
                  |L1.458|
0001ca  7818              LDRB     r0,[r3,#0]            ;227
0001cc  2828              CMP      r0,#0x28              ;227
0001ce  d001              BEQ      |L1.468|
0001d0  2800              CMP      r0,#0                 ;227
0001d2  d1e8              BNE      |L1.422|
                  |L1.468|
;;;235    		}
;;;236    	}	 
;;;237    	strtemp=str;
0001d4  4659              MOV      r1,r11
;;;238    	if(offset)strtemp+=offset+1;//跳到函数名开始的地方	   
0001d6  f1b90f00          CMP      r9,#0
0001da  d002              BEQ      |L1.482|
0001dc  eb0b0109          ADD      r1,r11,r9
0001e0  1c49              ADDS     r1,r1,#1
                  |L1.482|
;;;239    	res=0;
0001e2  f04f0900          MOV      r9,#0
;;;240    	nchar=0;//是否正在字符串里面的标志,0，不在字符串;1，在字符串;
0001e6  464b              MOV      r3,r9
                  |L1.488|
;;;241    	while(1)
;;;242    	{
;;;243    		if(*strtemp==0)
0001e8  7808              LDRB     r0,[r1,#0]
0001ea  b188              CBZ      r0,|L1.528|
;;;244    		{
;;;245    			res=USMART_FUNCERR;//函数错误
;;;246    			break;
;;;247    		}else if(*strtemp=='('&&nchar==0)fover++;//括号深度增加一级	 
0001ec  2828              CMP      r0,#0x28
0001ee  d004              BEQ      |L1.506|
;;;248    		else if(*strtemp==')'&&nchar==0)
0001f0  2829              CMP      r0,#0x29
0001f2  d006              BEQ      |L1.514|
;;;249    		{
;;;250    			if(fover)fover--;
;;;251    			else res=USMART_FUNCERR;//错误结束,没收到'('
;;;252    			if(fover==0)break;//到末尾了,退出	    
;;;253    		}else if(*strtemp=='"')nchar=!nchar;
0001f4  2822              CMP      r0,#0x22
0001f6  d010              BEQ      |L1.538|
0001f8  e011              B        |L1.542|
                  |L1.506|
0001fa  b983              CBNZ     r3,|L1.542|
0001fc  1c64              ADDS     r4,r4,#1              ;247
0001fe  b2e4              UXTB     r4,r4                 ;247
000200  e00d              B        |L1.542|
                  |L1.514|
000202  b963              CBNZ     r3,|L1.542|
000204  b124              CBZ      r4,|L1.528|
000206  1e64              SUBS     r4,r4,#1              ;250
000208  f01404ff          ANDS     r4,r4,#0xff           ;250
00020c  d002              BEQ      |L1.532|
00020e  e00d              B        |L1.556|
                  |L1.528|
000210  f04f0901          MOV      r9,#1                 ;251
                  |L1.532|
;;;254    
;;;255    		if(fover==0)//函数名还没接收完
;;;256    		{
;;;257    			if(*strtemp!=' ')//空格不属于函数名
;;;258    			{
;;;259    				*fname=*strtemp;//得到函数名
;;;260    				fname++;
;;;261    			}
;;;262    		}else //已经接受完了函数名了.
;;;263    		{
;;;264    			if(*strtemp==',')
;;;265    			{
;;;266    				temp=1;		//使能增加一个参数
;;;267    				pcnt++;	
;;;268    			}else if(*strtemp!=' '&&*strtemp!='(')
;;;269    			{
;;;270    				if(pcnt==0&&fplcnt<5)		//当第一个参数来时,为了避免统计void类型的参数,必须做判断.
;;;271    				{
;;;272    					fpname[fplcnt]=*strtemp;//记录参数特征.
;;;273    					fplcnt++;
;;;274    				}
;;;275    				temp++;	//得到有效参数(非空格)
;;;276    			}
;;;277    			if(fover==1&&temp==2)
;;;278    			{
;;;279    				temp++;		//防止重复增加
;;;280    				parmnum++; 	//参数增加一个
;;;281    			}
;;;282    		}
;;;283    		strtemp++; 			
;;;284    	}   
;;;285    	if(parmnum==1)//只有1个参数.
000214  2f01              CMP      r7,#1
000216  d027              BEQ      |L1.616|
000218  e02f              B        |L1.634|
                  |L1.538|
00021a  b14b              CBZ      r3,|L1.560|
00021c  2300              MOVS     r3,#0                 ;253
                  |L1.542|
00021e  b14c              CBZ      r4,|L1.564|
000220  282c              CMP      r0,#0x2c              ;264
000222  d00c              BEQ      |L1.574|
000224  2820              CMP      r0,#0x20              ;268
000226  d016              BEQ      |L1.598|
000228  2828              CMP      r0,#0x28              ;268
00022a  d014              BEQ      |L1.598|
                  |L1.556|
00022c  b15a              CBZ      r2,|L1.582|
00022e  e010              B        |L1.594|
                  |L1.560|
000230  2301              MOVS     r3,#1                 ;253
000232  e7f4              B        |L1.542|
                  |L1.564|
000234  2820              CMP      r0,#0x20              ;257
000236  d015              BEQ      |L1.612|
000238  f8080b01          STRB     r0,[r8],#1            ;259
00023c  e012              B        |L1.612|
                  |L1.574|
00023e  2501              MOVS     r5,#1                 ;266
000240  1c52              ADDS     r2,r2,#1              ;266
000242  b2d2              UXTB     r2,r2                 ;267
000244  e007              B        |L1.598|
                  |L1.582|
000246  2e05              CMP      r6,#5                 ;270
000248  d203              BCS      |L1.594|
00024a  f80a0006          STRB     r0,[r10,r6]           ;272
00024e  1c76              ADDS     r6,r6,#1              ;272
000250  b2f6              UXTB     r6,r6                 ;273
                  |L1.594|
000252  1c6d              ADDS     r5,r5,#1              ;273
000254  b2ed              UXTB     r5,r5                 ;275
                  |L1.598|
000256  2c01              CMP      r4,#1                 ;277
000258  d104              BNE      |L1.612|
00025a  2d02              CMP      r5,#2                 ;277
00025c  d102              BNE      |L1.612|
00025e  2503              MOVS     r5,#3                 ;279
000260  1c7f              ADDS     r7,r7,#1              ;279
000262  b2ff              UXTB     r7,r7                 ;280
                  |L1.612|
000264  1c49              ADDS     r1,r1,#1              ;280
000266  e7bf              B        |L1.488|
                  |L1.616|
;;;286    	{
;;;287    		fpname[fplcnt]='\0';//加入结束符
000268  2000              MOVS     r0,#0
00026a  f80a0006          STRB     r0,[r10,r6]
;;;288    		if(usmart_strcmp(fpname,"void")==0)parmnum=0;//参数为void,表示没有参数.
00026e  a169              ADR      r1,|L1.1044|
000270  4668              MOV      r0,sp
000272  f7fffffe          BL       usmart_strcmp
000276  b900              CBNZ     r0,|L1.634|
000278  2700              MOVS     r7,#0
                  |L1.634|
;;;289    	}
;;;290    	*pnum=parmnum;	//记录参数个数
00027a  9804              LDR      r0,[sp,#0x10]
00027c  7007              STRB     r7,[r0,#0]
;;;291    	*fname='\0';	//加入结束符
00027e  2000              MOVS     r0,#0
000280  f8880000          STRB     r0,[r8,#0]
;;;292    	return res;		//返回执行结果
;;;293    }
000284  b006              ADD      sp,sp,#0x18
000286  4648              MOV      r0,r9                 ;292
000288  e8bd8ff0          POP      {r4-r11,pc}
;;;294    
                          ENDP

                  usmart_get_aparm PROC
;;;300    //返回值:0,已经无参数了;其他,下一个参数的偏移量.
;;;301    u8 usmart_get_aparm(u8 *str,u8 *fparm,u8 *ptype)
00028c  b5f0              PUSH     {r4-r7,lr}
;;;302    {
;;;303    	u8 i=0;
00028e  2500              MOVS     r5,#0
;;;304    	u8 enout=0;
000290  462e              MOV      r6,r5
;;;305    	u8 type=0;//默认是数字
000292  462f              MOV      r7,r5
;;;306    	u8 string=0; //标记str是否正在读
000294  462c              MOV      r4,r5
                  |L1.662|
;;;307    	while(1)
;;;308    	{		    
;;;309    		if(*str==','&& string==0)enout=1;			//暂缓立即退出,目的是寻找下一个参数的起始地址
000296  7803              LDRB     r3,[r0,#0]
000298  2b2c              CMP      r3,#0x2c
00029a  d003              BEQ      |L1.676|
;;;310    		if((*str==')'||*str=='\0')&&string==0)break;//立即退出标识符
00029c  2b29              CMP      r3,#0x29
00029e  d004              BEQ      |L1.682|
0002a0  b11b              CBZ      r3,|L1.682|
0002a2  e003              B        |L1.684|
                  |L1.676|
0002a4  b914              CBNZ     r4,|L1.684|
0002a6  2601              MOVS     r6,#1                 ;309
0002a8  e000              B        |L1.684|
                  |L1.682|
0002aa  b35c              CBZ      r4,|L1.772|
                  |L1.684|
;;;311    		if(type==0)//默认是数字的
0002ac  b117              CBZ      r7,|L1.692|
;;;312    		{
;;;313    			if((*str>='0' && *str<='9')||(*str>='a' && *str<='f')||(*str>='A' && *str<='F')||*str=='X'||*str=='x')//数字串检测
;;;314    			{
;;;315    				if(enout)break;					//找到了下一个参数,直接退出.
;;;316    				if(*str>='a')*fparm=*str-0X20;	//小写转换为大写
;;;317    				else *fparm=*str;		   		//小写或者数字保持不变
;;;318    				fparm++;
;;;319    			}else if(*str=='"')//找到字符串的开始标志
;;;320    			{
;;;321    				if(enout)break;//找到,后才找到",认为结束了.
;;;322    				type=1;
;;;323    				string=1;//登记STRING 正在读了
;;;324    			}else if(*str!=' '&&*str!=',')//发现非法字符,参数错误
;;;325    			{
;;;326    				type=0XFF;
;;;327    				break;
;;;328    			}
;;;329    		}else//string类
;;;330    		{ 
;;;331    			if(*str=='"')string=0;
0002ae  2b22              CMP      r3,#0x22
0002b0  d026              BEQ      |L1.768|
0002b2  e026              B        |L1.770|
                  |L1.692|
0002b4  f1a30c30          SUB      r12,r3,#0x30          ;313
0002b8  f1bc0f09          CMP      r12,#9                ;313
0002bc  d915              BLS      |L1.746|
0002be  f1a30c61          SUB      r12,r3,#0x61          ;313
0002c2  f1bc0f05          CMP      r12,#5                ;313
0002c6  d910              BLS      |L1.746|
0002c8  f1a30c41          SUB      r12,r3,#0x41          ;313
0002cc  f1bc0f05          CMP      r12,#5                ;313
0002d0  d90b              BLS      |L1.746|
0002d2  2b58              CMP      r3,#0x58              ;313
0002d4  d009              BEQ      |L1.746|
0002d6  2b78              CMP      r3,#0x78              ;313
0002d8  d007              BEQ      |L1.746|
0002da  2b22              CMP      r3,#0x22              ;319
0002dc  d00c              BEQ      |L1.760|
0002de  2b20              CMP      r3,#0x20              ;324
0002e0  d01e              BEQ      |L1.800|
0002e2  2b2c              CMP      r3,#0x2c              ;324
0002e4  d01c              BEQ      |L1.800|
0002e6  27ff              MOVS     r7,#0xff              ;326
0002e8  e00c              B        |L1.772|
                  |L1.746|
0002ea  b95e              CBNZ     r6,|L1.772|
0002ec  2b61              CMP      r3,#0x61              ;316
0002ee  d300              BCC      |L1.754|
0002f0  3b20              SUBS     r3,r3,#0x20           ;316
                  |L1.754|
0002f2  f8013b01          STRB     r3,[r1],#1            ;317
0002f6  e013              B        |L1.800|
                  |L1.760|
0002f8  b926              CBNZ     r6,|L1.772|
0002fa  2701              MOVS     r7,#1                 ;322
0002fc  463c              MOV      r4,r7                 ;323
0002fe  e00f              B        |L1.800|
                  |L1.768|
000300  2400              MOVS     r4,#0
                  |L1.770|
;;;332    			if(enout)break;			//找到了下一个参数,直接退出.
000302  b126              CBZ      r6,|L1.782|
                  |L1.772|
;;;333    			if(string)				//字符串正在读
;;;334    			{	
;;;335    				if(*str=='\\')		//遇到转义符(不复制转义符)
;;;336    				{ 
;;;337    					str++;			//偏移到转义符后面的字符,不管什么字符,直接COPY
;;;338    					i++;
;;;339    				}					
;;;340    				*fparm=*str;		//小写或者数字保持不变
;;;341    				fparm++;
;;;342    			}	
;;;343    		}
;;;344    		i++;//偏移量增加
;;;345    		str++;
;;;346    	}
;;;347    	*fparm='\0';	//加入结束符
000304  2000              MOVS     r0,#0
000306  7008              STRB     r0,[r1,#0]
;;;348    	*ptype=type;	//返回参数类型
000308  7017              STRB     r7,[r2,#0]
;;;349    	return i;		//返回参数长度
00030a  4628              MOV      r0,r5
;;;350    }
00030c  bdf0              POP      {r4-r7,pc}
                  |L1.782|
00030e  b13c              CBZ      r4,|L1.800|
000310  2b5c              CMP      r3,#0x5c              ;335
000312  d102              BNE      |L1.794|
000314  1c6d              ADDS     r5,r5,#1              ;335
000316  b2ed              UXTB     r5,r5                 ;338
000318  1c40              ADDS     r0,r0,#1              ;338
                  |L1.794|
00031a  7803              LDRB     r3,[r0,#0]            ;340
00031c  f8013b01          STRB     r3,[r1],#1            ;340
                  |L1.800|
000320  1c6d              ADDS     r5,r5,#1              ;340
000322  b2ed              UXTB     r5,r5                 ;344
000324  1c40              ADDS     r0,r0,#1              ;344
000326  e7b6              B        |L1.662|
;;;351    //得到指定参数的起始地址
                          ENDP

                  usmart_get_parmpos PROC
;;;353    //返回值:该参数的起始地址
;;;354    u8 usmart_get_parmpos(u8 num)
000328  4602              MOV      r2,r0
;;;355    {
00032a  b510              PUSH     {r4,lr}
;;;356    	u8 temp=0;
00032c  2000              MOVS     r0,#0
;;;357    	u8 i;
;;;358    	for(i=0;i<num;i++)temp+=usmart_dev.plentbl[i];
00032e  4601              MOV      r1,r0
000330  4b3a              LDR      r3,|L1.1052|
000332  e005              B        |L1.832|
                  |L1.820|
000334  185c              ADDS     r4,r3,r1
000336  1c49              ADDS     r1,r1,#1
000338  7ea4              LDRB     r4,[r4,#0x1a]
00033a  b2c9              UXTB     r1,r1
00033c  4420              ADD      r0,r0,r4
00033e  b2c0              UXTB     r0,r0
                  |L1.832|
000340  4291              CMP      r1,r2
000342  d3f7              BCC      |L1.820|
;;;359    	return temp;
;;;360    }
000344  bd10              POP      {r4,pc}
;;;361    //从str中得到函数参数
                          ENDP

                  usmart_get_fparam PROC
;;;364    //返回值:0,成功;其他,错误代码.
;;;365    u8 usmart_get_fparam(u8*str,u8 *parn)
000346  e92d41f0          PUSH     {r4-r8,lr}
;;;366    {	
;;;367    	u8 i,type;  
;;;368    	u32 res;
;;;369    	u8 n=0;
00034a  2400              MOVS     r4,#0
00034c  4688              MOV      r8,r1                 ;366
;;;370    	u8 len;
;;;371    	u8 tstr[PARM_LEN+1];//字节长度的缓存,最多可以存放PARM_LEN个字符的字符串
;;;372    	for(i=0;i<MAX_PARM;i++)usmart_dev.plentbl[i]=0;//清空参数长度表
00034e  4d33              LDR      r5,|L1.1052|
000350  b0b5              SUB      sp,sp,#0xd4           ;366
000352  4621              MOV      r1,r4
000354  4622              MOV      r2,r4
                  |L1.854|
000356  186b              ADDS     r3,r5,r1
000358  1c49              ADDS     r1,r1,#1
00035a  b2c9              UXTB     r1,r1
00035c  769a              STRB     r2,[r3,#0x1a]
00035e  290a              CMP      r1,#0xa
000360  d3f9              BCC      |L1.854|
000362  e002              B        |L1.874|
                  |L1.868|
;;;373    	while(*str!='(')//偏移到参数开始的地方
;;;374    	{
;;;375    		str++;											    
;;;376    		if(*str=='\0')return USMART_FUNCERR;//遇到结束符了
000364  f8101f01          LDRB     r1,[r0,#1]!
000368  b191              CBZ      r1,|L1.912|
                  |L1.874|
00036a  7801              LDRB     r1,[r0,#0]            ;373
00036c  2928              CMP      r1,#0x28              ;373
00036e  d1f9              BNE      |L1.868|
000370  1c46              ADDS     r6,r0,#1              ;373
000372  2701              MOVS     r7,#1
                  |L1.884|
;;;377    	}
;;;378    	str++;//偏移到"("之后的第一个字节
;;;379    	while(1)
;;;380    	{
;;;381    		i=usmart_get_aparm(str,tstr,&type);	//得到第一个参数  
000374  aa33              ADD      r2,sp,#0xcc
000376  4669              MOV      r1,sp
000378  4630              MOV      r0,r6
00037a  f7fffffe          BL       usmart_get_aparm
;;;382    		str+=i;								//偏移
00037e  4406              ADD      r6,r6,r0
;;;383    		switch(type)
000380  f89d00cc          LDRB     r0,[sp,#0xcc]
000384  b140              CBZ      r0,|L1.920|
000386  2801              CMP      r0,#1
000388  d024              BEQ      |L1.980|
00038a  28ff              CMP      r0,#0xff
00038c  d139              BNE      |L1.1026|
00038e  e00b              B        |L1.936|
                  |L1.912|
000390  2001              MOVS     r0,#1                 ;376
                  |L1.914|
;;;384    		{
;;;385    			case 0:	//数字
;;;386    				if(tstr[0]!='\0')				//接收到的参数有效
;;;387    				{					    
;;;388    					i=usmart_str2num(tstr,&res);	//记录该参数	 
;;;389    					if(i)return USMART_PARMERR;		//参数错误.
;;;390    					*(u32*)(usmart_dev.parm+usmart_get_parmpos(n))=res;//记录转换成功的结果.
;;;391    					usmart_dev.parmtype&=~(1<<n);	//标记数字
;;;392    					usmart_dev.plentbl[n]=4;		//该参数的长度为4  
;;;393    					n++;							//参数增加  
;;;394    					if(n>MAX_PARM)return USMART_PARMOVER;//参数太多
;;;395    				}
;;;396    				break;
;;;397    			case 1://字符串	 	
;;;398    				len=usmart_strlen(tstr)+1;	//包含了结束符'\0'
;;;399    				usmart_strcopy(tstr,&usmart_dev.parm[usmart_get_parmpos(n)]);//拷贝tstr数据到usmart_dev.parm[n]
;;;400    				usmart_dev.parmtype|=1<<n;	//标记字符串 
;;;401    				usmart_dev.plentbl[n]=len;	//该参数的长度为len  
;;;402    				n++;
;;;403    				if(n>MAX_PARM)return USMART_PARMOVER;//参数太多
;;;404    				break;
;;;405    			case 0XFF://错误
;;;406    				return USMART_PARMERR;//参数错误	  
;;;407    		}
;;;408    		if(*str==')'||*str=='\0')break;//查到结束标志了.
;;;409    	}
;;;410    	*parn=n;	//记录参数的个数
;;;411    	return USMART_OK;//正确得到了参数
;;;412    }
000392  b035              ADD      sp,sp,#0xd4
000394  e8bd81f0          POP      {r4-r8,pc}
                  |L1.920|
000398  f89d0000          LDRB     r0,[sp,#0]            ;386
00039c  b380              CBZ      r0,|L1.1024|
00039e  a934              ADD      r1,sp,#0xd0           ;388
0003a0  4668              MOV      r0,sp                 ;388
0003a2  f7fffffe          BL       usmart_str2num
0003a6  b108              CBZ      r0,|L1.940|
                  |L1.936|
0003a8  2002              MOVS     r0,#2                 ;406
0003aa  e7f2              B        |L1.914|
                  |L1.940|
0003ac  4620              MOV      r0,r4                 ;390
0003ae  f7fffffe          BL       usmart_get_parmpos
0003b2  4428              ADD      r0,r0,r5              ;390
0003b4  9934              LDR      r1,[sp,#0xd0]         ;390
0003b6  6241              STR      r1,[r0,#0x24]         ;391
0003b8  8b28              LDRH     r0,[r5,#0x18]         ;391  ; usmart_dev
0003ba  fa07f104          LSL      r1,r7,r4              ;391
0003be  4388              BICS     r0,r0,r1              ;391
0003c0  8328              STRH     r0,[r5,#0x18]         ;391
0003c2  2004              MOVS     r0,#4                 ;392
0003c4  1929              ADDS     r1,r5,r4              ;392
0003c6  7688              STRB     r0,[r1,#0x1a]         ;392
                  |L1.968|
0003c8  1c64              ADDS     r4,r4,#1              ;392
0003ca  b2e4              UXTB     r4,r4                 ;393
0003cc  2c0a              CMP      r4,#0xa               ;394
0003ce  d918              BLS      |L1.1026|
0003d0  2003              MOVS     r0,#3                 ;403
0003d2  e7de              B        |L1.914|
                  |L1.980|
0003d4  4668              MOV      r0,sp                 ;398
0003d6  f7fffffe          BL       usmart_strlen
0003da  f1000c01          ADD      r12,r0,#1             ;398
0003de  4620              MOV      r0,r4                 ;399
0003e0  f7fffffe          BL       usmart_get_parmpos
0003e4  1941              ADDS     r1,r0,r5              ;399
0003e6  4668              MOV      r0,sp                 ;399
0003e8  3124              ADDS     r1,r1,#0x24           ;399
0003ea  f7fffffe          BL       usmart_strcopy
0003ee  8b28              LDRH     r0,[r5,#0x18]         ;400  ; usmart_dev
0003f0  fa07f104          LSL      r1,r7,r4              ;400
0003f4  4308              ORRS     r0,r0,r1              ;400
0003f6  8328              STRH     r0,[r5,#0x18]         ;400
0003f8  1928              ADDS     r0,r5,r4              ;401
0003fa  f880c01a          STRB     r12,[r0,#0x1a]        ;401
0003fe  e7e3              B        |L1.968|
                  |L1.1024|
000400  e7ff              B        |L1.1026|
                  |L1.1026|
000402  7830              LDRB     r0,[r6,#0]            ;408
000404  2829              CMP      r0,#0x29              ;408
000406  d001              BEQ      |L1.1036|
000408  2800              CMP      r0,#0                 ;408
00040a  d1b3              BNE      |L1.884|
                  |L1.1036|
00040c  f8884000          STRB     r4,[r8,#0]            ;410
000410  2000              MOVS     r0,#0                 ;411
000412  e7be              B        |L1.914|
;;;413    
                          ENDP

                  |L1.1044|
000414  766f6964          DCB      "void",0
000418  00      
000419  00                DCB      0
00041a  00                DCB      0
00041b  00                DCB      0
                  |L1.1052|
                          DCD      usmart_dev

;*** Start embedded assembler ***

#line 1 "..\\USMART\\usmart_str.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___12_usmart_str_c_f7d9c3df____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___12_usmart_str_c_f7d9c3df____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___12_usmart_str_c_f7d9c3df____REVSH|
#line 144
|__asm___12_usmart_str_c_f7d9c3df____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
