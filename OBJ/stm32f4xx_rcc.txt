; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\stm32f4xx_rcc.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_rcc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\FWLIB\STM32F4xx_StdPeriph_Driver\inc -I..\USER -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\ETHERNET -I..\HARDWARE\TIMER -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\RTC -I..\HARDWARE\ADC -I..\HARDWARE\SRAM -I..\HARDWARE\InterTemperate -I..\FWLIB\STM32F4x7_ETH_Driver\inc -I..\MALLOC -I..\USMART -I..\HARDWARE -I..\ETHERCAT -I.\RTE\_LWIP -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS --omf_browse=..\obj\stm32f4xx_rcc.crf ..\FWLIB\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_rcc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;212      */
;;;213    void RCC_DeInit(void)
000000  48f8              LDR      r0,|L1.996|
;;;214    {
;;;215      /* Set HSION bit */
;;;216      RCC->CR |= (uint32_t)0x00000001;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;217    
;;;218      /* Reset CFGR register */
;;;219      RCC->CFGR = 0x00000000;
00000a  4af6              LDR      r2,|L1.996|
00000c  2100              MOVS     r1,#0
00000e  3208              ADDS     r2,r2,#8
000010  6011              STR      r1,[r2,#0]
;;;220    
;;;221      /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
;;;222      RCC->CR &= (uint32_t)0xEAF6FFFF;
000012  6802              LDR      r2,[r0,#0]
000014  4bf4              LDR      r3,|L1.1000|
000016  401a              ANDS     r2,r2,r3
000018  6002              STR      r2,[r0,#0]
;;;223    
;;;224      /* Reset PLLCFGR register */
;;;225      RCC->PLLCFGR = 0x24003010;
00001a  1d03              ADDS     r3,r0,#4
00001c  4af3              LDR      r2,|L1.1004|
00001e  601a              STR      r2,[r3,#0]
;;;226    
;;;227      /* Reset PLLI2SCFGR register */
;;;228      RCC->PLLI2SCFGR = 0x20003000;
000020  4bf0              LDR      r3,|L1.996|
000022  4af3              LDR      r2,|L1.1008|
000024  3384              ADDS     r3,r3,#0x84
000026  601a              STR      r2,[r3,#0]
;;;229    
;;;230      /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
;;;231      RCC->PLLSAICFGR = 0x24003000;
000028  4af0              LDR      r2,|L1.1004|
00002a  3a10              SUBS     r2,r2,#0x10
00002c  1d1b              ADDS     r3,r3,#4
00002e  601a              STR      r2,[r3,#0]
;;;232     
;;;233      /* Reset HSEBYP bit */
;;;234      RCC->CR &= (uint32_t)0xFFFBFFFF;
000030  6802              LDR      r2,[r0,#0]
000032  f4222280          BIC      r2,r2,#0x40000
000036  6002              STR      r2,[r0,#0]
;;;235    
;;;236      /* Disable all interrupts */
;;;237      RCC->CIR = 0x00000000;
000038  48ea              LDR      r0,|L1.996|
00003a  300c              ADDS     r0,r0,#0xc
00003c  6001              STR      r1,[r0,#0]
;;;238    
;;;239      /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
;;;240      RCC->DCKCFGR = 0x00000000; 
00003e  1d18              ADDS     r0,r3,#4
000040  6001              STR      r1,[r0,#0]
;;;241    
;;;242    }
000042  4770              BX       lr
;;;243    
                          ENDP

                  RCC_HSEConfig PROC
;;;263      */
;;;264    void RCC_HSEConfig(uint8_t RCC_HSE)
000044  49e7              LDR      r1,|L1.996|
;;;265    {
;;;266      /* Check the parameters */
;;;267      assert_param(IS_RCC_HSE(RCC_HSE));
;;;268    
;;;269      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;270      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
000046  2200              MOVS     r2,#0
000048  1c89              ADDS     r1,r1,#2
00004a  700a              STRB     r2,[r1,#0]
;;;271    
;;;272      /* Set the new HSE configuration -------------------------------------------*/
;;;273      *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
00004c  7008              STRB     r0,[r1,#0]
;;;274    }
00004e  4770              BX       lr
;;;275    
                          ENDP

                  RCC_GetFlagStatus PROC
;;;2091     */
;;;2092   FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000050  4602              MOV      r2,r0
;;;2093   {
;;;2094     uint32_t tmp = 0;
;;;2095     uint32_t statusreg = 0;
;;;2096     FlagStatus bitstatus = RESET;
000052  2000              MOVS     r0,#0
;;;2097   
;;;2098     /* Check the parameters */
;;;2099     assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;2100   
;;;2101     /* Get the RCC register index */
;;;2102     tmp = RCC_FLAG >> 5;
000054  0951              LSRS     r1,r2,#5
;;;2103     if (tmp == 1)               /* The flag to check is in CR register */
000056  2901              CMP      r1,#1
000058  d00c              BEQ      |L1.116|
;;;2104     {
;;;2105       statusreg = RCC->CR;
;;;2106     }
;;;2107     else if (tmp == 2)          /* The flag to check is in BDCR register */
00005a  2902              CMP      r1,#2
00005c  d00c              BEQ      |L1.120|
;;;2108     {
;;;2109       statusreg = RCC->BDCR;
;;;2110     }
;;;2111     else                       /* The flag to check is in CSR register */
;;;2112     {
;;;2113       statusreg = RCC->CSR;
00005e  49e1              LDR      r1,|L1.996|
000060  3174              ADDS     r1,r1,#0x74
                  |L1.98|
000062  6809              LDR      r1,[r1,#0]            ;2109
;;;2114     }
;;;2115   
;;;2116     /* Get the flag position */
;;;2117     tmp = RCC_FLAG & FLAG_MASK;
000064  f002021f          AND      r2,r2,#0x1f
;;;2118     if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
000068  2301              MOVS     r3,#1
00006a  4093              LSLS     r3,r3,r2
00006c  420b              TST      r3,r1
00006e  d000              BEQ      |L1.114|
;;;2119     {
;;;2120       bitstatus = SET;
000070  2001              MOVS     r0,#1
                  |L1.114|
;;;2121     }
;;;2122     else
;;;2123     {
;;;2124       bitstatus = RESET;
;;;2125     }
;;;2126     /* Return the flag status */
;;;2127     return bitstatus;
;;;2128   }
000072  4770              BX       lr
                  |L1.116|
000074  49db              LDR      r1,|L1.996|
000076  e7f4              B        |L1.98|
                  |L1.120|
000078  49da              LDR      r1,|L1.996|
00007a  3170              ADDS     r1,r1,#0x70           ;2109
00007c  e7f1              B        |L1.98|
;;;2129   
                          ENDP

                  RCC_WaitForHSEStartUp PROC
;;;287      */
;;;288    ErrorStatus RCC_WaitForHSEStartUp(void)
00007e  b518              PUSH     {r3,r4,lr}
;;;289    {
;;;290      __IO uint32_t startupcounter = 0;
000080  2000              MOVS     r0,#0
;;;291      ErrorStatus status = ERROR;
;;;292      FlagStatus hsestatus = RESET;
;;;293      /* Wait till HSE is ready and if Time out is reached exit */
;;;294      do
;;;295      {
;;;296        hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
;;;297        startupcounter++;
;;;298      } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
000082  f44f44a0          MOV      r4,#0x5000
000086  9000              STR      r0,[sp,#0]
                  |L1.136|
000088  2031              MOVS     r0,#0x31              ;296
00008a  f7fffffe          BL       RCC_GetFlagStatus
00008e  9900              LDR      r1,[sp,#0]            ;297
000090  1c49              ADDS     r1,r1,#1              ;297
000092  9100              STR      r1,[sp,#0]
000094  42a1              CMP      r1,r4
000096  d001              BEQ      |L1.156|
000098  2800              CMP      r0,#0
00009a  d0f5              BEQ      |L1.136|
                  |L1.156|
;;;299    
;;;300      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
00009c  2031              MOVS     r0,#0x31
00009e  f7fffffe          BL       RCC_GetFlagStatus
0000a2  2800              CMP      r0,#0
0000a4  d000              BEQ      |L1.168|
;;;301      {
;;;302        status = SUCCESS;
0000a6  2001              MOVS     r0,#1
                  |L1.168|
;;;303      }
;;;304      else
;;;305      {
;;;306        status = ERROR;
;;;307      }
;;;308      return (status);
;;;309    }
0000a8  bd18              POP      {r3,r4,pc}
;;;310    
                          ENDP

                  RCC_AdjustHSICalibrationValue PROC
;;;318      */
;;;319    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
0000aa  4ace              LDR      r2,|L1.996|
;;;320    {
;;;321      uint32_t tmpreg = 0;
;;;322      /* Check the parameters */
;;;323      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;324    
;;;325      tmpreg = RCC->CR;
0000ac  6811              LDR      r1,[r2,#0]
;;;326    
;;;327      /* Clear HSITRIM[4:0] bits */
;;;328      tmpreg &= ~RCC_CR_HSITRIM;
0000ae  f02101f8          BIC      r1,r1,#0xf8
;;;329    
;;;330      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;331      tmpreg |= (uint32_t)HSICalibrationValue << 3;
0000b2  ea4100c0          ORR      r0,r1,r0,LSL #3
;;;332    
;;;333      /* Store the new value */
;;;334      RCC->CR = tmpreg;
0000b6  6010              STR      r0,[r2,#0]
;;;335    }
0000b8  4770              BX       lr
;;;336    
                          ENDP

                  RCC_HSICmd PROC
;;;354      */
;;;355    void RCC_HSICmd(FunctionalState NewState)
0000ba  49ce              LDR      r1,|L1.1012|
;;;356    {
;;;357      /* Check the parameters */
;;;358      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;359    
;;;360      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
0000bc  6008              STR      r0,[r1,#0]
;;;361    }
0000be  4770              BX       lr
;;;362    
                          ENDP

                  RCC_LSEConfig PROC
;;;379      */
;;;380    void RCC_LSEConfig(uint8_t RCC_LSE)
0000c0  49c8              LDR      r1,|L1.996|
;;;381    {
;;;382      /* Check the parameters */
;;;383      assert_param(IS_RCC_LSE(RCC_LSE));
;;;384    
;;;385      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;386      /* Reset LSEON bit */
;;;387      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
0000c2  2200              MOVS     r2,#0
0000c4  3170              ADDS     r1,r1,#0x70
0000c6  700a              STRB     r2,[r1,#0]
;;;388    
;;;389      /* Reset LSEBYP bit */
;;;390      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
0000c8  700a              STRB     r2,[r1,#0]
;;;391    
;;;392      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;393      switch (RCC_LSE)
0000ca  2801              CMP      r0,#1
0000cc  d002              BEQ      |L1.212|
0000ce  2804              CMP      r0,#4
0000d0  d101              BNE      |L1.214|
;;;394      {
;;;395        case RCC_LSE_ON:
;;;396          /* Set LSEON bit */
;;;397          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
;;;398          break;
;;;399        case RCC_LSE_Bypass:
;;;400          /* Set LSEBYP and LSEON bits */
;;;401          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
0000d2  2005              MOVS     r0,#5
                  |L1.212|
0000d4  7008              STRB     r0,[r1,#0]
                  |L1.214|
;;;402          break;
;;;403        default:
;;;404          break;
;;;405      }
;;;406    }
0000d6  4770              BX       lr
;;;407    
                          ENDP

                  RCC_LSICmd PROC
;;;419      */
;;;420    void RCC_LSICmd(FunctionalState NewState)
0000d8  49c7              LDR      r1,|L1.1016|
;;;421    {
;;;422      /* Check the parameters */
;;;423      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;424    
;;;425      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
0000da  6008              STR      r0,[r1,#0]
;;;426    }
0000dc  4770              BX       lr
;;;427    
                          ENDP

                  RCC_PLLConfig PROC
;;;462      */
;;;463    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
0000de  ea411182          ORR      r1,r1,r2,LSL #6
;;;464    {
;;;465      /* Check the parameters */
;;;466      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;467      assert_param(IS_RCC_PLLM_VALUE(PLLM));
;;;468      assert_param(IS_RCC_PLLN_VALUE(PLLN));
;;;469      assert_param(IS_RCC_PLLP_VALUE(PLLP));
;;;470      assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
;;;471    
;;;472      RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
0000e2  085a              LSRS     r2,r3,#1
0000e4  b510              PUSH     {r4,lr}               ;464
0000e6  4bc5              LDR      r3,|L1.1020|
0000e8  9c02              LDR      r4,[sp,#8]
0000ea  eb034202          ADD      r2,r3,r2,LSL #16
0000ee  4311              ORRS     r1,r1,r2
0000f0  4301              ORRS     r1,r1,r0
0000f2  ea416004          ORR      r0,r1,r4,LSL #24
0000f6  49bb              LDR      r1,|L1.996|
0000f8  1d09              ADDS     r1,r1,#4
0000fa  6008              STR      r0,[r1,#0]
;;;473                     (PLLQ << 24);
;;;474    }
0000fc  bd10              POP      {r4,pc}
;;;475    
                          ENDP

                  RCC_PLLCmd PROC
;;;485      */
;;;486    void RCC_PLLCmd(FunctionalState NewState)
0000fe  49bd              LDR      r1,|L1.1012|
;;;487    {
;;;488      /* Check the parameters */
;;;489      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;490      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000100  6608              STR      r0,[r1,#0x60]
;;;491    }
000102  4770              BX       lr
;;;492    
                          ENDP

                  RCC_PLLI2SConfig PROC
;;;515      */
;;;516    void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
000104  0180              LSLS     r0,r0,#6
;;;517    {
;;;518      /* Check the parameters */
;;;519      assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
;;;520      assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
;;;521    
;;;522      RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
000106  ea407001          ORR      r0,r0,r1,LSL #28
00010a  49b6              LDR      r1,|L1.996|
00010c  3184              ADDS     r1,r1,#0x84
00010e  6008              STR      r0,[r1,#0]
;;;523    }
000110  4770              BX       lr
;;;524    #endif /* STM32F40_41xxx || STM32F401xx */
                          ENDP

                  RCC_PLLI2SCmd PROC
;;;568      */
;;;569    void RCC_PLLI2SCmd(FunctionalState NewState)
000112  49b8              LDR      r1,|L1.1012|
;;;570    {
;;;571      /* Check the parameters */
;;;572      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;573      *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
000114  6688              STR      r0,[r1,#0x68]
;;;574    }
000116  4770              BX       lr
;;;575    
                          ENDP

                  RCC_PLLSAIConfig PROC
;;;597      */
;;;598    void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
000118  0180              LSLS     r0,r0,#6
;;;599    {
;;;600      /* Check the parameters */
;;;601      assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
;;;602      assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
;;;603    
;;;604      RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
00011a  ea406001          ORR      r0,r0,r1,LSL #24
00011e  49b1              LDR      r1,|L1.996|
000120  ea407002          ORR      r0,r0,r2,LSL #28
000124  3188              ADDS     r1,r1,#0x88
000126  6008              STR      r0,[r1,#0]
;;;605    }
000128  4770              BX       lr
;;;606    
                          ENDP

                  RCC_PLLSAICmd PROC
;;;615      */
;;;616    void RCC_PLLSAICmd(FunctionalState NewState)
00012a  49b2              LDR      r1,|L1.1012|
;;;617    {
;;;618      /* Check the parameters */
;;;619      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;620      *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
00012c  6708              STR      r0,[r1,#0x70]
;;;621    }
00012e  4770              BX       lr
;;;622    
                          ENDP

                  RCC_ClockSecuritySystemCmd PROC
;;;633      */
;;;634    void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
000130  49b0              LDR      r1,|L1.1012|
;;;635    {
;;;636      /* Check the parameters */
;;;637      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;638      *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
000132  64c8              STR      r0,[r1,#0x4c]
;;;639    }
000134  4770              BX       lr
;;;640    
                          ENDP

                  RCC_MCO1Config PROC
;;;658      */
;;;659    void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
000136  4bab              LDR      r3,|L1.996|
;;;660    {
;;;661      uint32_t tmpreg = 0;
;;;662      
;;;663      /* Check the parameters */
;;;664      assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
;;;665      assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
;;;666    
;;;667      tmpreg = RCC->CFGR;
000138  3308              ADDS     r3,r3,#8
00013a  681a              LDR      r2,[r3,#0]
;;;668    
;;;669      /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
;;;670      tmpreg &= CFGR_MCO1_RESET_MASK;
;;;671    
;;;672      /* Select MCO1 clock source and prescaler */
;;;673      tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
00013c  4308              ORRS     r0,r0,r1
00013e  f02262ec          BIC      r2,r2,#0x7600000      ;670
000142  4310              ORRS     r0,r0,r2
;;;674    
;;;675      /* Store the new value */
;;;676      RCC->CFGR = tmpreg;  
000144  6018              STR      r0,[r3,#0]
;;;677    }
000146  4770              BX       lr
;;;678    
                          ENDP

                  RCC_MCO2Config PROC
;;;696      */
;;;697    void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
000148  4ba6              LDR      r3,|L1.996|
;;;698    {
;;;699      uint32_t tmpreg = 0;
;;;700      
;;;701      /* Check the parameters */
;;;702      assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
;;;703      assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
;;;704      
;;;705      tmpreg = RCC->CFGR;
00014a  3308              ADDS     r3,r3,#8
00014c  681a              LDR      r2,[r3,#0]
;;;706      
;;;707      /* Clear MCO2 and MCO2PRE[2:0] bits */
;;;708      tmpreg &= CFGR_MCO2_RESET_MASK;
;;;709    
;;;710      /* Select MCO2 clock source and prescaler */
;;;711      tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
00014e  4308              ORRS     r0,r0,r1
000150  f0224278          BIC      r2,r2,#0xf8000000     ;708
000154  4310              ORRS     r0,r0,r2
;;;712    
;;;713      /* Store the new value */
;;;714      RCC->CFGR = tmpreg;  
000156  6018              STR      r0,[r3,#0]
;;;715    }
000158  4770              BX       lr
;;;716    
                          ENDP

                  RCC_SYSCLKConfig PROC
;;;862      */
;;;863    void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
00015a  4aa2              LDR      r2,|L1.996|
;;;864    {
;;;865      uint32_t tmpreg = 0;
;;;866    
;;;867      /* Check the parameters */
;;;868      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;869    
;;;870      tmpreg = RCC->CFGR;
00015c  3208              ADDS     r2,r2,#8
00015e  6811              LDR      r1,[r2,#0]
;;;871    
;;;872      /* Clear SW[1:0] bits */
;;;873      tmpreg &= ~RCC_CFGR_SW;
000160  f0210103          BIC      r1,r1,#3
;;;874    
;;;875      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;876      tmpreg |= RCC_SYSCLKSource;
000164  4301              ORRS     r1,r1,r0
;;;877    
;;;878      /* Store the new value */
;;;879      RCC->CFGR = tmpreg;
000166  6011              STR      r1,[r2,#0]
;;;880    }
000168  4770              BX       lr
;;;881    
                          ENDP

                  RCC_GetSYSCLKSource PROC
;;;890      */
;;;891    uint8_t RCC_GetSYSCLKSource(void)
00016a  489e              LDR      r0,|L1.996|
;;;892    {
;;;893      return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
00016c  3008              ADDS     r0,r0,#8
00016e  6800              LDR      r0,[r0,#0]
000170  f000000c          AND      r0,r0,#0xc
;;;894    }
000174  4770              BX       lr
;;;895    
                          ENDP

                  RCC_HCLKConfig PROC
;;;915      */
;;;916    void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000176  4a9b              LDR      r2,|L1.996|
;;;917    {
;;;918      uint32_t tmpreg = 0;
;;;919      
;;;920      /* Check the parameters */
;;;921      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;922    
;;;923      tmpreg = RCC->CFGR;
000178  3208              ADDS     r2,r2,#8
00017a  6811              LDR      r1,[r2,#0]
;;;924    
;;;925      /* Clear HPRE[3:0] bits */
;;;926      tmpreg &= ~RCC_CFGR_HPRE;
00017c  f02101f0          BIC      r1,r1,#0xf0
;;;927    
;;;928      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;929      tmpreg |= RCC_SYSCLK;
000180  4301              ORRS     r1,r1,r0
;;;930    
;;;931      /* Store the new value */
;;;932      RCC->CFGR = tmpreg;
000182  6011              STR      r1,[r2,#0]
;;;933    }
000184  4770              BX       lr
;;;934    
                          ENDP

                  RCC_PCLK1Config PROC
;;;947      */
;;;948    void RCC_PCLK1Config(uint32_t RCC_HCLK)
000186  4a97              LDR      r2,|L1.996|
;;;949    {
;;;950      uint32_t tmpreg = 0;
;;;951    
;;;952      /* Check the parameters */
;;;953      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;954    
;;;955      tmpreg = RCC->CFGR;
000188  3208              ADDS     r2,r2,#8
00018a  6811              LDR      r1,[r2,#0]
;;;956    
;;;957      /* Clear PPRE1[2:0] bits */
;;;958      tmpreg &= ~RCC_CFGR_PPRE1;
00018c  f42151e0          BIC      r1,r1,#0x1c00
;;;959    
;;;960      /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;961      tmpreg |= RCC_HCLK;
000190  4301              ORRS     r1,r1,r0
;;;962    
;;;963      /* Store the new value */
;;;964      RCC->CFGR = tmpreg;
000192  6011              STR      r1,[r2,#0]
;;;965    }
000194  4770              BX       lr
;;;966    
                          ENDP

                  RCC_PCLK2Config PROC
;;;978      */
;;;979    void RCC_PCLK2Config(uint32_t RCC_HCLK)
000196  4a93              LDR      r2,|L1.996|
;;;980    {
;;;981      uint32_t tmpreg = 0;
;;;982    
;;;983      /* Check the parameters */
;;;984      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;985    
;;;986      tmpreg = RCC->CFGR;
000198  3208              ADDS     r2,r2,#8
00019a  6811              LDR      r1,[r2,#0]
;;;987    
;;;988      /* Clear PPRE2[2:0] bits */
;;;989      tmpreg &= ~RCC_CFGR_PPRE2;
00019c  f4214160          BIC      r1,r1,#0xe000
;;;990    
;;;991      /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;992      tmpreg |= RCC_HCLK << 3;
0001a0  ea4100c0          ORR      r0,r1,r0,LSL #3
;;;993    
;;;994      /* Store the new value */
;;;995      RCC->CFGR = tmpreg;
0001a4  6010              STR      r0,[r2,#0]
;;;996    }
0001a6  4770              BX       lr
;;;997    
                          ENDP

                  RCC_GetClocksFreq PROC
;;;1030     */
;;;1031   void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
0001a8  b570              PUSH     {r4-r6,lr}
;;;1032   {
;;;1033     uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
;;;1034   
;;;1035     /* Get SYSCLK source -------------------------------------------------------*/
;;;1036     tmp = RCC->CFGR & RCC_CFGR_SWS;
0001aa  4b8e              LDR      r3,|L1.996|
0001ac  3308              ADDS     r3,r3,#8
0001ae  6819              LDR      r1,[r3,#0]
;;;1037   
;;;1038     switch (tmp)
;;;1039     {
;;;1040       case 0x00:  /* HSI used as system clock source */
;;;1041         RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
0001b0  4c93              LDR      r4,|L1.1024|
0001b2  f011010c          ANDS     r1,r1,#0xc            ;1036
0001b6  d004              BEQ      |L1.450|
;;;1042         break;
;;;1043       case 0x04:  /* HSE used as system clock  source */
;;;1044         RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
0001b8  4e92              LDR      r6,|L1.1028|
0001ba  2904              CMP      r1,#4                 ;1038
0001bc  d003              BEQ      |L1.454|
0001be  2908              CMP      r1,#8                 ;1038
0001c0  d003              BEQ      |L1.458|
                  |L1.450|
0001c2  6004              STR      r4,[r0,#0]            ;1042
0001c4  e01b              B        |L1.510|
                  |L1.454|
;;;1045         break;
0001c6  6006              STR      r6,[r0,#0]
0001c8  e019              B        |L1.510|
                  |L1.458|
;;;1046       case 0x08:  /* PLL used as system clock  source */
;;;1047   
;;;1048         /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;1049            SYSCLK = PLL_VCO / PLLP
;;;1050            */    
;;;1051         pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
0001ca  4a86              LDR      r2,|L1.996|
0001cc  1d12              ADDS     r2,r2,#4
0001ce  6811              LDR      r1,[r2,#0]
0001d0  f3c15580          UBFX     r5,r1,#22,#1
;;;1052         pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
0001d4  6811              LDR      r1,[r2,#0]
0001d6  f001013f          AND      r1,r1,#0x3f
;;;1053         
;;;1054         if (pllsource != 0)
0001da  b115              CBZ      r5,|L1.482|
;;;1055         {
;;;1056           /* HSE used as PLL clock source */
;;;1057           pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
0001dc  fbb6f1f1          UDIV     r1,r6,r1
0001e0  e001              B        |L1.486|
                  |L1.482|
;;;1058         }
;;;1059         else
;;;1060         {
;;;1061           /* HSI used as PLL clock source */
;;;1062           pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
0001e2  fbb4f1f1          UDIV     r1,r4,r1
                  |L1.486|
0001e6  6814              LDR      r4,[r2,#0]
;;;1063         }
;;;1064   
;;;1065         pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
0001e8  6812              LDR      r2,[r2,#0]
0001ea  f3c41488          UBFX     r4,r4,#6,#9           ;1062
0001ee  4361              MULS     r1,r4,r1              ;1062
0001f0  f3c24201          UBFX     r2,r2,#16,#2
0001f4  1c52              ADDS     r2,r2,#1
0001f6  0052              LSLS     r2,r2,#1
;;;1066         RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
0001f8  fbb1f1f2          UDIV     r1,r1,r2
0001fc  6001              STR      r1,[r0,#0]
                  |L1.510|
;;;1067         break;
;;;1068       default:
;;;1069         RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
;;;1070         break;
;;;1071     }
;;;1072     /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
;;;1073   
;;;1074     /* Get HCLK prescaler */
;;;1075     tmp = RCC->CFGR & RCC_CFGR_HPRE;
0001fe  6819              LDR      r1,[r3,#0]
;;;1076     tmp = tmp >> 4;
;;;1077     presc = APBAHBPrescTable[tmp];
;;;1078     /* HCLK clock frequency */
;;;1079     RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
;;;1080   
;;;1081     /* Get PCLK1 prescaler */
;;;1082     tmp = RCC->CFGR & RCC_CFGR_PPRE1;
;;;1083     tmp = tmp >> 10;
;;;1084     presc = APBAHBPrescTable[tmp];
;;;1085     /* PCLK1 clock frequency */
;;;1086     RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
;;;1087   
;;;1088     /* Get PCLK2 prescaler */
;;;1089     tmp = RCC->CFGR & RCC_CFGR_PPRE2;
;;;1090     tmp = tmp >> 13;
;;;1091     presc = APBAHBPrescTable[tmp];
;;;1092     /* PCLK2 clock frequency */
;;;1093     RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
;;;1094   }
000200  220f              MOVS     r2,#0xf
000202  ea021111          AND      r1,r2,r1,LSR #4
000206  4a80              LDR      r2,|L1.1032|
000208  5c54              LDRB     r4,[r2,r1]            ;1077
00020a  6801              LDR      r1,[r0,#0]            ;1079
00020c  40e1              LSRS     r1,r1,r4              ;1079
00020e  6041              STR      r1,[r0,#4]            ;1082
000210  681c              LDR      r4,[r3,#0]            ;1082
000212  2507              MOVS     r5,#7
000214  ea052494          AND      r4,r5,r4,LSR #10
000218  5d14              LDRB     r4,[r2,r4]            ;1084
00021a  fa21f404          LSR      r4,r1,r4              ;1086
00021e  6084              STR      r4,[r0,#8]            ;1089
000220  681b              LDR      r3,[r3,#0]            ;1089
000222  ea053353          AND      r3,r5,r3,LSR #13
000226  5cd2              LDRB     r2,[r2,r3]            ;1091
000228  40d1              LSRS     r1,r1,r2              ;1093
00022a  60c1              STR      r1,[r0,#0xc]          ;1093
00022c  bd70              POP      {r4-r6,pc}
;;;1095   
                          ENDP

                  RCC_RTCCLKConfig PROC
;;;1155     */
;;;1156   void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
00022e  f3c02101          UBFX     r1,r0,#8,#2
;;;1157   {
;;;1158     uint32_t tmpreg = 0;
;;;1159   
;;;1160     /* Check the parameters */
;;;1161     assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;1162   
;;;1163     if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
000232  2903              CMP      r1,#3
000234  d108              BNE      |L1.584|
;;;1164     { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
;;;1165       tmpreg = RCC->CFGR;
000236  4b6b              LDR      r3,|L1.996|
000238  3308              ADDS     r3,r3,#8
00023a  6819              LDR      r1,[r3,#0]
;;;1166   
;;;1167       /* Clear RTCPRE[4:0] bits */
;;;1168       tmpreg &= ~RCC_CFGR_RTCPRE;
;;;1169   
;;;1170       /* Configure HSE division factor for RTC clock */
;;;1171       tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
00023c  4a73              LDR      r2,|L1.1036|
00023e  f42111f8          BIC      r1,r1,#0x1f0000       ;1168
000242  4002              ANDS     r2,r2,r0
000244  430a              ORRS     r2,r2,r1
;;;1172   
;;;1173       /* Store the new value */
;;;1174       RCC->CFGR = tmpreg;
000246  601a              STR      r2,[r3,#0]
                  |L1.584|
;;;1175     }
;;;1176       
;;;1177     /* Select the RTC clock source */
;;;1178     RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
000248  4966              LDR      r1,|L1.996|
00024a  3170              ADDS     r1,r1,#0x70
00024c  680a              LDR      r2,[r1,#0]
00024e  f3c0000b          UBFX     r0,r0,#0,#12
000252  4302              ORRS     r2,r2,r0
000254  600a              STR      r2,[r1,#0]
;;;1179   }
000256  4770              BX       lr
;;;1180   
                          ENDP

                  RCC_RTCCLKCmd PROC
;;;1187     */
;;;1188   void RCC_RTCCLKCmd(FunctionalState NewState)
000258  4967              LDR      r1,|L1.1016|
;;;1189   {
;;;1190     /* Check the parameters */
;;;1191     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1192   
;;;1193     *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
00025a  3944              SUBS     r1,r1,#0x44
00025c  6008              STR      r0,[r1,#0]
;;;1194   }
00025e  4770              BX       lr
;;;1195   
                          ENDP

                  RCC_BackupResetCmd PROC
;;;1204     */
;;;1205   void RCC_BackupResetCmd(FunctionalState NewState)
000260  4965              LDR      r1,|L1.1016|
;;;1206   {
;;;1207     /* Check the parameters */
;;;1208     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1209     *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000262  3940              SUBS     r1,r1,#0x40
000264  6008              STR      r0,[r1,#0]
;;;1210   }
000266  4770              BX       lr
;;;1211   
                          ENDP

                  RCC_I2SCLKConfig PROC
;;;1221     */
;;;1222   void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
000268  4962              LDR      r1,|L1.1012|
;;;1223   {
;;;1224     /* Check the parameters */
;;;1225     assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
;;;1226   
;;;1227     *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
00026a  f8c1015c          STR      r0,[r1,#0x15c]
;;;1228   }
00026e  4770              BX       lr
;;;1229   
                          ENDP

                  RCC_SAIPLLI2SClkDivConfig PROC
;;;1242     */
;;;1243   void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
000270  4a5c              LDR      r2,|L1.996|
;;;1244   {
;;;1245     uint32_t tmpreg = 0;
;;;1246     
;;;1247     /* Check the parameters */
;;;1248     assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
;;;1249     
;;;1250     tmpreg = RCC->DCKCFGR;
000272  328c              ADDS     r2,r2,#0x8c
000274  6811              LDR      r1,[r2,#0]
;;;1251   
;;;1252     /* Clear PLLI2SDIVQ[4:0] bits */
;;;1253     tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
000276  1e40              SUBS     r0,r0,#1
000278  f021011f          BIC      r1,r1,#0x1f
;;;1254   
;;;1255     /* Set PLLI2SDIVQ values */
;;;1256     tmpreg |= (RCC_PLLI2SDivQ - 1);
00027c  4301              ORRS     r1,r1,r0
;;;1257   
;;;1258     /* Store the new value */
;;;1259     RCC->DCKCFGR = tmpreg;
00027e  6011              STR      r1,[r2,#0]
;;;1260   }
000280  4770              BX       lr
;;;1261   
                          ENDP

                  RCC_SAIPLLSAIClkDivConfig PROC
;;;1274     */
;;;1275   void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
000282  4a58              LDR      r2,|L1.996|
;;;1276   {
;;;1277     uint32_t tmpreg = 0;
;;;1278     
;;;1279     /* Check the parameters */
;;;1280     assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
;;;1281     
;;;1282     tmpreg = RCC->DCKCFGR;
000284  328c              ADDS     r2,r2,#0x8c
000286  6811              LDR      r1,[r2,#0]
;;;1283   
;;;1284     /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
;;;1285     tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
;;;1286   
;;;1287     /* Set PLLSAIDIVQ values */
;;;1288     tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
000288  f06f03ff          MVN      r3,#0xff
00028c  f42151f8          BIC      r1,r1,#0x1f00         ;1285
000290  eb032000          ADD      r0,r3,r0,LSL #8
000294  4308              ORRS     r0,r0,r1
;;;1289   
;;;1290     /* Store the new value */
;;;1291     RCC->DCKCFGR = tmpreg;
000296  6010              STR      r0,[r2,#0]
;;;1292   }
000298  4770              BX       lr
;;;1293   
                          ENDP

                  RCC_SAIBlockACLKConfig PROC
;;;1310     */
;;;1311   void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
00029a  4a52              LDR      r2,|L1.996|
;;;1312   {
;;;1313     uint32_t tmpreg = 0;
;;;1314     
;;;1315     /* Check the parameters */
;;;1316     assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
;;;1317     
;;;1318     tmpreg = RCC->DCKCFGR;
00029c  328c              ADDS     r2,r2,#0x8c
00029e  6811              LDR      r1,[r2,#0]
;;;1319   
;;;1320     /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
;;;1321     tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
0002a0  f4211140          BIC      r1,r1,#0x300000
;;;1322   
;;;1323     /* Set SAI Block A source selection value */
;;;1324     tmpreg |= RCC_SAIBlockACLKSource;
0002a4  4301              ORRS     r1,r1,r0
;;;1325   
;;;1326     /* Store the new value */
;;;1327     RCC->DCKCFGR = tmpreg;
0002a6  6011              STR      r1,[r2,#0]
;;;1328   }
0002a8  4770              BX       lr
;;;1329   
                          ENDP

                  RCC_SAIBlockBCLKConfig PROC
;;;1346     */
;;;1347   void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
0002aa  4a4e              LDR      r2,|L1.996|
;;;1348   {
;;;1349     uint32_t tmpreg = 0;
;;;1350     
;;;1351     /* Check the parameters */
;;;1352     assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
;;;1353     
;;;1354     tmpreg = RCC->DCKCFGR;
0002ac  328c              ADDS     r2,r2,#0x8c
0002ae  6811              LDR      r1,[r2,#0]
;;;1355   
;;;1356     /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
;;;1357     tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
0002b0  f4210140          BIC      r1,r1,#0xc00000
;;;1358   
;;;1359     /* Set SAI Block B source selection value */
;;;1360     tmpreg |= RCC_SAIBlockBCLKSource;
0002b4  4301              ORRS     r1,r1,r0
;;;1361   
;;;1362     /* Store the new value */
;;;1363     RCC->DCKCFGR = tmpreg;
0002b6  6011              STR      r1,[r2,#0]
;;;1364   }
0002b8  4770              BX       lr
;;;1365   
                          ENDP

                  RCC_LTDCCLKDivConfig PROC
;;;1379     */
;;;1380   void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
0002ba  4a4a              LDR      r2,|L1.996|
;;;1381   {
;;;1382     uint32_t tmpreg = 0;
;;;1383     
;;;1384     /* Check the parameters */
;;;1385     assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
;;;1386     
;;;1387     tmpreg = RCC->DCKCFGR;
0002bc  328c              ADDS     r2,r2,#0x8c
0002be  6811              LDR      r1,[r2,#0]
;;;1388   
;;;1389     /* Clear PLLSAIDIVR[2:0] bits */
;;;1390     tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
0002c0  f4213140          BIC      r1,r1,#0x30000
;;;1391   
;;;1392     /* Set PLLSAIDIVR values */
;;;1393     tmpreg |= RCC_PLLSAIDivR;
0002c4  4301              ORRS     r1,r1,r0
;;;1394   
;;;1395     /* Store the new value */
;;;1396     RCC->DCKCFGR = tmpreg;
0002c6  6011              STR      r1,[r2,#0]
;;;1397   }
0002c8  4770              BX       lr
;;;1398   
                          ENDP

                  RCC_TIMCLKPresConfig PROC
;;;1416     */
;;;1417   void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
0002ca  4951              LDR      r1,|L1.1040|
;;;1418   {
;;;1419     /* Check the parameters */
;;;1420     assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
;;;1421   
;;;1422     *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
0002cc  f8c101e0          STR      r0,[r1,#0x1e0]
;;;1423     
;;;1424   }
0002d0  4770              BX       lr
;;;1425   
                          ENDP

                  RCC_AHB1PeriphClockCmd PROC
;;;1459     */
;;;1460   void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
0002d2  4a44              LDR      r2,|L1.996|
;;;1461   {
;;;1462     /* Check the parameters */
;;;1463     assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
;;;1464   
;;;1465     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1466     if (NewState != DISABLE)
;;;1467     {
;;;1468       RCC->AHB1ENR |= RCC_AHB1Periph;
0002d4  3230              ADDS     r2,r2,#0x30
0002d6  2900              CMP      r1,#0                 ;1466
;;;1469     }
;;;1470     else
;;;1471     {
;;;1472       RCC->AHB1ENR &= ~RCC_AHB1Periph;
0002d8  6811              LDR      r1,[r2,#0]
0002da  d001              BEQ      |L1.736|
0002dc  4301              ORRS     r1,r1,r0              ;1468
0002de  e000              B        |L1.738|
                  |L1.736|
0002e0  4381              BICS     r1,r1,r0
                  |L1.738|
0002e2  6011              STR      r1,[r2,#0]            ;1468
;;;1473     }
;;;1474   }
0002e4  4770              BX       lr
;;;1475   
                          ENDP

                  RCC_AHB2PeriphClockCmd PROC
;;;1491     */
;;;1492   void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
0002e6  4a3f              LDR      r2,|L1.996|
;;;1493   {
;;;1494     /* Check the parameters */
;;;1495     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1496     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1497   
;;;1498     if (NewState != DISABLE)
;;;1499     {
;;;1500       RCC->AHB2ENR |= RCC_AHB2Periph;
0002e8  3234              ADDS     r2,r2,#0x34
0002ea  2900              CMP      r1,#0                 ;1498
;;;1501     }
;;;1502     else
;;;1503     {
;;;1504       RCC->AHB2ENR &= ~RCC_AHB2Periph;
0002ec  6811              LDR      r1,[r2,#0]
0002ee  d001              BEQ      |L1.756|
0002f0  4301              ORRS     r1,r1,r0              ;1500
0002f2  e000              B        |L1.758|
                  |L1.756|
0002f4  4381              BICS     r1,r1,r0
                  |L1.758|
0002f6  6011              STR      r1,[r2,#0]            ;1500
;;;1505     }
;;;1506   }
0002f8  4770              BX       lr
;;;1507   
                          ENDP

                  RCC_AHB3PeriphClockCmd PROC
;;;1519     */
;;;1520   void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
0002fa  4a3a              LDR      r2,|L1.996|
;;;1521   {
;;;1522     /* Check the parameters */
;;;1523     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
;;;1524     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1525   
;;;1526     if (NewState != DISABLE)
;;;1527     {
;;;1528       RCC->AHB3ENR |= RCC_AHB3Periph;
0002fc  3238              ADDS     r2,r2,#0x38
0002fe  2900              CMP      r1,#0                 ;1526
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       RCC->AHB3ENR &= ~RCC_AHB3Periph;
000300  6811              LDR      r1,[r2,#0]
000302  d001              BEQ      |L1.776|
000304  4301              ORRS     r1,r1,r0              ;1528
000306  e000              B        |L1.778|
                  |L1.776|
000308  4381              BICS     r1,r1,r0
                  |L1.778|
00030a  6011              STR      r1,[r2,#0]            ;1528
;;;1533     }
;;;1534   }
00030c  4770              BX       lr
;;;1535   
                          ENDP

                  RCC_APB1PeriphClockCmd PROC
;;;1571     */
;;;1572   void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
00030e  4a35              LDR      r2,|L1.996|
;;;1573   {
;;;1574     /* Check the parameters */
;;;1575     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
;;;1576     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1577   
;;;1578     if (NewState != DISABLE)
;;;1579     {
;;;1580       RCC->APB1ENR |= RCC_APB1Periph;
000310  3240              ADDS     r2,r2,#0x40
000312  2900              CMP      r1,#0                 ;1578
;;;1581     }
;;;1582     else
;;;1583     {
;;;1584       RCC->APB1ENR &= ~RCC_APB1Periph;
000314  6811              LDR      r1,[r2,#0]
000316  d001              BEQ      |L1.796|
000318  4301              ORRS     r1,r1,r0              ;1580
00031a  e000              B        |L1.798|
                  |L1.796|
00031c  4381              BICS     r1,r1,r0
                  |L1.798|
00031e  6011              STR      r1,[r2,#0]            ;1580
;;;1585     }
;;;1586   }
000320  4770              BX       lr
;;;1587   
                          ENDP

                  RCC_APB2PeriphClockCmd PROC
;;;1616     */
;;;1617   void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000322  4a30              LDR      r2,|L1.996|
;;;1618   {
;;;1619     /* Check the parameters */
;;;1620     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1621     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1622   
;;;1623     if (NewState != DISABLE)
;;;1624     {
;;;1625       RCC->APB2ENR |= RCC_APB2Periph;
000324  3244              ADDS     r2,r2,#0x44
000326  2900              CMP      r1,#0                 ;1623
;;;1626     }
;;;1627     else
;;;1628     {
;;;1629       RCC->APB2ENR &= ~RCC_APB2Periph;
000328  6811              LDR      r1,[r2,#0]
00032a  d001              BEQ      |L1.816|
00032c  4301              ORRS     r1,r1,r0              ;1625
00032e  e000              B        |L1.818|
                  |L1.816|
000330  4381              BICS     r1,r1,r0
                  |L1.818|
000332  6011              STR      r1,[r2,#0]            ;1625
;;;1630     }
;;;1631   }
000334  4770              BX       lr
;;;1632   
                          ENDP

                  RCC_AHB1PeriphResetCmd PROC
;;;1658     */
;;;1659   void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
000336  4a2b              LDR      r2,|L1.996|
;;;1660   {
;;;1661     /* Check the parameters */
;;;1662     assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
;;;1663     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1664   
;;;1665     if (NewState != DISABLE)
;;;1666     {
;;;1667       RCC->AHB1RSTR |= RCC_AHB1Periph;
000338  3210              ADDS     r2,r2,#0x10
00033a  2900              CMP      r1,#0                 ;1665
;;;1668     }
;;;1669     else
;;;1670     {
;;;1671       RCC->AHB1RSTR &= ~RCC_AHB1Periph;
00033c  6811              LDR      r1,[r2,#0]
00033e  d001              BEQ      |L1.836|
000340  4301              ORRS     r1,r1,r0              ;1667
000342  e000              B        |L1.838|
                  |L1.836|
000344  4381              BICS     r1,r1,r0
                  |L1.838|
000346  6011              STR      r1,[r2,#0]            ;1667
;;;1672     }
;;;1673   }
000348  4770              BX       lr
;;;1674   
                          ENDP

                  RCC_AHB2PeriphResetCmd PROC
;;;1687     */
;;;1688   void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
00034a  4a26              LDR      r2,|L1.996|
;;;1689   {
;;;1690     /* Check the parameters */
;;;1691     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1692     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1693   
;;;1694     if (NewState != DISABLE)
;;;1695     {
;;;1696       RCC->AHB2RSTR |= RCC_AHB2Periph;
00034c  3214              ADDS     r2,r2,#0x14
00034e  2900              CMP      r1,#0                 ;1694
;;;1697     }
;;;1698     else
;;;1699     {
;;;1700       RCC->AHB2RSTR &= ~RCC_AHB2Periph;
000350  6811              LDR      r1,[r2,#0]
000352  d001              BEQ      |L1.856|
000354  4301              ORRS     r1,r1,r0              ;1696
000356  e000              B        |L1.858|
                  |L1.856|
000358  4381              BICS     r1,r1,r0
                  |L1.858|
00035a  6011              STR      r1,[r2,#0]            ;1696
;;;1701     }
;;;1702   }
00035c  4770              BX       lr
;;;1703   
                          ENDP

                  RCC_AHB3PeriphResetCmd PROC
;;;1712     */
;;;1713   void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
00035e  4a21              LDR      r2,|L1.996|
;;;1714   {
;;;1715     /* Check the parameters */
;;;1716     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
;;;1717     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1718   
;;;1719     if (NewState != DISABLE)
;;;1720     {
;;;1721       RCC->AHB3RSTR |= RCC_AHB3Periph;
000360  3218              ADDS     r2,r2,#0x18
000362  2900              CMP      r1,#0                 ;1719
;;;1722     }
;;;1723     else
;;;1724     {
;;;1725       RCC->AHB3RSTR &= ~RCC_AHB3Periph;
000364  6811              LDR      r1,[r2,#0]
000366  d001              BEQ      |L1.876|
000368  4301              ORRS     r1,r1,r0              ;1721
00036a  e000              B        |L1.878|
                  |L1.876|
00036c  4381              BICS     r1,r1,r0
                  |L1.878|
00036e  6011              STR      r1,[r2,#0]            ;1721
;;;1726     }
;;;1727   }
000370  4770              BX       lr
;;;1728   
                          ENDP

                  RCC_APB1PeriphResetCmd PROC
;;;1761     */
;;;1762   void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
000372  4a1c              LDR      r2,|L1.996|
;;;1763   {
;;;1764     /* Check the parameters */
;;;1765     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1766     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1767     if (NewState != DISABLE)
;;;1768     {
;;;1769       RCC->APB1RSTR |= RCC_APB1Periph;
000374  3220              ADDS     r2,r2,#0x20
000376  2900              CMP      r1,#0                 ;1767
;;;1770     }
;;;1771     else
;;;1772     {
;;;1773       RCC->APB1RSTR &= ~RCC_APB1Periph;
000378  6811              LDR      r1,[r2,#0]
00037a  d001              BEQ      |L1.896|
00037c  4301              ORRS     r1,r1,r0              ;1769
00037e  e000              B        |L1.898|
                  |L1.896|
000380  4381              BICS     r1,r1,r0
                  |L1.898|
000382  6011              STR      r1,[r2,#0]            ;1769
;;;1774     }
;;;1775   }
000384  4770              BX       lr
;;;1776   
                          ENDP

                  RCC_APB2PeriphResetCmd PROC
;;;1802     */
;;;1803   void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000386  4a17              LDR      r2,|L1.996|
;;;1804   {
;;;1805     /* Check the parameters */
;;;1806     assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
;;;1807     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1808     if (NewState != DISABLE)
;;;1809     {
;;;1810       RCC->APB2RSTR |= RCC_APB2Periph;
000388  3224              ADDS     r2,r2,#0x24
00038a  2900              CMP      r1,#0                 ;1808
;;;1811     }
;;;1812     else
;;;1813     {
;;;1814       RCC->APB2RSTR &= ~RCC_APB2Periph;
00038c  6811              LDR      r1,[r2,#0]
00038e  d001              BEQ      |L1.916|
000390  4301              ORRS     r1,r1,r0              ;1810
000392  e000              B        |L1.918|
                  |L1.916|
000394  4381              BICS     r1,r1,r0
                  |L1.918|
000396  6011              STR      r1,[r2,#0]            ;1810
;;;1815     }
;;;1816   }
000398  4770              BX       lr
;;;1817   
                          ENDP

                  RCC_AHB1PeriphClockLPModeCmd PROC
;;;1851     */
;;;1852   void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
00039a  4a12              LDR      r2,|L1.996|
;;;1853   {
;;;1854     /* Check the parameters */
;;;1855     assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
;;;1856     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1857     if (NewState != DISABLE)
;;;1858     {
;;;1859       RCC->AHB1LPENR |= RCC_AHB1Periph;
00039c  3250              ADDS     r2,r2,#0x50
00039e  2900              CMP      r1,#0                 ;1857
;;;1860     }
;;;1861     else
;;;1862     {
;;;1863       RCC->AHB1LPENR &= ~RCC_AHB1Periph;
0003a0  6811              LDR      r1,[r2,#0]
0003a2  d001              BEQ      |L1.936|
0003a4  4301              ORRS     r1,r1,r0              ;1859
0003a6  e000              B        |L1.938|
                  |L1.936|
0003a8  4381              BICS     r1,r1,r0
                  |L1.938|
0003aa  6011              STR      r1,[r2,#0]            ;1859
;;;1864     }
;;;1865   }
0003ac  4770              BX       lr
;;;1866   
                          ENDP

                  RCC_AHB2PeriphClockLPModeCmd PROC
;;;1883     */
;;;1884   void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
0003ae  4a0d              LDR      r2,|L1.996|
;;;1885   {
;;;1886     /* Check the parameters */
;;;1887     assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
;;;1888     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1889     if (NewState != DISABLE)
;;;1890     {
;;;1891       RCC->AHB2LPENR |= RCC_AHB2Periph;
0003b0  3254              ADDS     r2,r2,#0x54
0003b2  2900              CMP      r1,#0                 ;1889
;;;1892     }
;;;1893     else
;;;1894     {
;;;1895       RCC->AHB2LPENR &= ~RCC_AHB2Periph;
0003b4  6811              LDR      r1,[r2,#0]
0003b6  d001              BEQ      |L1.956|
0003b8  4301              ORRS     r1,r1,r0              ;1891
0003ba  e000              B        |L1.958|
                  |L1.956|
0003bc  4381              BICS     r1,r1,r0
                  |L1.958|
0003be  6011              STR      r1,[r2,#0]            ;1891
;;;1896     }
;;;1897   }
0003c0  4770              BX       lr
;;;1898   
                          ENDP

                  RCC_AHB3PeriphClockLPModeCmd PROC
;;;1911     */
;;;1912   void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
0003c2  4a08              LDR      r2,|L1.996|
;;;1913   {
;;;1914     /* Check the parameters */
;;;1915     assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
;;;1916     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1917     if (NewState != DISABLE)
;;;1918     {
;;;1919       RCC->AHB3LPENR |= RCC_AHB3Periph;
0003c4  3258              ADDS     r2,r2,#0x58
0003c6  2900              CMP      r1,#0                 ;1917
;;;1920     }
;;;1921     else
;;;1922     {
;;;1923       RCC->AHB3LPENR &= ~RCC_AHB3Periph;
0003c8  6811              LDR      r1,[r2,#0]
0003ca  d001              BEQ      |L1.976|
0003cc  4301              ORRS     r1,r1,r0              ;1919
0003ce  e000              B        |L1.978|
                  |L1.976|
0003d0  4381              BICS     r1,r1,r0
                  |L1.978|
0003d2  6011              STR      r1,[r2,#0]            ;1919
;;;1924     }
;;;1925   }
0003d4  4770              BX       lr
;;;1926   
                          ENDP

                  RCC_APB1PeriphClockLPModeCmd PROC
;;;1963     */
;;;1964   void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
0003d6  4a03              LDR      r2,|L1.996|
;;;1965   {
;;;1966     /* Check the parameters */
;;;1967     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1968     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1969     if (NewState != DISABLE)
;;;1970     {
;;;1971       RCC->APB1LPENR |= RCC_APB1Periph;
0003d8  3260              ADDS     r2,r2,#0x60
0003da  2900              CMP      r1,#0                 ;1969
;;;1972     }
;;;1973     else
;;;1974     {
;;;1975       RCC->APB1LPENR &= ~RCC_APB1Periph;
0003dc  6811              LDR      r1,[r2,#0]
0003de  d019              BEQ      |L1.1044|
0003e0  4301              ORRS     r1,r1,r0              ;1971
0003e2  e018              B        |L1.1046|
                  |L1.996|
                          DCD      0x40023800
                  |L1.1000|
                          DCD      0xeaf6ffff
                  |L1.1004|
                          DCD      0x24003010
                  |L1.1008|
                          DCD      0x20003000
                  |L1.1012|
                          DCD      0x42470000
                  |L1.1016|
                          DCD      0x42470e80
                  |L1.1020|
                          DCD      0xffff0000
                  |L1.1024|
                          DCD      0x00f42400
                  |L1.1028|
                          DCD      0x017d7840
                  |L1.1032|
                          DCD      ||.data||
                  |L1.1036|
                          DCD      0x0ffffcff
                  |L1.1040|
                          DCD      0x42471000
                  |L1.1044|
000414  4381              BICS     r1,r1,r0
                  |L1.1046|
000416  6011              STR      r1,[r2,#0]            ;1971
;;;1976     }
;;;1977   }
000418  4770              BX       lr
;;;1978   
                          ENDP

                  RCC_APB2PeriphClockLPModeCmd PROC
;;;2008     */
;;;2009   void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
00041a  4a13              LDR      r2,|L1.1128|
;;;2010   {
;;;2011     /* Check the parameters */
;;;2012     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;2013     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2014     if (NewState != DISABLE)
00041c  2900              CMP      r1,#0
;;;2015     {
;;;2016       RCC->APB2LPENR |= RCC_APB2Periph;
;;;2017     }
;;;2018     else
;;;2019     {
;;;2020       RCC->APB2LPENR &= ~RCC_APB2Periph;
00041e  6811              LDR      r1,[r2,#0]
000420  d001              BEQ      |L1.1062|
000422  4301              ORRS     r1,r1,r0              ;2016
000424  e000              B        |L1.1064|
                  |L1.1062|
000426  4381              BICS     r1,r1,r0
                  |L1.1064|
000428  6011              STR      r1,[r2,#0]            ;2016
;;;2021     }
;;;2022   }
00042a  4770              BX       lr
;;;2023   
                          ENDP

                  RCC_ITConfig PROC
;;;2054     */
;;;2055   void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
00042c  4a0e              LDR      r2,|L1.1128|
;;;2056   {
;;;2057     /* Check the parameters */
;;;2058     assert_param(IS_RCC_IT(RCC_IT));
;;;2059     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;2060     if (NewState != DISABLE)
;;;2061     {
;;;2062       /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
;;;2063       *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
00042e  3a57              SUBS     r2,r2,#0x57
000430  2900              CMP      r1,#0                 ;2060
;;;2064     }
;;;2065     else
;;;2066     {
;;;2067       /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
;;;2068       *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
000432  7811              LDRB     r1,[r2,#0]
000434  d001              BEQ      |L1.1082|
000436  4301              ORRS     r1,r1,r0              ;2063
000438  e000              B        |L1.1084|
                  |L1.1082|
00043a  4381              BICS     r1,r1,r0
                  |L1.1084|
00043c  7011              STRB     r1,[r2,#0]            ;2063
;;;2069     }
;;;2070   }
00043e  4770              BX       lr
;;;2071   
                          ENDP

                  RCC_ClearFlag PROC
;;;2136     */
;;;2137   void RCC_ClearFlag(void)
000440  4809              LDR      r0,|L1.1128|
;;;2138   {
;;;2139     /* Set RMVF bit to clear the reset flags */
;;;2140     RCC->CSR |= RCC_CSR_RMVF;
000442  3010              ADDS     r0,r0,#0x10
000444  6801              LDR      r1,[r0,#0]
000446  f0417180          ORR      r1,r1,#0x1000000
00044a  6001              STR      r1,[r0,#0]
;;;2141   }
00044c  4770              BX       lr
;;;2142   
                          ENDP

                  RCC_GetITStatus PROC
;;;2156     */
;;;2157   ITStatus RCC_GetITStatus(uint8_t RCC_IT)
00044e  4601              MOV      r1,r0
;;;2158   {
;;;2159     ITStatus bitstatus = RESET;
;;;2160   
;;;2161     /* Check the parameters */
;;;2162     assert_param(IS_RCC_GET_IT(RCC_IT));
;;;2163   
;;;2164     /* Check the status of the specified RCC interrupt */
;;;2165     if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
000450  4a05              LDR      r2,|L1.1128|
000452  2000              MOVS     r0,#0                 ;2159
000454  3a58              SUBS     r2,r2,#0x58
000456  6812              LDR      r2,[r2,#0]
000458  420a              TST      r2,r1
00045a  d000              BEQ      |L1.1118|
;;;2166     {
;;;2167       bitstatus = SET;
00045c  2001              MOVS     r0,#1
                  |L1.1118|
;;;2168     }
;;;2169     else
;;;2170     {
;;;2171       bitstatus = RESET;
;;;2172     }
;;;2173     /* Return the RCC_IT status */
;;;2174     return  bitstatus;
;;;2175   }
00045e  4770              BX       lr
;;;2176   
                          ENDP

                  RCC_ClearITPendingBit PROC
;;;2190     */
;;;2191   void RCC_ClearITPendingBit(uint8_t RCC_IT)
000460  4901              LDR      r1,|L1.1128|
;;;2192   {
;;;2193     /* Check the parameters */
;;;2194     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;2195   
;;;2196     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;2197        pending bits */
;;;2198     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
000462  3956              SUBS     r1,r1,#0x56
000464  7008              STRB     r0,[r1,#0]
;;;2199   }
000466  4770              BX       lr
;;;2200   
                          ENDP

                  |L1.1128|
                          DCD      0x40023864

                          AREA ||.data||, DATA, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___15_stm32f4xx_rcc_c_49e27980____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rcc_c_49e27980____REVSH|
#line 144
|__asm___15_stm32f4xx_rcc_c_49e27980____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
