; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\stm32f4xx_pwr.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_pwr.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\FWLIB\STM32F4xx_StdPeriph_Driver\inc -I..\USER -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\ETHERNET -I..\HARDWARE\TIMER -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\RTC -I..\HARDWARE\ADC -I..\HARDWARE\SRAM -I..\HARDWARE\InterTemperate -I..\FWLIB\STM32F4x7_ETH_Driver\inc -I..\MALLOC -I..\USMART -I..\HARDWARE -I..\ETHERCAT -I.\RTE\_LWIP -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS --omf_browse=..\obj\stm32f4xx_pwr.crf ..\FWLIB\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_pwr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PWR_DeInit PROC
;;;141      */
;;;142    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  070c              LSLS     r4,r1,#28
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;145      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;146    }
;;;147    
                          ENDP

                  PWR_BackupAccessCmd PROC
;;;156      */
;;;157    void PWR_BackupAccessCmd(FunctionalState NewState)
000018  4940              LDR      r1,|L1.284|
;;;158    {
;;;159      /* Check the parameters */
;;;160      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;161      
;;;162      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
00001a  6208              STR      r0,[r1,#0x20]
;;;163    }
00001c  4770              BX       lr
;;;164    
                          ENDP

                  PWR_PVDLevelConfig PROC
;;;204      */
;;;205    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
00001e  4a40              LDR      r2,|L1.288|
;;;206    {
;;;207      uint32_t tmpreg = 0;
;;;208      
;;;209      /* Check the parameters */
;;;210      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;211      
;;;212      tmpreg = PWR->CR;
000020  6811              LDR      r1,[r2,#0]
;;;213      
;;;214      /* Clear PLS[7:5] bits */
;;;215      tmpreg &= CR_PLS_MASK;
000022  f02101e0          BIC      r1,r1,#0xe0
;;;216      
;;;217      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;218      tmpreg |= PWR_PVDLevel;
000026  4301              ORRS     r1,r1,r0
;;;219      
;;;220      /* Store the new value */
;;;221      PWR->CR = tmpreg;
000028  6011              STR      r1,[r2,#0]
;;;222    }
00002a  4770              BX       lr
;;;223    
                          ENDP

                  PWR_PVDCmd PROC
;;;229      */
;;;230    void PWR_PVDCmd(FunctionalState NewState)
00002c  493b              LDR      r1,|L1.284|
;;;231    {
;;;232      /* Check the parameters */
;;;233      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;234      
;;;235      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
00002e  6108              STR      r0,[r1,#0x10]
;;;236    }
000030  4770              BX       lr
;;;237    
                          ENDP

                  PWR_WakeUpPinCmd PROC
;;;263      */
;;;264    void PWR_WakeUpPinCmd(FunctionalState NewState)
000032  493a              LDR      r1,|L1.284|
;;;265    {
;;;266      /* Check the parameters */  
;;;267      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;268    
;;;269      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000034  f8c100a0          STR      r0,[r1,#0xa0]
;;;270    }
000038  4770              BX       lr
;;;271    
                          ENDP

                  PWR_BackupRegulatorCmd PROC
;;;360      */
;;;361    void PWR_BackupRegulatorCmd(FunctionalState NewState)
00003a  4938              LDR      r1,|L1.284|
;;;362    {
;;;363      /* Check the parameters */
;;;364      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;365    
;;;366      *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
00003c  f8c100a4          STR      r0,[r1,#0xa4]
;;;367    }
000040  4770              BX       lr
;;;368    
                          ENDP

                  PWR_MainRegulatorModeConfig PROC
;;;382      */
;;;383    void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
000042  4a37              LDR      r2,|L1.288|
;;;384    {
;;;385      uint32_t tmpreg = 0;
;;;386    	
;;;387      /* Check the parameters */
;;;388      assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
;;;389    
;;;390      tmpreg = PWR->CR;
000044  6811              LDR      r1,[r2,#0]
;;;391      
;;;392      /* Clear VOS[15:14] bits */
;;;393      tmpreg &= CR_VOS_MASK;
000046  f4214140          BIC      r1,r1,#0xc000
;;;394      
;;;395      /* Set VOS[15:14] bits according to PWR_Regulator_Voltage value */
;;;396      tmpreg |= PWR_Regulator_Voltage;
00004a  4301              ORRS     r1,r1,r0
;;;397      
;;;398      /* Store the new value */
;;;399      PWR->CR = tmpreg;
00004c  6011              STR      r1,[r2,#0]
;;;400    }
00004e  4770              BX       lr
;;;401    
                          ENDP

                  PWR_OverDriveCmd PROC
;;;417      */
;;;418    void PWR_OverDriveCmd(FunctionalState NewState)
000050  4932              LDR      r1,|L1.284|
;;;419    {
;;;420      /* Check the parameters */
;;;421      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;422      
;;;423      /* Set/Reset the ODEN bit to enable/disable the Over Drive mode */
;;;424      *(__IO uint32_t *) CR_ODEN_BB = (uint32_t)NewState;
000052  6408              STR      r0,[r1,#0x40]
;;;425    }
000054  4770              BX       lr
;;;426    
                          ENDP

                  PWR_OverDriveSWCmd PROC
;;;435      */
;;;436    void PWR_OverDriveSWCmd(FunctionalState NewState)
000056  4931              LDR      r1,|L1.284|
;;;437    {
;;;438      /* Check the parameters */
;;;439      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;440    
;;;441      /* Set/Reset the ODSWEN bit to enable/disable the Over Drive switching mode */
;;;442      *(__IO uint32_t *) CR_ODSWEN_BB = (uint32_t)NewState;
000058  6448              STR      r0,[r1,#0x44]
;;;443    }
00005a  4770              BX       lr
;;;444    
                          ENDP

                  PWR_UnderDriveCmd PROC
;;;462      */
;;;463    void PWR_UnderDriveCmd(FunctionalState NewState)
00005c  4930              LDR      r1,|L1.288|
;;;464    {
;;;465      /* Check the parameters */
;;;466      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;467    
;;;468      if (NewState != DISABLE)
00005e  2800              CMP      r0,#0
;;;469      {
;;;470        /* Set the UDEN[1:0] bits to enable the Under Drive mode */
;;;471        PWR->CR |= (uint32_t)PWR_CR_UDEN;
;;;472      }
;;;473      else
;;;474      {
;;;475        /* Reset the UDEN[1:0] bits to disable the Under Drive mode */
;;;476        PWR->CR &= (uint32_t)(~PWR_CR_UDEN);
000060  6808              LDR      r0,[r1,#0]
000062  d002              BEQ      |L1.106|
000064  f4402040          ORR      r0,r0,#0xc0000        ;471
000068  e001              B        |L1.110|
                  |L1.106|
00006a  f4202040          BIC      r0,r0,#0xc0000
                  |L1.110|
00006e  6008              STR      r0,[r1,#0]            ;471
;;;477      }
;;;478    }
000070  4770              BX       lr
;;;479    
                          ENDP

                  PWR_MainRegulatorLowVoltageCmd PROC
;;;488      */
;;;489    void PWR_MainRegulatorLowVoltageCmd(FunctionalState NewState)
000072  492a              LDR      r1,|L1.284|
;;;490    { 
000074  b100              CBZ      r0,|L1.120|
;;;491      /* Check the parameters */
;;;492      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;493      
;;;494      if (NewState != DISABLE)
;;;495      {
;;;496        *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)ENABLE;
000076  2001              MOVS     r0,#1
                  |L1.120|
000078  62c8              STR      r0,[r1,#0x2c]
;;;497      }
;;;498      else
;;;499      {
;;;500        *(__IO uint32_t *) CR_MRLVDS_BB = (uint32_t)DISABLE;
;;;501      }
;;;502    }
00007a  4770              BX       lr
;;;503    
                          ENDP

                  PWR_LowRegulatorLowVoltageCmd PROC
;;;512      */
;;;513    void PWR_LowRegulatorLowVoltageCmd(FunctionalState NewState)
00007c  4927              LDR      r1,|L1.284|
;;;514    {
00007e  b100              CBZ      r0,|L1.130|
;;;515      /* Check the parameters */
;;;516      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;517      
;;;518      if (NewState != DISABLE)
;;;519      {
;;;520        *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)ENABLE;
000080  2001              MOVS     r0,#1
                  |L1.130|
000082  6288              STR      r0,[r1,#0x28]
;;;521      }
;;;522      else
;;;523      {
;;;524        *(__IO uint32_t *) CR_LPLVDS_BB = (uint32_t)DISABLE;
;;;525      }
;;;526    }
000084  4770              BX       lr
;;;527    
                          ENDP

                  PWR_FlashPowerDownCmd PROC
;;;554      */
;;;555    void PWR_FlashPowerDownCmd(FunctionalState NewState)
000086  4925              LDR      r1,|L1.284|
;;;556    {
;;;557      /* Check the parameters */
;;;558      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;559    
;;;560      *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
000088  6248              STR      r0,[r1,#0x24]
;;;561    }
00008a  4770              BX       lr
;;;562    
                          ENDP

                  PWR_EnterSTOPMode PROC
;;;700      */
;;;701    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
00008c  4b24              LDR      r3,|L1.288|
;;;702    {
00008e  b510              PUSH     {r4,lr}
;;;703      uint32_t tmpreg = 0;
;;;704      
;;;705      /* Check the parameters */
;;;706      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;707      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;708      
;;;709      /* Select the regulator state in STOP mode ---------------------------------*/
;;;710      tmpreg = PWR->CR;
000090  681a              LDR      r2,[r3,#0]
;;;711      /* Clear PDDS and LPDS bits */
;;;712      tmpreg &= CR_DS_MASK;
000092  f6404403          MOV      r4,#0xc03
000096  43a2              BICS     r2,r2,r4
;;;713      
;;;714      /* Set LPDS, MRLVDS and LPLVDS bits according to PWR_Regulator value */
;;;715      tmpreg |= PWR_Regulator;
000098  4302              ORRS     r2,r2,r0
;;;716      
;;;717      /* Store the new value */
;;;718      PWR->CR = tmpreg;
00009a  601a              STR      r2,[r3,#0]
;;;719      
;;;720      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;721      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
00009c  4821              LDR      r0,|L1.292|
00009e  6802              LDR      r2,[r0,#0]
0000a0  f0420204          ORR      r2,r2,#4
0000a4  6002              STR      r2,[r0,#0]
;;;722      
;;;723      /* Select STOP mode entry --------------------------------------------------*/
;;;724      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
0000a6  2901              CMP      r1,#1
0000a8  d005              BEQ      |L1.182|
;;;725      {   
;;;726        /* Request Wait For Interrupt */
;;;727        __WFI();
;;;728      }
;;;729      else
;;;730      {
;;;731        /* Request Wait For Event */
;;;732        __WFE();
0000aa  bf20              WFE      
                  |L1.172|
;;;733      }
;;;734      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;735      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
0000ac  6801              LDR      r1,[r0,#0]
0000ae  f0210104          BIC      r1,r1,#4
0000b2  6001              STR      r1,[r0,#0]
;;;736    }
0000b4  bd10              POP      {r4,pc}
                  |L1.182|
0000b6  bf30              WFI                            ;727
0000b8  e7f8              B        |L1.172|
;;;737    
                          ENDP

                  PWR_EnterUnderDriveSTOPMode PROC
;;;764      */
;;;765    void PWR_EnterUnderDriveSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
0000ba  4b19              LDR      r3,|L1.288|
;;;766    {
0000bc  b510              PUSH     {r4,lr}
;;;767      uint32_t tmpreg = 0;
;;;768      
;;;769      /* Check the parameters */
;;;770      assert_param(IS_PWR_REGULATOR_UNDERDRIVE(PWR_Regulator));
;;;771      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;772      
;;;773      /* Select the regulator state in STOP mode ---------------------------------*/
;;;774      tmpreg = PWR->CR;
0000be  681a              LDR      r2,[r3,#0]
;;;775      /* Clear PDDS and LPDS bits */
;;;776      tmpreg &= CR_DS_MASK;
0000c0  f6404403          MOV      r4,#0xc03
0000c4  43a2              BICS     r2,r2,r4
;;;777      
;;;778      /* Set LPDS, MRLUDS and LPLUDS bits according to PWR_Regulator value */
;;;779      tmpreg |= PWR_Regulator;
0000c6  4302              ORRS     r2,r2,r0
;;;780      
;;;781      /* Store the new value */
;;;782      PWR->CR = tmpreg;
0000c8  601a              STR      r2,[r3,#0]
;;;783      
;;;784      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;785      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
0000ca  4816              LDR      r0,|L1.292|
0000cc  6802              LDR      r2,[r0,#0]
0000ce  f0420204          ORR      r2,r2,#4
0000d2  6002              STR      r2,[r0,#0]
;;;786      
;;;787      /* Select STOP mode entry --------------------------------------------------*/
;;;788      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
0000d4  2901              CMP      r1,#1
0000d6  d005              BEQ      |L1.228|
;;;789      {   
;;;790        /* Request Wait For Interrupt */
;;;791        __WFI();
;;;792      }
;;;793      else
;;;794      {
;;;795        /* Request Wait For Event */
;;;796        __WFE();
0000d8  bf20              WFE      
                  |L1.218|
;;;797      }
;;;798      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;799      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
0000da  6801              LDR      r1,[r0,#0]
0000dc  f0210104          BIC      r1,r1,#4
0000e0  6001              STR      r1,[r0,#0]
;;;800    }
0000e2  bd10              POP      {r4,pc}
                  |L1.228|
0000e4  bf30              WFI                            ;791
0000e6  e7f8              B        |L1.218|
;;;801    
                          ENDP

                  PWR_EnterSTANDBYMode PROC
;;;813      */
;;;814    void PWR_EnterSTANDBYMode(void)
0000e8  480d              LDR      r0,|L1.288|
;;;815    {
;;;816      /* Select STANDBY mode */
;;;817      PWR->CR |= PWR_CR_PDDS;
0000ea  6801              LDR      r1,[r0,#0]
0000ec  f0410102          ORR      r1,r1,#2
0000f0  6001              STR      r1,[r0,#0]
;;;818      
;;;819      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;820      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
0000f2  480c              LDR      r0,|L1.292|
0000f4  6801              LDR      r1,[r0,#0]
0000f6  f0410104          ORR      r1,r1,#4
0000fa  6001              STR      r1,[r0,#0]
;;;821      
;;;822      /* This option is used to ensure that store operations are completed */
;;;823    #if defined ( __CC_ARM   )
;;;824      __force_stores();
;;;825    #endif
;;;826      /* Request Wait For Interrupt */
;;;827      __WFI();
0000fc  bf30              WFI      
;;;828    }
0000fe  4770              BX       lr
;;;829    
                          ENDP

                  PWR_GetFlagStatus PROC
;;;873      */
;;;874    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000100  4a07              LDR      r2,|L1.288|
;;;875    {
000102  4601              MOV      r1,r0
;;;876      FlagStatus bitstatus = RESET;
000104  2000              MOVS     r0,#0
;;;877      
;;;878      /* Check the parameters */
;;;879      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;880      
;;;881      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
000106  6852              LDR      r2,[r2,#4]
000108  420a              TST      r2,r1
00010a  d000              BEQ      |L1.270|
;;;882      {
;;;883        bitstatus = SET;
00010c  2001              MOVS     r0,#1
                  |L1.270|
;;;884      }
;;;885      else
;;;886      {
;;;887        bitstatus = RESET;
;;;888      }
;;;889      /* Return the flag status */
;;;890      return bitstatus;
;;;891    }
00010e  4770              BX       lr
;;;892    
                          ENDP

                  PWR_ClearFlag PROC
;;;901      */
;;;902    void PWR_ClearFlag(uint32_t PWR_FLAG)
000110  4903              LDR      r1,|L1.288|
;;;903    {
;;;904      /* Check the parameters */
;;;905      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;906      
;;;907    #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
;;;908      if (PWR_FLAG != PWR_FLAG_UDRDY)
;;;909      {
;;;910        PWR->CR |=  PWR_FLAG << 2;
;;;911      }
;;;912      else
;;;913      {
;;;914        PWR->CSR |= PWR_FLAG_UDRDY;
;;;915      }
;;;916    #endif /* STM32F427_437xx ||  STM32F429_439xx */
;;;917    
;;;918    #if defined (STM32F40_41xxx) || defined (STM32F401xx) || defined (STM32F411xE) 
;;;919      PWR->CR |=  PWR_FLAG << 2;
000112  680a              LDR      r2,[r1,#0]
000114  ea420080          ORR      r0,r2,r0,LSL #2
000118  6008              STR      r0,[r1,#0]
;;;920    #endif /* STM32F40_41xxx  || STM32F401xx || STM32F411xE */
;;;921    }
00011a  4770              BX       lr
;;;922    
                          ENDP

                  |L1.284|
                          DCD      0x420e0000
                  |L1.288|
                          DCD      0x40007000
                  |L1.292|
                          DCD      0xe000ed10

;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_pwr_c_0c2a8b75____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___15_stm32f4xx_pwr_c_0c2a8b75____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_pwr_c_0c2a8b75____REVSH|
#line 144
|__asm___15_stm32f4xx_pwr_c_0c2a8b75____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
