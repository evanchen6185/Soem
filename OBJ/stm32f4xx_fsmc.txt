; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\stm32f4xx_fsmc.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_fsmc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\FWLIB\STM32F4xx_StdPeriph_Driver\inc -I..\USER -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\ETHERNET -I..\HARDWARE\TIMER -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\RTC -I..\HARDWARE\ADC -I..\HARDWARE\SRAM -I..\HARDWARE\InterTemperate -I..\FWLIB\STM32F4x7_ETH_Driver\inc -I..\MALLOC -I..\USMART -I..\HARDWARE -I..\ETHERCAT -I.\RTE\_LWIP -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS --omf_browse=..\obj\stm32f4xx_fsmc.crf ..\FWLIB\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_fsmc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMDeInit PROC
;;;128      */
;;;129    void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
000000  0081              LSLS     r1,r0,#2
;;;130    {
;;;131      /* Check the parameter */
;;;132      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;133      
;;;134      /* FSMC_Bank1_NORSRAM1 */
;;;135      if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
;;;136      {
;;;137        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
;;;138      }
;;;139      /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;140      else
;;;141      {   
;;;142        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000002  f1a141c0          SUB      r1,r1,#0x60000000
000006  b140              CBZ      r0,|L1.26|
000008  f24300d2          MOV      r0,#0x30d2
00000c  6008              STR      r0,[r1,#0]
                  |L1.14|
;;;143      }
;;;144      FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
00000e  f06f4070          MVN      r0,#0xf0000000
000012  6048              STR      r0,[r1,#4]
;;;145      FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
000014  f8c10104          STR      r0,[r1,#0x104]
;;;146    }
000018  4770              BX       lr
                  |L1.26|
00001a  f04f4220          MOV      r2,#0xa0000000        ;137
00001e  f24300db          MOV      r0,#0x30db            ;137
000022  6010              STR      r0,[r2,#0]            ;137
000024  e7f3              B        |L1.14|
;;;147    
                          ENDP

                  FSMC_NORSRAMInit PROC
;;;155      */
;;;156    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000026  b510              PUSH     {r4,lr}
;;;157    { 
000028  e9d01201          LDRD     r1,r2,[r0,#4]
;;;158      /* Check the parameters */
;;;159      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
;;;160      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
;;;161      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
;;;162      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
;;;163      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
;;;164      assert_param(IS_FSMC_ASYNWAIT(FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait));
;;;165      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
;;;166      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
;;;167      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
;;;168      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
;;;169      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
;;;170      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
;;;171      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
;;;172      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
;;;173      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
;;;174      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
;;;175      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;176      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
;;;177      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
;;;178      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
;;;179      
;;;180      /* Bank1 NOR/SRAM control register configuration */ 
;;;181      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
00002c  4311              ORRS     r1,r1,r2
00002e  e9d02303          LDRD     r2,r3,[r0,#0xc]
000032  431a              ORRS     r2,r2,r3
000034  4311              ORRS     r1,r1,r2
000036  6942              LDR      r2,[r0,#0x14]
000038  4311              ORRS     r1,r1,r2
00003a  6982              LDR      r2,[r0,#0x18]
00003c  4311              ORRS     r1,r1,r2
00003e  69c2              LDR      r2,[r0,#0x1c]
000040  4311              ORRS     r1,r1,r2
000042  6a02              LDR      r2,[r0,#0x20]
000044  4311              ORRS     r1,r1,r2
000046  6a42              LDR      r2,[r0,#0x24]
000048  4311              ORRS     r1,r1,r2
00004a  6a82              LDR      r2,[r0,#0x28]
00004c  4311              ORRS     r1,r1,r2
00004e  6ac2              LDR      r2,[r0,#0x2c]
000050  4311              ORRS     r1,r1,r2
000052  6b02              LDR      r2,[r0,#0x30]
000054  4311              ORRS     r1,r1,r2
000056  6802              LDR      r2,[r0,#0]
000058  0092              LSLS     r2,r2,#2
00005a  f1a242c0          SUB      r2,r2,#0x60000000
00005e  6011              STR      r1,[r2,#0]
;;;182                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;183                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;184                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;185                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;186                FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
;;;187                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;188                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;189                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;190                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;191                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;192                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;193                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;194      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
000060  6881              LDR      r1,[r0,#8]
000062  2908              CMP      r1,#8
000064  d107              BNE      |L1.118|
;;;195      {
;;;196        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
000066  6801              LDR      r1,[r0,#0]
000068  0089              LSLS     r1,r1,#2
00006a  f1a141c0          SUB      r1,r1,#0x60000000
00006e  680a              LDR      r2,[r1,#0]
000070  f0420240          ORR      r2,r2,#0x40
000074  600a              STR      r2,[r1,#0]
                  |L1.118|
;;;197      }
;;;198      /* Bank1 NOR/SRAM timing register configuration */
;;;199      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
000076  6b41              LDR      r1,[r0,#0x34]
000078  e9d12300          LDRD     r2,r3,[r1,#0]
00007c  ea421203          ORR      r2,r2,r3,LSL #4
000080  688b              LDR      r3,[r1,#8]
000082  898c              LDRH     r4,[r1,#0xc]
000084  021b              LSLS     r3,r3,#8
000086  ea434304          ORR      r3,r3,r4,LSL #16
00008a  431a              ORRS     r2,r2,r3
00008c  8a0b              LDRH     r3,[r1,#0x10]
00008e  ea425203          ORR      r2,r2,r3,LSL #20
000092  7d0b              LDRB     r3,[r1,#0x14]
000094  6989              LDR      r1,[r1,#0x18]
000096  ea426203          ORR      r2,r2,r3,LSL #24
00009a  430a              ORRS     r2,r2,r1
00009c  6801              LDR      r1,[r0,#0]
00009e  0089              LSLS     r1,r1,#2
0000a0  f1a141c0          SUB      r1,r1,#0x60000000
0000a4  604a              STR      r2,[r1,#4]
;;;200                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;201                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;202                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;203                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;204                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;205                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;206                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;207                
;;;208        
;;;209      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;210      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
0000a6  6ac1              LDR      r1,[r0,#0x2c]
0000a8  f5b14f80          CMP      r1,#0x4000
0000ac  d008              BEQ      |L1.192|
;;;211      {
;;;212        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
;;;213        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
;;;214        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
;;;215        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
;;;216        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
;;;217        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
;;;218        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
;;;219                  (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;220                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;221                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;222                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;223                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;224                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;225      }
;;;226      else
;;;227      {
;;;228        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
0000ae  6800              LDR      r0,[r0,#0]
0000b0  f06f4170          MVN      r1,#0xf0000000
0000b4  0080              LSLS     r0,r0,#2
0000b6  f1a040c0          SUB      r0,r0,#0x60000000
0000ba  f8c01104          STR      r1,[r0,#0x104]
;;;229      }
;;;230    }
0000be  bd10              POP      {r4,pc}
                  |L1.192|
0000c0  6b81              LDR      r1,[r0,#0x38]         ;218
0000c2  e9d12300          LDRD     r2,r3,[r1,#0]         ;218
0000c6  ea421203          ORR      r2,r2,r3,LSL #4       ;218
0000ca  688b              LDR      r3,[r1,#8]            ;218
0000cc  8a0c              LDRH     r4,[r1,#0x10]         ;218
0000ce  021b              LSLS     r3,r3,#8              ;218
0000d0  ea435304          ORR      r3,r3,r4,LSL #20      ;218
0000d4  431a              ORRS     r2,r2,r3              ;218
0000d6  7d0b              LDRB     r3,[r1,#0x14]         ;218
0000d8  6989              LDR      r1,[r1,#0x18]         ;218
0000da  ea426203          ORR      r2,r2,r3,LSL #24      ;218
0000de  6800              LDR      r0,[r0,#0]            ;218
0000e0  430a              ORRS     r2,r2,r1              ;218
0000e2  0080              LSLS     r0,r0,#2              ;218
0000e4  f1a040c0          SUB      r0,r0,#0x60000000     ;218
0000e8  f8c02104          STR      r2,[r0,#0x104]        ;218
0000ec  bd10              POP      {r4,pc}
;;;231    
                          ENDP

                  FSMC_NORSRAMStructInit PROC
;;;237      */
;;;238    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
0000ee  2100              MOVS     r1,#0
;;;239    {  
;;;240      /* Reset NOR/SRAM Init structure parameters values */
;;;241      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
;;;242      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
0000f0  2202              MOVS     r2,#2
0000f2  e9c01200          STRD     r1,r2,[r0,#0]
;;;243      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
;;;244      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
0000f6  6081              STR      r1,[r0,#8]
;;;245      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
0000f8  60c1              STR      r1,[r0,#0xc]
;;;246      FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
0000fa  6101              STR      r1,[r0,#0x10]
;;;247      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
0000fc  6141              STR      r1,[r0,#0x14]
;;;248      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
0000fe  6181              STR      r1,[r0,#0x18]
;;;249      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
;;;250      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000100  02d2              LSLS     r2,r2,#11
000102  61c1              STR      r1,[r0,#0x1c]
000104  e9c01208          STRD     r1,r2,[r0,#0x20]
;;;251      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
000108  0052              LSLS     r2,r2,#1
00010a  e9c0210a          STRD     r2,r1,[r0,#0x28]
;;;252      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
;;;253      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
;;;254      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct = (FSMC_NORSRAMTimingInitTypeDef*)&FSMC_DefaultTimingStruct;
00010e  6301              STR      r1,[r0,#0x30]
000110  49cb              LDR      r1,|L1.1088|
;;;255      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct = (FSMC_NORSRAMTimingInitTypeDef*)&FSMC_DefaultTimingStruct;
000112  6341              STR      r1,[r0,#0x34]
000114  6381              STR      r1,[r0,#0x38]
;;;256    }
000116  4770              BX       lr
;;;257    
                          ENDP

                  FSMC_NORSRAMCmd PROC
;;;268      */
;;;269    void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000118  0080              LSLS     r0,r0,#2
;;;270    {
;;;271      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;272      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;273      
;;;274      if (NewState != DISABLE)
;;;275      {
;;;276        /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
;;;277        FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
00011a  f1a040c0          SUB      r0,r0,#0x60000000
00011e  2900              CMP      r1,#0                 ;274
;;;278      }
;;;279      else
;;;280      {
;;;281        /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
;;;282        FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
000120  6801              LDR      r1,[r0,#0]
000122  d002              BEQ      |L1.298|
000124  f0410101          ORR      r1,r1,#1              ;277
000128  e001              B        |L1.302|
                  |L1.298|
00012a  4ac6              LDR      r2,|L1.1092|
00012c  4011              ANDS     r1,r1,r2
                  |L1.302|
00012e  6001              STR      r1,[r0,#0]            ;277
;;;283      }
;;;284    }
000130  4770              BX       lr
;;;285    /**
                          ENDP

                  FSMC_NANDDeInit PROC
;;;341      */
;;;342    void FSMC_NANDDeInit(uint32_t FSMC_Bank)
000132  b510              PUSH     {r4,lr}
;;;343    {
;;;344      /* Check the parameter */
;;;345      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;346      
;;;347      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;348      {
;;;349        /* Set the FSMC_Bank2 registers to their reset values */
;;;350        FSMC_Bank2->PCR2 = 0x00000018;
000134  2318              MOVS     r3,#0x18
;;;351        FSMC_Bank2->SR2 = 0x00000040;
000136  2440              MOVS     r4,#0x40
000138  f04f4120          MOV      r1,#0xa0000000        ;350
;;;352        FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
00013c  f04f32fc          MOV      r2,#0xfcfcfcfc
000140  2810              CMP      r0,#0x10              ;347
000142  d005              BEQ      |L1.336|
;;;353        FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
;;;354      }
;;;355      /* FSMC_Bank3_NAND */  
;;;356      else
;;;357      {
;;;358        /* Set the FSMC_Bank3 registers to their reset values */
;;;359        FSMC_Bank3->PCR3 = 0x00000018;
000144  f8413f80          STR      r3,[r1,#0x80]!
;;;360        FSMC_Bank3->SR3 = 0x00000040;
000148  604c              STR      r4,[r1,#4]
;;;361        FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
00014a  608a              STR      r2,[r1,#8]
;;;362        FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
00014c  60ca              STR      r2,[r1,#0xc]
;;;363      }  
;;;364    }
00014e  bd10              POP      {r4,pc}
                  |L1.336|
000150  660b              STR      r3,[r1,#0x60]         ;350
000152  664c              STR      r4,[r1,#0x64]         ;351
000154  668a              STR      r2,[r1,#0x68]         ;352
000156  66ca              STR      r2,[r1,#0x6c]         ;353
000158  bd10              POP      {r4,pc}
;;;365    
                          ENDP

                  FSMC_NANDInit PROC
;;;372      */
;;;373    void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
00015a  b530              PUSH     {r4,r5,lr}
;;;374    {
00015c  e9d01201          LDRD     r1,r2,[r0,#4]
;;;375      uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
;;;376        
;;;377      /* Check the parameters */
;;;378      assert_param( IS_FSMC_NAND_BANK(FSMC_NANDInitStruct->FSMC_Bank));
;;;379      assert_param( IS_FSMC_WAIT_FEATURE(FSMC_NANDInitStruct->FSMC_Waitfeature));
;;;380      assert_param( IS_FSMC_MEMORY_WIDTH(FSMC_NANDInitStruct->FSMC_MemoryDataWidth));
;;;381      assert_param( IS_FSMC_ECC_STATE(FSMC_NANDInitStruct->FSMC_ECC));
;;;382      assert_param( IS_FSMC_ECCPAGE_SIZE(FSMC_NANDInitStruct->FSMC_ECCPageSize));
;;;383      assert_param( IS_FSMC_TCLR_TIME(FSMC_NANDInitStruct->FSMC_TCLRSetupTime));
;;;384      assert_param( IS_FSMC_TAR_TIME(FSMC_NANDInitStruct->FSMC_TARSetupTime));
;;;385      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;386      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;387      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;388      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;389      assert_param(IS_FSMC_SETUP_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;390      assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;391      assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;392      assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;393      
;;;394      /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
;;;395      tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
000160  4311              ORRS     r1,r1,r2
000162  e9d02303          LDRD     r2,r3,[r0,#0xc]
000166  431a              ORRS     r2,r2,r3
000168  4311              ORRS     r1,r1,r2
00016a  6942              LDR      r2,[r0,#0x14]
00016c  ea412142          ORR      r1,r1,r2,LSL #9
000170  6982              LDR      r2,[r0,#0x18]
000172  ea413142          ORR      r1,r1,r2,LSL #13
000176  f0410408          ORR      r4,r1,#8
;;;396                PCR_MEMORYTYPE_NAND |
;;;397                FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
;;;398                FSMC_NANDInitStruct->FSMC_ECC |
;;;399                FSMC_NANDInitStruct->FSMC_ECCPageSize |
;;;400                (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
;;;401                (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
;;;402                
;;;403      /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
;;;404      tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
00017a  69c1              LDR      r1,[r0,#0x1c]
00017c  e9d12300          LDRD     r2,r3,[r1,#0]
000180  ea422203          ORR      r2,r2,r3,LSL #8
000184  890b              LDRH     r3,[r1,#8]
000186  7b09              LDRB     r1,[r1,#0xc]
000188  041b              LSLS     r3,r3,#16
00018a  ea436101          ORR      r1,r3,r1,LSL #24
00018e  430a              ORRS     r2,r2,r1
;;;405                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;406                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;407                (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;408                
;;;409      /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;410      tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
000190  6a01              LDR      r1,[r0,#0x20]
000192  e9d13500          LDRD     r3,r5,[r1,#0]
000196  ea432305          ORR      r3,r3,r5,LSL #8
00019a  890d              LDRH     r5,[r1,#8]
00019c  7b09              LDRB     r1,[r1,#0xc]
00019e  042d              LSLS     r5,r5,#16
0001a0  ea456101          ORR      r1,r5,r1,LSL #24
0001a4  430b              ORRS     r3,r3,r1
;;;411                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;412                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;413                (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
;;;414      
;;;415      if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
;;;416      {
;;;417        /* FSMC_Bank2_NAND registers configuration */
;;;418        FSMC_Bank2->PCR2 = tmppcr;
0001a6  6801              LDR      r1,[r0,#0]
0001a8  f04f4020          MOV      r0,#0xa0000000
0001ac  2910              CMP      r1,#0x10              ;415
0001ae  d004              BEQ      |L1.442|
;;;419        FSMC_Bank2->PMEM2 = tmppmem;
;;;420        FSMC_Bank2->PATT2 = tmppatt;
;;;421      }
;;;422      else
;;;423      {
;;;424        /* FSMC_Bank3_NAND registers configuration */
;;;425        FSMC_Bank3->PCR3 = tmppcr;
0001b0  f8404f80          STR      r4,[r0,#0x80]!
;;;426        FSMC_Bank3->PMEM3 = tmppmem;
0001b4  6082              STR      r2,[r0,#8]
;;;427        FSMC_Bank3->PATT3 = tmppatt;
0001b6  60c3              STR      r3,[r0,#0xc]
;;;428      }
;;;429    }
0001b8  bd30              POP      {r4,r5,pc}
                  |L1.442|
0001ba  6604              STR      r4,[r0,#0x60]         ;418
0001bc  6682              STR      r2,[r0,#0x68]         ;419
0001be  66c3              STR      r3,[r0,#0x6c]         ;420
0001c0  bd30              POP      {r4,r5,pc}
;;;430    
                          ENDP

                  FSMC_NANDStructInit PROC
;;;437      */
;;;438    void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
0001c2  2110              MOVS     r1,#0x10
;;;439    { 
;;;440      /* Reset NAND Init structure parameters values */
;;;441      FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
;;;442      FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
0001c4  6001              STR      r1,[r0,#0]
0001c6  2100              MOVS     r1,#0
;;;443      FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
0001c8  6041              STR      r1,[r0,#4]
;;;444      FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
0001ca  6081              STR      r1,[r0,#8]
;;;445      FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
0001cc  60c1              STR      r1,[r0,#0xc]
;;;446      FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
0001ce  6101              STR      r1,[r0,#0x10]
;;;447      FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
0001d0  6141              STR      r1,[r0,#0x14]
;;;448      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
0001d2  6181              STR      r1,[r0,#0x18]
0001d4  69c2              LDR      r2,[r0,#0x1c]
0001d6  21fc              MOVS     r1,#0xfc
;;;449      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
0001d8  6011              STR      r1,[r2,#0]
0001da  69c2              LDR      r2,[r0,#0x1c]
;;;450      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
0001dc  6051              STR      r1,[r2,#4]
0001de  69c2              LDR      r2,[r0,#0x1c]
;;;451      FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
0001e0  6091              STR      r1,[r2,#8]
0001e2  69c2              LDR      r2,[r0,#0x1c]
;;;452      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
0001e4  60d1              STR      r1,[r2,#0xc]
0001e6  6a02              LDR      r2,[r0,#0x20]
;;;453      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
0001e8  6011              STR      r1,[r2,#0]
0001ea  6a02              LDR      r2,[r0,#0x20]
;;;454      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
0001ec  6051              STR      r1,[r2,#4]
0001ee  6a02              LDR      r2,[r0,#0x20]
;;;455      FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
0001f0  6091              STR      r1,[r2,#8]
0001f2  6a00              LDR      r0,[r0,#0x20]
0001f4  60c1              STR      r1,[r0,#0xc]
;;;456    }
0001f6  4770              BX       lr
;;;457    
                          ENDP

                  FSMC_NANDCmd PROC
;;;466      */
;;;467    void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
0001f8  f04f4220          MOV      r2,#0xa0000000
;;;468    {
0001fc  b151              CBZ      r1,|L1.532|
;;;469      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;470      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;471      
;;;472      if (NewState != DISABLE)
;;;473      {
;;;474        /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
;;;475        if(FSMC_Bank == FSMC_Bank2_NAND)
0001fe  2810              CMP      r0,#0x10
000200  d004              BEQ      |L1.524|
;;;476        {
;;;477          FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
;;;478        }
;;;479        else
;;;480        {
;;;481          FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
000202  f8520f80          LDR      r0,[r2,#0x80]!
000206  f0400004          ORR      r0,r0,#4
00020a  e00a              B        |L1.546|
                  |L1.524|
00020c  6e10              LDR      r0,[r2,#0x60]         ;477
00020e  f0400004          ORR      r0,r0,#4              ;477
000212  e00a              B        |L1.554|
                  |L1.532|
;;;482        }
;;;483      }
;;;484      else
;;;485      {
;;;486        /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
;;;487        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;488        {
;;;489          FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
000214  498b              LDR      r1,|L1.1092|
000216  1ec9              SUBS     r1,r1,#3
000218  2810              CMP      r0,#0x10              ;487
00021a  d004              BEQ      |L1.550|
;;;490        }
;;;491        else
;;;492        {
;;;493          FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
00021c  f8520f80          LDR      r0,[r2,#0x80]!
000220  4008              ANDS     r0,r0,r1
                  |L1.546|
000222  6010              STR      r0,[r2,#0]            ;481
;;;494        }
;;;495      }
;;;496    }
000224  4770              BX       lr
                  |L1.550|
000226  6e10              LDR      r0,[r2,#0x60]         ;489
000228  4008              ANDS     r0,r0,r1              ;489
                  |L1.554|
00022a  6610              STR      r0,[r2,#0x60]         ;477
00022c  4770              BX       lr
;;;497    /**
                          ENDP

                  FSMC_NANDECCCmd PROC
;;;506      */
;;;507    void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
00022e  f04f4220          MOV      r2,#0xa0000000
;;;508    {
000232  b151              CBZ      r1,|L1.586|
;;;509      assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
;;;510      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;511      
;;;512      if (NewState != DISABLE)
;;;513      {
;;;514        /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
;;;515        if(FSMC_Bank == FSMC_Bank2_NAND)
000234  2810              CMP      r0,#0x10
000236  d004              BEQ      |L1.578|
;;;516        {
;;;517          FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
;;;518        }
;;;519        else
;;;520        {
;;;521          FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
000238  f8520f80          LDR      r0,[r2,#0x80]!
00023c  f0400040          ORR      r0,r0,#0x40
000240  e00a              B        |L1.600|
                  |L1.578|
000242  6e10              LDR      r0,[r2,#0x60]         ;517
000244  f0400040          ORR      r0,r0,#0x40           ;517
000248  e00a              B        |L1.608|
                  |L1.586|
;;;522        }
;;;523      }
;;;524      else
;;;525      {
;;;526        /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
;;;527        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;528        {
;;;529          FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
00024a  497e              LDR      r1,|L1.1092|
00024c  393f              SUBS     r1,r1,#0x3f
00024e  2810              CMP      r0,#0x10              ;527
000250  d004              BEQ      |L1.604|
;;;530        }
;;;531        else
;;;532        {
;;;533          FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
000252  f8520f80          LDR      r0,[r2,#0x80]!
000256  4008              ANDS     r0,r0,r1
                  |L1.600|
000258  6010              STR      r0,[r2,#0]            ;521
;;;534        }
;;;535      }
;;;536    }
00025a  4770              BX       lr
                  |L1.604|
00025c  6e10              LDR      r0,[r2,#0x60]         ;529
00025e  4008              ANDS     r0,r0,r1              ;529
                  |L1.608|
000260  6610              STR      r0,[r2,#0x60]         ;517
000262  4770              BX       lr
;;;537    
                          ENDP

                  FSMC_GetECC PROC
;;;545      */
;;;546    uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
000264  f04f4120          MOV      r1,#0xa0000000
;;;547    {
;;;548      uint32_t eccval = 0x00000000;
;;;549      
;;;550      if(FSMC_Bank == FSMC_Bank2_NAND)
000268  2810              CMP      r0,#0x10
00026a  d002              BEQ      |L1.626|
;;;551      {
;;;552        /* Get the ECCR2 register value */
;;;553        eccval = FSMC_Bank2->ECCR2;
;;;554      }
;;;555      else
;;;556      {
;;;557        /* Get the ECCR3 register value */
;;;558        eccval = FSMC_Bank3->ECCR3;
00026c  f8d10094          LDR      r0,[r1,#0x94]
;;;559      }
;;;560      /* Return the error correction code value */
;;;561      return(eccval);
;;;562    }
000270  4770              BX       lr
                  |L1.626|
000272  6f48              LDR      r0,[r1,#0x74]         ;553
000274  4770              BX       lr
;;;563    /**
                          ENDP

                  FSMC_PCCARDDeInit PROC
;;;609      */
;;;610    void FSMC_PCCARDDeInit(void)
000276  f04f4020          MOV      r0,#0xa0000000
;;;611    {
;;;612      /* Set the FSMC_Bank4 registers to their reset values */
;;;613      FSMC_Bank4->PCR4 = 0x00000018; 
00027a  2118              MOVS     r1,#0x18
00027c  f8401fa0          STR      r1,[r0,#0xa0]!
;;;614      FSMC_Bank4->SR4 = 0x00000000;	
000280  2100              MOVS     r1,#0
000282  6041              STR      r1,[r0,#4]
;;;615      FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
000284  f04f31fc          MOV      r1,#0xfcfcfcfc
000288  6081              STR      r1,[r0,#8]
;;;616      FSMC_Bank4->PATT4 = 0xFCFCFCFC;
00028a  60c1              STR      r1,[r0,#0xc]
;;;617      FSMC_Bank4->PIO4 = 0xFCFCFCFC;
00028c  6101              STR      r1,[r0,#0x10]
;;;618    }
00028e  4770              BX       lr
;;;619    
                          ENDP

                  FSMC_PCCARDInit PROC
;;;626      */
;;;627    void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
000290  b510              PUSH     {r4,lr}
;;;628    {
000292  e9d01200          LDRD     r1,r2,[r0,#0]
;;;629      /* Check the parameters */
;;;630      assert_param(IS_FSMC_WAIT_FEATURE(FSMC_PCCARDInitStruct->FSMC_Waitfeature));
;;;631      assert_param(IS_FSMC_TCLR_TIME(FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime));
;;;632      assert_param(IS_FSMC_TAR_TIME(FSMC_PCCARDInitStruct->FSMC_TARSetupTime));
;;;633     
;;;634      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime));
;;;635      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime));
;;;636      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime));
;;;637      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime));
;;;638      
;;;639      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime));
;;;640      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
;;;641      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
;;;642      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
;;;643      assert_param(IS_FSMC_SETUP_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime));
;;;644      assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
;;;645      assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
;;;646      assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
;;;647      
;;;648      /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
;;;649      FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
000296  ea412142          ORR      r1,r1,r2,LSL #9
00029a  6882              LDR      r2,[r0,#8]
00029c  2310              MOVS     r3,#0x10
00029e  ea433242          ORR      r2,r3,r2,LSL #13
0002a2  4311              ORRS     r1,r1,r2
0002a4  f04f4220          MOV      r2,#0xa0000000
0002a8  f8421fa0          STR      r1,[r2,#0xa0]!
;;;650                         FSMC_MemoryDataWidth_16b |  
;;;651                         (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
;;;652                         (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
;;;653                
;;;654      /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
;;;655      FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
0002ac  68c1              LDR      r1,[r0,#0xc]
0002ae  e9d13400          LDRD     r3,r4,[r1,#0]
0002b2  ea432304          ORR      r3,r3,r4,LSL #8
0002b6  890c              LDRH     r4,[r1,#8]
0002b8  7b09              LDRB     r1,[r1,#0xc]
0002ba  0424              LSLS     r4,r4,#16
0002bc  ea446101          ORR      r1,r4,r1,LSL #24
0002c0  430b              ORRS     r3,r3,r1
0002c2  6093              STR      r3,[r2,#8]
;;;656                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;657                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;658                          (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
;;;659                
;;;660      /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
;;;661      FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
0002c4  6901              LDR      r1,[r0,#0x10]
0002c6  e9d13400          LDRD     r3,r4,[r1,#0]
0002ca  ea432304          ORR      r3,r3,r4,LSL #8
0002ce  890c              LDRH     r4,[r1,#8]
0002d0  7b09              LDRB     r1,[r1,#0xc]
0002d2  0424              LSLS     r4,r4,#16
0002d4  ea446101          ORR      r1,r4,r1,LSL #24
0002d8  430b              ORRS     r3,r3,r1
0002da  60d3              STR      r3,[r2,#0xc]
;;;662                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;663                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;664                          (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
;;;665                
;;;666      /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
;;;667      FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
0002dc  6940              LDR      r0,[r0,#0x14]
0002de  e9d01300          LDRD     r1,r3,[r0,#0]
0002e2  ea412103          ORR      r1,r1,r3,LSL #8
0002e6  8903              LDRH     r3,[r0,#8]
0002e8  7b00              LDRB     r0,[r0,#0xc]
0002ea  041b              LSLS     r3,r3,#16
0002ec  ea436000          ORR      r0,r3,r0,LSL #24
0002f0  4301              ORRS     r1,r1,r0
0002f2  6111              STR      r1,[r2,#0x10]
;;;668                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
;;;669                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
;;;670                         (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
;;;671    }
0002f4  bd10              POP      {r4,pc}
;;;672    
                          ENDP

                  FSMC_PCCARDStructInit PROC
;;;678      */
;;;679    void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
0002f6  2100              MOVS     r1,#0
;;;680    {
;;;681      /* Reset PCCARD Init structure parameters values */
;;;682      FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
;;;683      FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
0002f8  6001              STR      r1,[r0,#0]
;;;684      FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
0002fa  6041              STR      r1,[r0,#4]
;;;685      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
0002fc  6081              STR      r1,[r0,#8]
0002fe  68c2              LDR      r2,[r0,#0xc]
000300  21fc              MOVS     r1,#0xfc
;;;686      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000302  6011              STR      r1,[r2,#0]
000304  68c2              LDR      r2,[r0,#0xc]
;;;687      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000306  6051              STR      r1,[r2,#4]
000308  68c2              LDR      r2,[r0,#0xc]
;;;688      FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
00030a  6091              STR      r1,[r2,#8]
00030c  68c2              LDR      r2,[r0,#0xc]
;;;689      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00030e  60d1              STR      r1,[r2,#0xc]
000310  6902              LDR      r2,[r0,#0x10]
;;;690      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000312  6011              STR      r1,[r2,#0]
000314  6902              LDR      r2,[r0,#0x10]
;;;691      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000316  6051              STR      r1,[r2,#4]
000318  6902              LDR      r2,[r0,#0x10]
;;;692      FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
00031a  6091              STR      r1,[r2,#8]
00031c  6902              LDR      r2,[r0,#0x10]
;;;693      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
00031e  60d1              STR      r1,[r2,#0xc]
000320  6942              LDR      r2,[r0,#0x14]
;;;694      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
000322  6011              STR      r1,[r2,#0]
000324  6942              LDR      r2,[r0,#0x14]
;;;695      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
000326  6051              STR      r1,[r2,#4]
000328  6942              LDR      r2,[r0,#0x14]
;;;696      FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
00032a  6091              STR      r1,[r2,#8]
00032c  6940              LDR      r0,[r0,#0x14]
00032e  60c1              STR      r1,[r0,#0xc]
;;;697    }
000330  4770              BX       lr
;;;698    
                          ENDP

                  FSMC_PCCARDCmd PROC
;;;704      */
;;;705    void FSMC_PCCARDCmd(FunctionalState NewState)
000332  f04f4120          MOV      r1,#0xa0000000
;;;706    {
;;;707      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;708      
;;;709      if (NewState != DISABLE)
000336  2800              CMP      r0,#0
;;;710      {
;;;711        /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
;;;712        FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
;;;713      }
;;;714      else
;;;715      {
;;;716        /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
;;;717        FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
000338  f8510fa0          LDR      r0,[r1,#0xa0]!
00033c  d002              BEQ      |L1.836|
00033e  f0400004          ORR      r0,r0,#4              ;712
000342  e002              B        |L1.842|
                  |L1.836|
000344  4a3f              LDR      r2,|L1.1092|
000346  1ed2              SUBS     r2,r2,#3
000348  4010              ANDS     r0,r0,r2
                  |L1.842|
00034a  6008              STR      r0,[r1,#0]            ;712
;;;718      }
;;;719    }
00034c  4770              BX       lr
;;;720    /**
                          ENDP

                  FSMC_ITConfig PROC
;;;751      */
;;;752    void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
00034e  b510              PUSH     {r4,lr}
;;;753    {
;;;754      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;755      assert_param(IS_FSMC_IT(FSMC_IT));	
;;;756      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;757      
;;;758      if (NewState != DISABLE)
;;;759      {
;;;760        /* Enable the selected FSMC_Bank2 interrupts */
;;;761        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;762        {
;;;763          FSMC_Bank2->SR2 |= FSMC_IT;
;;;764        }
;;;765        /* Enable the selected FSMC_Bank3 interrupts */
;;;766        else if (FSMC_Bank == FSMC_Bank3_NAND)
000350  f44f7480          MOV      r4,#0x100
000354  f04f4320          MOV      r3,#0xa0000000        ;763
000358  b172              CBZ      r2,|L1.888|
00035a  2810              CMP      r0,#0x10              ;761
00035c  d004              BEQ      |L1.872|
00035e  42a0              CMP      r0,r4
000360  d105              BNE      |L1.878|
;;;767        {
;;;768          FSMC_Bank3->SR3 |= FSMC_IT;
000362  f8530f84          LDR      r0,[r3,#0x84]!
000366  e004              B        |L1.882|
                  |L1.872|
000368  6e58              LDR      r0,[r3,#0x64]         ;763
00036a  4308              ORRS     r0,r0,r1              ;763
00036c  e00d              B        |L1.906|
                  |L1.878|
;;;769        }
;;;770        /* Enable the selected FSMC_Bank4 interrupts */
;;;771        else
;;;772        {
;;;773          FSMC_Bank4->SR4 |= FSMC_IT;    
00036e  f8530fa4          LDR      r0,[r3,#0xa4]!
                  |L1.882|
000372  4308              ORRS     r0,r0,r1
                  |L1.884|
000374  6018              STR      r0,[r3,#0]
;;;774        }
;;;775      }
;;;776      else
;;;777      {
;;;778        /* Disable the selected FSMC_Bank2 interrupts */
;;;779        if(FSMC_Bank == FSMC_Bank2_NAND)
;;;780        {
;;;781          
;;;782          FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
;;;783        }
;;;784        /* Disable the selected FSMC_Bank3 interrupts */
;;;785        else if (FSMC_Bank == FSMC_Bank3_NAND)
;;;786        {
;;;787          FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
;;;788        }
;;;789        /* Disable the selected FSMC_Bank4 interrupts */
;;;790        else
;;;791        {
;;;792          FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
;;;793        }
;;;794      }
;;;795    }
000376  bd10              POP      {r4,pc}
                  |L1.888|
000378  2810              CMP      r0,#0x10              ;779
00037a  d004              BEQ      |L1.902|
00037c  42a0              CMP      r0,r4                 ;785
00037e  d106              BNE      |L1.910|
000380  f8530f84          LDR      r0,[r3,#0x84]!        ;787
000384  e005              B        |L1.914|
                  |L1.902|
000386  6e58              LDR      r0,[r3,#0x64]         ;782
000388  4388              BICS     r0,r0,r1              ;782
                  |L1.906|
00038a  6658              STR      r0,[r3,#0x64]         ;763
00038c  bd10              POP      {r4,pc}
                  |L1.910|
00038e  f8530fa4          LDR      r0,[r3,#0xa4]!        ;792
                  |L1.914|
000392  4388              BICS     r0,r0,r1              ;787
000394  e7ee              B        |L1.884|
;;;796    
                          ENDP

                  FSMC_GetFlagStatus PROC
;;;811      */
;;;812    FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
000396  4603              MOV      r3,r0
;;;813    {
;;;814      FlagStatus bitstatus = RESET;
000398  2000              MOVS     r0,#0
;;;815      uint32_t tmpsr = 0x00000000;
;;;816      
;;;817      /* Check the parameters */
;;;818      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;819      assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
;;;820      
;;;821      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;822      {
;;;823        tmpsr = FSMC_Bank2->SR2;
00039a  f04f4220          MOV      r2,#0xa0000000
00039e  2b10              CMP      r3,#0x10              ;821
0003a0  d008              BEQ      |L1.948|
;;;824      }  
;;;825      else if(FSMC_Bank == FSMC_Bank3_NAND)
0003a2  f5b37f80          CMP      r3,#0x100
0003a6  d007              BEQ      |L1.952|
;;;826      {
;;;827        tmpsr = FSMC_Bank3->SR3;
;;;828      }
;;;829      /* FSMC_Bank4_PCCARD*/
;;;830      else
;;;831      {
;;;832        tmpsr = FSMC_Bank4->SR4;
0003a8  f8d220a4          LDR      r2,[r2,#0xa4]
                  |L1.940|
;;;833      } 
;;;834      
;;;835      /* Get the flag status */
;;;836      if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
0003ac  420a              TST      r2,r1
0003ae  d000              BEQ      |L1.946|
;;;837      {
;;;838        bitstatus = SET;
0003b0  2001              MOVS     r0,#1
                  |L1.946|
;;;839      }
;;;840      else
;;;841      {
;;;842        bitstatus = RESET;
;;;843      }
;;;844      /* Return the flag status */
;;;845      return bitstatus;
;;;846    }
0003b2  4770              BX       lr
                  |L1.948|
0003b4  6e52              LDR      r2,[r2,#0x64]         ;823
0003b6  e7f9              B        |L1.940|
                  |L1.952|
0003b8  f8d22084          LDR      r2,[r2,#0x84]         ;827
0003bc  e7f6              B        |L1.940|
;;;847    
                          ENDP

                  FSMC_ClearFlag PROC
;;;861      */
;;;862    void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
0003be  f04f4220          MOV      r2,#0xa0000000
;;;863    {
;;;864     /* Check the parameters */
;;;865      assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
;;;866      assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
;;;867        
;;;868      if(FSMC_Bank == FSMC_Bank2_NAND)
0003c2  2810              CMP      r0,#0x10
0003c4  d007              BEQ      |L1.982|
;;;869      {
;;;870        FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
;;;871      }  
;;;872      else if(FSMC_Bank == FSMC_Bank3_NAND)
0003c6  f5b07f80          CMP      r0,#0x100
0003ca  d008              BEQ      |L1.990|
;;;873      {
;;;874        FSMC_Bank3->SR3 &= ~FSMC_FLAG;
;;;875      }
;;;876      /* FSMC_Bank4_PCCARD*/
;;;877      else
;;;878      {
;;;879        FSMC_Bank4->SR4 &= ~FSMC_FLAG;
0003cc  f8520fa4          LDR      r0,[r2,#0xa4]!
                  |L1.976|
0003d0  4388              BICS     r0,r0,r1
0003d2  6010              STR      r0,[r2,#0]
;;;880      }
;;;881    }
0003d4  4770              BX       lr
                  |L1.982|
0003d6  6e50              LDR      r0,[r2,#0x64]         ;870
0003d8  4388              BICS     r0,r0,r1              ;870
0003da  6650              STR      r0,[r2,#0x64]         ;870
0003dc  4770              BX       lr
                  |L1.990|
0003de  f8520f84          LDR      r0,[r2,#0x84]!        ;874
0003e2  e7f5              B        |L1.976|
;;;882    
                          ENDP

                  FSMC_GetITStatus PROC
;;;896      */
;;;897    ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
0003e4  4603              MOV      r3,r0
;;;898    {
;;;899      ITStatus bitstatus = RESET;
0003e6  2000              MOVS     r0,#0
;;;900      uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
;;;901      
;;;902      /* Check the parameters */
;;;903      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;904      assert_param(IS_FSMC_GET_IT(FSMC_IT));
;;;905      
;;;906      if(FSMC_Bank == FSMC_Bank2_NAND)
;;;907      {
;;;908        tmpsr = FSMC_Bank2->SR2;
0003e8  f04f4220          MOV      r2,#0xa0000000
0003ec  2b10              CMP      r3,#0x10              ;906
0003ee  d00c              BEQ      |L1.1034|
;;;909      }  
;;;910      else if(FSMC_Bank == FSMC_Bank3_NAND)
0003f0  f5b37f80          CMP      r3,#0x100
0003f4  d00b              BEQ      |L1.1038|
;;;911      {
;;;912        tmpsr = FSMC_Bank3->SR3;
;;;913      }
;;;914      /* FSMC_Bank4_PCCARD*/
;;;915      else
;;;916      {
;;;917        tmpsr = FSMC_Bank4->SR4;
0003f6  f8d220a4          LDR      r2,[r2,#0xa4]
                  |L1.1018|
;;;918      } 
;;;919      
;;;920      itstatus = tmpsr & FSMC_IT;
0003fa  420a              TST      r2,r1
;;;921      
;;;922      itenable = tmpsr & (FSMC_IT >> 3);
0003fc  ea0201d1          AND      r1,r2,r1,LSR #3
;;;923      if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
000400  d002              BEQ      |L1.1032|
000402  2900              CMP      r1,#0
000404  d000              BEQ      |L1.1032|
;;;924      {
;;;925        bitstatus = SET;
000406  2001              MOVS     r0,#1
                  |L1.1032|
;;;926      }
;;;927      else
;;;928      {
;;;929        bitstatus = RESET;
;;;930      }
;;;931      return bitstatus; 
;;;932    }
000408  4770              BX       lr
                  |L1.1034|
00040a  6e52              LDR      r2,[r2,#0x64]         ;908
00040c  e7f5              B        |L1.1018|
                  |L1.1038|
00040e  f8d22084          LDR      r2,[r2,#0x84]         ;912
000412  e7f2              B        |L1.1018|
;;;933    
                          ENDP

                  FSMC_ClearITPendingBit PROC
;;;947      */
;;;948    void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
000414  f04f4220          MOV      r2,#0xa0000000
;;;949    {
;;;950      /* Check the parameters */
;;;951      assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
;;;952      assert_param(IS_FSMC_IT(FSMC_IT));
;;;953        
;;;954      if(FSMC_Bank == FSMC_Bank2_NAND)
000418  2810              CMP      r0,#0x10
00041a  d008              BEQ      |L1.1070|
;;;955      {
;;;956        FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
;;;957      }  
;;;958      else if(FSMC_Bank == FSMC_Bank3_NAND)
00041c  f5b07f80          CMP      r0,#0x100
000420  d00a              BEQ      |L1.1080|
;;;959      {
;;;960        FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
;;;961      }
;;;962      /* FSMC_Bank4_PCCARD*/
;;;963      else
;;;964      {
;;;965        FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
000422  f8520fa4          LDR      r0,[r2,#0xa4]!
                  |L1.1062|
000426  ea2000d1          BIC      r0,r0,r1,LSR #3
00042a  6010              STR      r0,[r2,#0]
;;;966      }
;;;967    }
00042c  4770              BX       lr
                  |L1.1070|
00042e  6e50              LDR      r0,[r2,#0x64]         ;956
000430  ea2000d1          BIC      r0,r0,r1,LSR #3       ;956
000434  6650              STR      r0,[r2,#0x64]         ;956
000436  4770              BX       lr
                  |L1.1080|
000438  f8520f84          LDR      r0,[r2,#0x84]!        ;960
00043c  e7f3              B        |L1.1062|
;;;968    
                          ENDP

00043e  0000              DCW      0x0000
                  |L1.1088|
                          DCD      ||.constdata||
                  |L1.1092|
                          DCD      0x000ffffe

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  FSMC_DefaultTimingStruct
                          DCD      0x0000000f
                          DCD      0x0000000f
                          DCD      0x000000ff
                          DCD      0x0000000f
                          DCD      0x0000000f
                          DCD      0x0000000f
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\STM32F4xx_StdPeriph_Driver\\src\\stm32f4xx_fsmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_fsmc_c_13019877____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___16_stm32f4xx_fsmc_c_13019877____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_fsmc_c_13019877____REVSH|
#line 144
|__asm___16_stm32f4xx_fsmc_c_13019877____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
