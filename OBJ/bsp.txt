; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\bsp.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\bsp.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\FWLIB\STM32F4xx_StdPeriph_Driver\inc -I..\USER -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\ETHERNET -I..\HARDWARE\TIMER -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\RTC -I..\HARDWARE\ADC -I..\HARDWARE\SRAM -I..\HARDWARE\InterTemperate -I..\FWLIB\STM32F4x7_ETH_Driver\inc -I..\MALLOC -I..\USMART -I..\HARDWARE -I..\ETHERCAT -I.\RTE\_LWIP -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS --omf_browse=..\obj\bsp.crf ..\HARDWARE\bsp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ST_A1 PROC
;;;20     
;;;21     uint8_t ST_A1(void) {if ((GPIOE->IDR & GPIO_Pin_5) == GPIO_Pin_5) return 1; else return 0;}
000000  4873              LDR      r0,|L1.464|
000002  6900              LDR      r0,[r0,#0x10]
000004  0680              LSLS     r0,r0,#26
000006  d501              BPL      |L1.12|
000008  2001              MOVS     r0,#1
00000a  4770              BX       lr
                  |L1.12|
00000c  2000              MOVS     r0,#0
00000e  4770              BX       lr
;;;22     uint8_t ST_A2(void) {if ((GPIOE->IDR & GPIO_Pin_6) == GPIO_Pin_6) return 1; else return 0;}
                          ENDP

                  ST_A2 PROC
000010  486f              LDR      r0,|L1.464|
000012  6900              LDR      r0,[r0,#0x10]
000014  0640              LSLS     r0,r0,#25
000016  d501              BPL      |L1.28|
000018  2001              MOVS     r0,#1
00001a  4770              BX       lr
                  |L1.28|
00001c  2000              MOVS     r0,#0
00001e  4770              BX       lr
;;;23     
                          ENDP

                  Get_Syn_cmd PROC
;;;24     uint8_t Get_Syn_cmd(void) {if ((GPIOA->IDR & GPIO_Pin_11) == GPIO_Pin_11) return 1; else return 0;}
000020  486c              LDR      r0,|L1.468|
000022  6900              LDR      r0,[r0,#0x10]
000024  0500              LSLS     r0,r0,#20
000026  d501              BPL      |L1.44|
000028  2001              MOVS     r0,#1
00002a  4770              BX       lr
                  |L1.44|
00002c  2000              MOVS     r0,#0
00002e  4770              BX       lr
;;;25     
                          ENDP

                  Set_Syn_answer PROC
;;;26     void Set_Syn_answer(uint8_t an)
000030  4968              LDR      r1,|L1.468|
;;;27     {
;;;28     	if (an == 0)
;;;29     	{
;;;30     		GPIOA->BSRRH = GPIO_Pin_8; 
000032  f44f7280          MOV      r2,#0x100
000036  b108              CBZ      r0,|L1.60|
;;;31     	}
;;;32     	else 
;;;33     	{
;;;34     		GPIOA->BSRRL = GPIO_Pin_8; 
000038  830a              STRH     r2,[r1,#0x18]
;;;35     	}	
;;;36     }
00003a  4770              BX       lr
                  |L1.60|
00003c  834a              STRH     r2,[r1,#0x1a]         ;30
00003e  4770              BX       lr
;;;37     void bsp_Init(void)
                          ENDP

                  bsp_LedOff PROC
;;;139    */
;;;140    void bsp_LedOff(uint8_t _no)
000040  1e40              SUBS     r0,r0,#1
;;;141    {
;;;142    	_no--;
;;;143    
;;;144    	if (_no == 0)
;;;145    	{
;;;146    		GPIO_PORT_LED1->BSRRH = GPIO_PIN_LED1;
000042  4965              LDR      r1,|L1.472|
000044  f01000ff          ANDS     r0,r0,#0xff           ;142
000048  d004              BEQ      |L1.84|
;;;147    	}
;;;148    	else if (_no == 1)
00004a  2801              CMP      r0,#1
00004c  d101              BNE      |L1.82|
;;;149    	{
;;;150    		GPIO_PORT_LED2->BSRRH = GPIO_PIN_LED2;
00004e  2080              MOVS     r0,#0x80
                  |L1.80|
000050  8008              STRH     r0,[r1,#0]            ;146
                  |L1.82|
;;;151    	}
;;;152    }
000052  4770              BX       lr
                  |L1.84|
000054  2040              MOVS     r0,#0x40              ;146
000056  e7fb              B        |L1.80|
;;;153    
                          ENDP

                  bsp_InitLed PROC
;;;59     */
;;;60     void bsp_InitLed(void)
000058  e92d47fc          PUSH     {r2-r10,lr}
;;;61     {
;;;62     	GPIO_InitTypeDef GPIO_InitStructure;
;;;63     
;;;64     	/* 打开GPIO时钟 */
;;;65     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
00005c  2101              MOVS     r1,#1
00005e  2040              MOVS     r0,#0x40
000060  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;66     
;;;67     	bsp_LedOff(1);
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       bsp_LedOff
;;;68     	bsp_LedOff(2);
00006a  2002              MOVS     r0,#2
00006c  f7fffffe          BL       bsp_LedOff
;;;69     
;;;70     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
000070  2501              MOVS     r5,#1
000072  f88d5004          STRB     r5,[sp,#4]
;;;71     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000076  2400              MOVS     r4,#0
;;;72     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
;;;73     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
;;;74     
;;;75     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED1;
;;;76     	GPIO_Init(GPIO_PORT_LED1, &GPIO_InitStructure);
000078  f8df915c          LDR      r9,|L1.472|
00007c  f88d4006          STRB     r4,[sp,#6]            ;71
000080  f88d4007          STRB     r4,[sp,#7]            ;72
000084  2703              MOVS     r7,#3                 ;73
000086  2640              MOVS     r6,#0x40              ;75
000088  f1a9091a          SUB      r9,r9,#0x1a
00008c  f88d7005          STRB     r7,[sp,#5]            ;73
000090  4669              MOV      r1,sp
000092  4648              MOV      r0,r9
000094  9600              STR      r6,[sp,#0]
000096  f7fffffe          BL       GPIO_Init
;;;77     
;;;78     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED2;
00009a  2080              MOVS     r0,#0x80
;;;79     	GPIO_Init(GPIO_PORT_LED2, &GPIO_InitStructure);
00009c  9000              STR      r0,[sp,#0]
00009e  4669              MOV      r1,sp
0000a0  4648              MOV      r0,r9
0000a2  f7fffffe          BL       GPIO_Init
;;;80     	
;;;81       // PG8 for reset internal logic of FPGA
;;;82     	GPIO_SetBits(GPIOG, GPIO_Pin_8);
0000a6  f44f7880          MOV      r8,#0x100
0000aa  4641              MOV      r1,r8
0000ac  4648              MOV      r0,r9
0000ae  f7fffffe          BL       GPIO_SetBits
;;;83     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
;;;84     	GPIO_Init(GPIOG, &GPIO_InitStructure);
0000b2  4669              MOV      r1,sp
0000b4  4648              MOV      r0,r9
0000b6  f8cd8000          STR      r8,[sp,#0]
0000ba  f7fffffe          BL       GPIO_Init
;;;85     	
;;;86     	// PE6 for FPGA PROGRAM
;;;87     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
0000be  2101              MOVS     r1,#1
0000c0  2010              MOVS     r0,#0x10
0000c2  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;88     	GPIO_SetBits(GPIOE, GPIO_Pin_6);
0000c6  f8df8108          LDR      r8,|L1.464|
0000ca  2140              MOVS     r1,#0x40
0000cc  4640              MOV      r0,r8
0000ce  f7fffffe          BL       GPIO_SetBits
;;;89     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;90     	GPIO_Init(GPIOE, &GPIO_InitStructure);	
0000d2  4669              MOV      r1,sp
0000d4  4640              MOV      r0,r8
0000d6  9600              STR      r6,[sp,#0]
0000d8  f7fffffe          BL       GPIO_Init
;;;91     	
;;;92     	// PE2,3 use for input as RESET_SYS0/1, PE4,5 use for input as ST-A1/A2
;;;93     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
0000dc  f88d4004          STRB     r4,[sp,#4]
;;;94     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	
0000e0  f88d4006          STRB     r4,[sp,#6]
;;;95     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
;;;96     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	
;;;97     
;;;98     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
0000e4  2030              MOVS     r0,#0x30
0000e6  f88d4007          STRB     r4,[sp,#7]            ;95
0000ea  2602              MOVS     r6,#2                 ;96
;;;99     	GPIO_Init(GPIOE, &GPIO_InitStructure);
0000ec  9000              STR      r0,[sp,#0]
0000ee  f88d6005          STRB     r6,[sp,#5]            ;96
0000f2  4669              MOV      r1,sp
0000f4  4640              MOV      r0,r8
0000f6  f7fffffe          BL       GPIO_Init
;;;100    
;;;101    	// PB15,PB11 for FPGA INIT, DONE
;;;102      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
0000fa  2101              MOVS     r1,#1
0000fc  2002              MOVS     r0,#2
0000fe  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;103    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;		/* 设为输入口 */	
000102  f88d4004          STRB     r4,[sp,#4]
;;;104      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_15;
000106  f44f4008          MOV      r0,#0x8800
;;;105      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00010a  f88d4006          STRB     r4,[sp,#6]
00010e  9000              STR      r0,[sp,#0]
;;;106    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000110  f88d4007          STRB     r4,[sp,#7]
;;;107      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000114  f88d6005          STRB     r6,[sp,#5]
;;;108      GPIO_Init(GPIOB, &GPIO_InitStructure);
000118  4669              MOV      r1,sp
00011a  4830              LDR      r0,|L1.476|
00011c  f7fffffe          BL       GPIO_Init
;;;109    
;;;110    	// PF6,7,8,9 for slot number
;;;111      RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
000120  2101              MOVS     r1,#1
000122  2020              MOVS     r0,#0x20
000124  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;112    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;		/* 设为输入口 */	
000128  f88d4004          STRB     r4,[sp,#4]
;;;113      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
00012c  f44f7070          MOV      r0,#0x3c0
;;;114      GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000130  f88d4006          STRB     r4,[sp,#6]
000134  9000              STR      r0,[sp,#0]
;;;115    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000136  f88d4007          STRB     r4,[sp,#7]
;;;116      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00013a  f88d6005          STRB     r6,[sp,#5]
;;;117      GPIO_Init(GPIOF, &GPIO_InitStructure);	
00013e  4669              MOV      r1,sp
000140  4827              LDR      r0,|L1.480|
000142  f7fffffe          BL       GPIO_Init
;;;118    	
;;;119    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
000146  2101              MOVS     r1,#1
000148  2004              MOVS     r0,#4
00014a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;120    
;;;121    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		// 设为输出口 
00014e  f88d5004          STRB     r5,[sp,#4]
;;;122    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		// 设为推挽模式 
000152  f88d4006          STRB     r4,[sp,#6]
;;;123    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	// 上拉电阻使能 
;;;124    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	// IO口最大速度 
;;;125    
;;;126    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
;;;127    	GPIO_Init(GPIOC, &GPIO_InitStructure);
000156  4c23              LDR      r4,|L1.484|
000158  f88d5007          STRB     r5,[sp,#7]            ;123
00015c  f88d7005          STRB     r7,[sp,#5]            ;124
000160  4669              MOV      r1,sp
000162  4620              MOV      r0,r4
000164  9500              STR      r5,[sp,#0]
000166  f7fffffe          BL       GPIO_Init
;;;128      GPIO_SetBits(GPIOC, GPIO_Pin_0);
00016a  2101              MOVS     r1,#1
00016c  4620              MOV      r0,r4
00016e  f7fffffe          BL       GPIO_SetBits
;;;129    
;;;130    }
000172  e8bd87fc          POP      {r2-r10,pc}
;;;131    
                          ENDP

                  bsp_Init PROC
;;;36     }
;;;37     void bsp_Init(void)
000176  e7fe              B        bsp_InitLed
;;;38     {
;;;39     	/*
;;;40     		由于ST固件库的启动文件已经执行了CPU系统时钟的初始化，所以不必再次重复配置系统时钟。
;;;41     		启动文件配置了CPU主时钟频率、内部Flash访问速度和可选的外部SRAM FSMC初始化。
;;;42     
;;;43     		系统时钟缺省配置为168MHz，如果需要更改，可以修改 system_stm32f4xx.c 文件
;;;44     	*/
;;;45     
;;;46     	/* 针对不同的应用程序，添加需要的底层驱动模块初始化函数 */
;;;47     
;;;48     	bsp_InitLed(); 		/* 初始LED指示灯端口 */
;;;49     }
;;;50     
                          ENDP

                  bsp_LedOn PROC
;;;161    */
;;;162    void bsp_LedOn(uint8_t _no)
000178  1e40              SUBS     r0,r0,#1
;;;163    {
;;;164    	_no--;
;;;165    
;;;166    	if (_no == 0)
;;;167    	{
;;;168    		GPIO_PORT_LED1->BSRRL = GPIO_PIN_LED1;
00017a  491b              LDR      r1,|L1.488|
00017c  f01000ff          ANDS     r0,r0,#0xff           ;164
000180  d004              BEQ      |L1.396|
;;;169    	}
;;;170    	else if (_no == 1)
000182  2801              CMP      r0,#1
000184  d101              BNE      |L1.394|
;;;171    	{
;;;172    		GPIO_PORT_LED2->BSRRL = GPIO_PIN_LED2;
000186  2080              MOVS     r0,#0x80
                  |L1.392|
000188  8008              STRH     r0,[r1,#0]            ;168
                  |L1.394|
;;;173    	}
;;;174    }
00018a  4770              BX       lr
                  |L1.396|
00018c  2040              MOVS     r0,#0x40              ;168
00018e  e7fb              B        |L1.392|
;;;175    
                          ENDP

                  bsp_LedToggle PROC
;;;183    */
;;;184    void bsp_LedToggle(uint8_t _no)
000190  4915              LDR      r1,|L1.488|
;;;185    {
;;;186    	if (_no == 1)
;;;187    	{
;;;188    		GPIO_PORT_LED1->ODR ^= GPIO_PIN_LED1;
000192  1f09              SUBS     r1,r1,#4
000194  2801              CMP      r0,#1                 ;186
000196  d006              BEQ      |L1.422|
;;;189    	}
;;;190    	else if (_no == 2)
000198  2802              CMP      r0,#2
00019a  d103              BNE      |L1.420|
;;;191    	{
;;;192    		GPIO_PORT_LED2->ODR ^= GPIO_PIN_LED2;
00019c  6808              LDR      r0,[r1,#0]
00019e  f0800080          EOR      r0,r0,#0x80
                  |L1.418|
0001a2  6008              STR      r0,[r1,#0]            ;188
                  |L1.420|
;;;193    	}
;;;194    }
0001a4  4770              BX       lr
                  |L1.422|
0001a6  6808              LDR      r0,[r1,#0]            ;188
0001a8  f0800040          EOR      r0,r0,#0x40           ;188
0001ac  e7f9              B        |L1.418|
;;;195    
                          ENDP

                  bsp_IsLedOn PROC
;;;203    */
;;;204    uint8_t bsp_IsLedOn(uint8_t _no)
0001ae  490e              LDR      r1,|L1.488|
;;;205    {
;;;206    	if (_no == 1)
;;;207    	{
;;;208    		if ((GPIO_PORT_LED1->ODR & GPIO_PIN_LED1) == 1)
0001b0  1f09              SUBS     r1,r1,#4
0001b2  2801              CMP      r0,#1                 ;206
0001b4  d001              BEQ      |L1.442|
;;;209    		{
;;;210    			return 1;
;;;211    		}
;;;212    		return 0;
;;;213    	}
;;;214    	else if (_no == 2)
0001b6  2802              CMP      r0,#2
0001b8  d100              BNE      |L1.444|
                  |L1.442|
;;;215    	{
;;;216    		if ((GPIO_PORT_LED2->ODR & GPIO_PIN_LED2) == 1)
0001ba  6808              LDR      r0,[r1,#0]
                  |L1.444|
;;;217    		{
;;;218    			return 1;
;;;219    		}
;;;220    		return 0;
;;;221    	}
;;;222    
;;;223    	return 0;
0001bc  2000              MOVS     r0,#0
;;;224    }
0001be  4770              BX       lr
;;;225    
                          ENDP

                  bsp_HWDT_service PROC
;;;226    void bsp_HWDT_service(void)
0001c0  4808              LDR      r0,|L1.484|
;;;227    {
;;;228      GPIOC->ODR ^= GPIO_Pin_0;
0001c2  3014              ADDS     r0,r0,#0x14
0001c4  6801              LDR      r1,[r0,#0]
0001c6  f0810101          EOR      r1,r1,#1
0001ca  6001              STR      r1,[r0,#0]
;;;229    }
0001cc  4770              BX       lr
                          ENDP

0001ce  0000              DCW      0x0000
                  |L1.464|
                          DCD      0x40021000
                  |L1.468|
                          DCD      0x40020000
                  |L1.472|
                          DCD      0x4002181a
                  |L1.476|
                          DCD      0x40020400
                  |L1.480|
                          DCD      0x40021400
                  |L1.484|
                          DCD      0x40020800
                  |L1.488|
                          DCD      0x40021818

;*** Start embedded assembler ***

#line 1 "..\\HARDWARE\\bsp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_ST_A1____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___5_bsp_c_ST_A1____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_ST_A1____REVSH|
#line 144
|__asm___5_bsp_c_ST_A1____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
