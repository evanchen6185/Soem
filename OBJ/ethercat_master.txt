; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\ethercat_master.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\ethercat_master.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\FWLIB\STM32F4xx_StdPeriph_Driver\inc -I..\USER -I..\HARDWARE\KEY -I..\HARDWARE\LCD -I..\HARDWARE\ETHERNET -I..\HARDWARE\TIMER -I..\HARDWARE\LED -I..\HARDWARE\BEEP -I..\HARDWARE\RTC -I..\HARDWARE\ADC -I..\HARDWARE\SRAM -I..\HARDWARE\InterTemperate -I..\FWLIB\STM32F4x7_ETH_Driver\inc -I..\MALLOC -I..\USMART -I..\HARDWARE -I..\ETHERCAT -I.\RTE\_LWIP -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.15.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DSTM32F407xx -DSTM32F40_41xxx -DUSE_STDPERIPH_DRIVER -DSTM32F40XX -DUSE_USB_OTG_FS -DUSE_EMBEDDED_PHY -DUSE_USB_OTG_HS --omf_browse=..\obj\ethercat_master.crf ..\ETHERCAT\Ethercat_Master.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                  main PROC
;;;62     uint32_t timeoftest;
;;;63     int main(void)
000000  b086              SUB      sp,sp,#0x18
;;;64     {	
;;;65     		uint32_t i,j;
;;;66     	  uint16_t slc,cnt;
;;;67     	  uint8 u8val;
;;;68     	  uint16 u16val;
;;;69     	
;;;70     		bsp_Init(); /*IO�ڳ�ʼ�� */
000002  f7fffffe          BL       bsp_Init
;;;71     	  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);/*����ϵͳ�ж����ȼ�����2 */
000006  f44f60a0          MOV      r0,#0x500
00000a  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;72     		SystemCoreClockUpdate(); /*ϵͳʱ�Ӹ��� */
00000e  f7fffffe          BL       SystemCoreClockUpdate
;;;73     	  uart_init(115200);   	/*���Դ��ڲ���������*/
000012  f44f30e1          MOV      r0,#0x1c200
000016  f7fffffe          BL       uart_init
;;;74     	  RCC_GetClocksFreq(&ClockInfo);/*��ȡϵͳʱ��ֵ*/
00001a  48f9              LDR      r0,|L1.1024|
00001c  f7fffffe          BL       RCC_GetClocksFreq
;;;75         TIM2_Int_Init(0x7fffffff-1,84-1);	/*us��ʱ����ʱ��ʱ��84M����Ƶϵ��84�� ���ϼ�������ʱ��ʱ��*/ 
000020  2153              MOVS     r1,#0x53
000022  48f8              LDR      r0,|L1.1028|
000024  f7fffffe          BL       TIM2_Int_Init
000028  2101              MOVS     r1,#1
00002a  2002              MOVS     r0,#2
00002c  f7fffffe          BL       RCC_APB1PeriphClockCmd
000030  2053              MOVS     r0,#0x53
000032  f8ad0000          STRH     r0,[sp,#0]
000036  2400              MOVS     r4,#0
000038  20f9              MOVS     r0,#0xf9
00003a  4df3              LDR      r5,|L1.1032|
00003c  9001              STR      r0,[sp,#4]
00003e  f8ad4008          STRH     r4,[sp,#8]
000042  f8ad4002          STRH     r4,[sp,#2]
000046  f88d400a          STRB     r4,[sp,#0xa]
00004a  4669              MOV      r1,sp
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       TIM_TimeBaseInit
000052  f44f60e0          MOV      r0,#0x700
000056  f7fffffe          BL       NVIC_PriorityGroupConfig
00005a  201d              MOVS     r0,#0x1d
00005c  f88d000c          STRB     r0,[sp,#0xc]
000060  f88d400d          STRB     r4,[sp,#0xd]
000064  2003              MOVS     r0,#3
000066  f88d000e          STRB     r0,[sp,#0xe]
00006a  f04f0901          MOV      r9,#1
00006e  f88d900f          STRB     r9,[sp,#0xf]
000072  a803              ADD      r0,sp,#0xc
000074  f7fffffe          BL       NVIC_Init
000078  2101              MOVS     r1,#1
00007a  4628              MOV      r0,r5
00007c  f7fffffe          BL       TIM_ClearITPendingBit
000080  2201              MOVS     r2,#1
000082  4611              MOV      r1,r2
000084  4628              MOV      r0,r5
000086  f7fffffe          BL       TIM_ITConfig
00008a  2101              MOVS     r1,#1
00008c  4628              MOV      r0,r5
00008e  f7fffffe          BL       TIM_Cmd
;;;76     	  TIM3_Config(999,899);/*DCͬ��ʱ�Ӷ�ʱ������ʱʱ��ΪSYNC0TIME����λus*/
;;;77     		printf("\r\nWelcome to the ECAT World \n\r");
000092  a0de              ADR      r0,|L1.1036|
000094  f7fffffe          BL       __2printf
;;;78     	re_check_net:     /*���¼�����ڱ�ʶ	*/		
;;;79     	  vid = dm9k_ReadID();/*��ȡdm9000 ID=0x0A469000 �������ڴ�ֵ�����ڵĲ�������*/	
;;;80     		DM9000_Init(); /* DM9000���ڳ�ʼ��	 */
;;;81     		DM9162_Init(); /* DM9162���ڳ�ʼ��  */
;;;82     
;;;83         socket_mode=0;
;;;84     		do
;;;85     			{
;;;86     //˫����������ģʽ
;;;87     			if((ETH_ReadPHYRegister(DM9162_PHY_ADDRESS, PHY_BSR) & 0x0004)&&(dm9k_ReadReg(DM9000_REG_NSR) & DM9000_PHY))
;;;88     				{
;;;89     				 socket_mode=2;
;;;90     				}
;;;91     //��������ģʽ
;;;92     			else if((ETH_ReadPHYRegister(DM9162_PHY_ADDRESS, PHY_BSR) & 0x0004)&&(!(dm9k_ReadReg(DM9000_REG_NSR) & DM9000_PHY)))
;;;93     			 {
;;;94     				 socket_mode=1;
;;;95     			 }
;;;96     //������� δ��⵽���� �������˸
;;;97     			else
;;;98     			 {
;;;99     				 socket_mode=0;
;;;100    			 }				
;;;101    				printf("Please plug in the Ethernet cable first \n\r");
;;;102    				Delay_ms(100);
;;;103    			  bsp_LedToggle(2);    /* �������		*/
;;;104    			}while(socket_mode==0); /* ��⵽������������ */
;;;105    			
;;;106    		 if(restart_waittime==1)
;;;107    		  {
;;;108    				restart_waittime=0;
;;;109            goto re_check_net;
;;;110    		  }	
;;;111    		
;;;112    			bsp_LedOff(2);  /* ���LED����� */
;;;113    			
;;;114    		  MAC_Init(); /*  DM9162����������ʼ�� */
;;;115    		  ec_init();  /*  ���õ�������or˫���������� */
;;;116    			
;;;117          printf("\r\nSocket Mode: %d\n\r", socket_mode);	
;;;118    			Delay_ms(1000);
;;;119          bsp_LedOn(1);   /*  Run �Ƶ���	 */
;;;120    			
;;;121    	  if(ec_config_init(FALSE)>0)		/*  ���Ҵ�վ����ʼ����վ��	 */
;;;122    	    {
;;;123    	      printf("%d slaves found and configured.\r\n",ec_slavecount);         
;;;124    				if((ec_slavecount >= 1))
;;;125    				{
;;;126    					for(slc = 1; slc <= ec_slavecount; slc++)
;;;127    						{
;;;128    							printf("Found %s at position %d\n", ec_slave[slc].name, slc);
;;;129    						}
;;;130    				}			 
;;;131    	       ec_config_map(&IOmap);	/* �����վPDO,��IOmap�������� */					
;;;132    			   ec_configdc();
;;;133    			   ec_dcsync0(1, TRUE, SYNC0TIME, 250000); // SYNC0 on slave 1
;;;134    				 printf("Slaves mapped, state to SAFE_OP.\n");
;;;135    	        /* �ȴ����д�վ״̬�л��� SAFE_OP */
;;;136             ec_statecheck(0, EC_STATE_SAFE_OP,  EC_TIMEOUTSTATE);
;;;137    
;;;138    				 printf("Slave 0 State=0x%04x\r\n",ec_slave[0].state);
;;;139    			   printf("Slave 1 State=0x%04x\r\n",ec_slave[1].state);
;;;140    				 do
;;;141    				   {
;;;142    							ec_statecheck(0, EC_STATE_SAFE_OP, 50000);
000098  f24c3750          MOV      r7,#0xc350
00009c  f8dfb38c          LDR      r11,|L1.1068|
0000a0  46a0              MOV      r8,r4                 ;128
0000a2  f8dfa38c          LDR      r10,|L1.1072|
                  |L1.166|
0000a6  f7fffffe          BL       dm9k_ReadID
0000aa  4654              MOV      r4,r10                ;79
0000ac  f8ca000c          STR      r0,[r10,#0xc]         ;80  ; vid
0000b0  f7fffffe          BL       DM9000_Init
0000b4  f7fffffe          BL       DM9162_Init
0000b8  f8848002          STRB     r8,[r4,#2]            ;83
0000bc  2502              MOVS     r5,#2                 ;83
                  |L1.190|
0000be  2101              MOVS     r1,#1                 ;87
0000c0  4608              MOV      r0,r1                 ;87
0000c2  f7fffffe          BL       ETH_ReadPHYRegister
0000c6  0740              LSLS     r0,r0,#29             ;87
0000c8  d506              BPL      |L1.216|
0000ca  2001              MOVS     r0,#1                 ;87
0000cc  f7fffffe          BL       dm9k_ReadReg
0000d0  0640              LSLS     r0,r0,#25             ;87
0000d2  d501              BPL      |L1.216|
0000d4  70a5              STRB     r5,[r4,#2]            ;89
0000d6  e00f              B        |L1.248|
                  |L1.216|
0000d8  2101              MOVS     r1,#1                 ;92
0000da  4608              MOV      r0,r1                 ;92
0000dc  f7fffffe          BL       ETH_ReadPHYRegister
0000e0  0740              LSLS     r0,r0,#29             ;92
0000e2  d507              BPL      |L1.244|
0000e4  2001              MOVS     r0,#1                 ;92
0000e6  f7fffffe          BL       dm9k_ReadReg
0000ea  0640              LSLS     r0,r0,#25             ;92
0000ec  d402              BMI      |L1.244|
0000ee  f8849002          STRB     r9,[r4,#2]            ;94
0000f2  e001              B        |L1.248|
                  |L1.244|
0000f4  f8848002          STRB     r8,[r4,#2]            ;99
                  |L1.248|
0000f8  a0ce              ADR      r0,|L1.1076|
0000fa  f7fffffe          BL       __2printf
0000fe  2064              MOVS     r0,#0x64              ;102
000100  f7fffffe          BL       Delay_ms
000104  2002              MOVS     r0,#2                 ;103
000106  f7fffffe          BL       bsp_LedToggle
00010a  78a0              LDRB     r0,[r4,#2]            ;104  ; socket_mode
00010c  2800              CMP      r0,#0                 ;104
00010e  d0d6              BEQ      |L1.190|
000110  7860              LDRB     r0,[r4,#1]            ;106  ; restart_waittime
000112  2801              CMP      r0,#1                 ;106
000114  d022              BEQ      |L1.348|
000116  2002              MOVS     r0,#2                 ;112
000118  f7fffffe          BL       bsp_LedOff
00011c  f7fffffe          BL       MAC_Init
000120  f7fffffe          BL       ec_init
000124  46a2              MOV      r10,r4                ;117
000126  78a1              LDRB     r1,[r4,#2]            ;117  ; socket_mode
000128  a0cd              ADR      r0,|L1.1120|
00012a  f7fffffe          BL       __2printf
00012e  f44f707a          MOV      r0,#0x3e8             ;118
000132  f7fffffe          BL       Delay_ms
000136  2001              MOVS     r0,#1                 ;119
000138  f7fffffe          BL       bsp_LedOn
00013c  2000              MOVS     r0,#0                 ;121
00013e  f7fffffe          BL       ec_config_init
000142  2800              CMP      r0,#0                 ;121
000144  dd76              BLE      |L1.564|
000146  4ccb              LDR      r4,|L1.1140|
000148  a0cb              ADR      r0,|L1.1144|
00014a  6821              LDR      r1,[r4,#0]            ;123  ; ec_slavecount
00014c  f7fffffe          BL       __2printf
000150  6820              LDR      r0,[r4,#0]            ;124  ; ec_slavecount
000152  2801              CMP      r0,#1                 ;124
000154  db16              BLT      |L1.388|
000156  2501              MOVS     r5,#1                 ;126
000158  465e              MOV      r6,r11                ;128
00015a  e010              B        |L1.382|
                  |L1.348|
00015c  f8848001          STRB     r8,[r4,#1]            ;108
000160  e7a1              B        |L1.166|
                  |L1.354|
000162  eb0500c5          ADD      r0,r5,r5,LSL #3       ;128
000166  eb001085          ADD      r0,r0,r5,LSL #6       ;128
00016a  eb060180          ADD      r1,r6,r0,LSL #2       ;128
00016e  462a              MOV      r2,r5                 ;128
000170  a0ca              ADR      r0,|L1.1180|
000172  f5017186          ADD      r1,r1,#0x10c          ;128
000176  f7fffffe          BL       __2printf
00017a  1c6d              ADDS     r5,r5,#1              ;128
00017c  b2ad              UXTH     r5,r5                 ;126
                  |L1.382|
00017e  6820              LDR      r0,[r4,#0]            ;126  ; ec_slavecount
000180  4285              CMP      r5,r0                 ;126
000182  ddee              BLE      |L1.354|
                  |L1.388|
000184  48cc              LDR      r0,|L1.1208|
000186  f7fffffe          BL       ec_config_map
00018a  f7fffffe          BL       ec_configdc
00018e  2101              MOVS     r1,#1                 ;133
000190  4bca              LDR      r3,|L1.1212|
000192  22fa              MOVS     r2,#0xfa              ;133
000194  4608              MOV      r0,r1                 ;133
000196  f7fffffe          BL       ec_dcsync0
00019a  a0c9              ADR      r0,|L1.1216|
00019c  f7fffffe          BL       __2printf
0001a0  4ad0              LDR      r2,|L1.1252|
0001a2  2104              MOVS     r1,#4                 ;136
0001a4  2000              MOVS     r0,#0                 ;136
0001a6  f7fffffe          BL       ec_statecheck
0001aa  465d              MOV      r5,r11                ;138
0001ac  f8bb1000          LDRH     r1,[r11,#0]           ;138  ; ec_slave
0001b0  a0cd              ADR      r0,|L1.1256|
0001b2  f7fffffe          BL       __2printf
0001b6  f8b51124          LDRH     r1,[r5,#0x124]        ;139  ; ec_slave
0001ba  a0d1              ADR      r0,|L1.1280|
0001bc  f7fffffe          BL       __2printf
                  |L1.448|
0001c0  463a              MOV      r2,r7
0001c2  2104              MOVS     r1,#4
0001c4  2000              MOVS     r0,#0
0001c6  f7fffffe          BL       ec_statecheck
;;;143    			   		 ec_statecheck(1, EC_STATE_SAFE_OP, 50000);
0001ca  463a              MOV      r2,r7
0001cc  2104              MOVS     r1,#4
0001ce  2001              MOVS     r0,#1
0001d0  f7fffffe          BL       ec_statecheck
;;;144    				    }
;;;145    				    while ((ec_slave[0].state != EC_STATE_SAFE_OP) || (ec_slave[1].state != EC_STATE_SAFE_OP));
0001d4  8828              LDRH     r0,[r5,#0]  ; ec_slave
0001d6  2804              CMP      r0,#4
0001d8  d1f2              BNE      |L1.448|
0001da  f8b50124          LDRH     r0,[r5,#0x124]  ; ec_slave
0001de  2804              CMP      r0,#4
0001e0  d1ee              BNE      |L1.448|
;;;146    						printf("Slave 0 State=0x%04x\r\n",ec_slave[0].state);
0001e2  8829              LDRH     r1,[r5,#0]  ; ec_slave
0001e4  a0c0              ADR      r0,|L1.1256|
0001e6  f7fffffe          BL       __2printf
;;;147    						printf("Slave 1 State=0x%04x\r\n",ec_slave[1].state);
0001ea  f8b51124          LDRH     r1,[r5,#0x124]  ; ec_slave
0001ee  a0c4              ADR      r0,|L1.1280|
0001f0  f7fffffe          BL       __2printf
;;;148    					/* ��ӡ�������Ϣ */
;;;149              for( cnt = 1 ; cnt <= ec_slavecount ; cnt++)
0001f4  2601              MOVS     r6,#1
0001f6  46ab              MOV      r11,r5                ;128
0001f8  e054              B        |L1.676|
                  |L1.506|
;;;150                {
;;;151                   printf("\nSlave:%d\n Name:%s\n Output size: %dbits\n Input size: %dbits\n State: %d\n Delay: %d[ns]\n Has DC: %d\n",
0001fa  eb0600c6          ADD      r0,r6,r6,LSL #3
0001fe  eb001086          ADD      r0,r0,r6,LSL #6
000202  eb0b0480          ADD      r4,r11,r0,LSL #2
000206  f83b0020          LDRH     r0,[r11,r0,LSL #2]
00020a  f89420cb          LDRB     r2,[r4,#0xcb]
00020e  8ce3              LDRH     r3,[r4,#0x26]
000210  f8d410e4          LDR      r1,[r4,#0xe4]
000214  e9cd1202          STRD     r1,r2,[sp,#8]
000218  e9cd3000          STRD     r3,r0,[sp,#0]
00021c  8b23              LDRH     r3,[r4,#0x18]
00021e  f5047286          ADD      r2,r4,#0x10c
000222  4631              MOV      r1,r6
000224  48bc              LDR      r0,|L1.1304|
000226  f7fffffe          BL       __2printf
;;;152                           cnt, ec_slave[cnt].name, ec_slave[cnt].Obits, ec_slave[cnt].Ibits,
;;;153                           ec_slave[cnt].state, ec_slave[cnt].pdelay, ec_slave[cnt].hasdc);
;;;154                   printf(" Configured address: %x\n", ec_slave[cnt].configadr);
00022a  88a1              LDRH     r1,[r4,#4]
00022c  a0bb              ADR      r0,|L1.1308|
00022e  f7fffffe          BL       __2printf
;;;155                   printf(" Outputs address: %x\n", ec_slave[cnt].outputs);
000232  e000              B        |L1.566|
                  |L1.564|
000234  e09b              B        |L1.878|
                  |L1.566|
000236  a0c0              ADR      r0,|L1.1336|
000238  6a21              LDR      r1,[r4,#0x20]
00023a  f7fffffe          BL       __2printf
;;;156                   printf(" Inputs address: %x\n", ec_slave[cnt].inputs);
00023e  a0c4              ADR      r0,|L1.1360|
000240  6ae1              LDR      r1,[r4,#0x2c]
000242  f7fffffe          BL       __2printf
;;;157    
;;;158                   for(j = 0 ; j < ec_slave[cnt].FMMUunused ; j++)
000246  2500              MOVS     r5,#0
000248  e01b              B        |L1.642|
                  |L1.586|
;;;159                   {
;;;160                      printf(" FMMU%1d Ls:%x Ll:%4d Lsb:%d Leb:%d Ps:%x Psb:%d Ty:%x Act:%x\n", j,
00024a  eb041005          ADD      r0,r4,r5,LSL #4
00024e  f890c088          LDRB     r12,[r0,#0x88]
000252  f8903087          LDRB     r3,[r0,#0x87]
000256  f8902086          LDRB     r2,[r0,#0x86]
00025a  f8b01084          LDRH     r1,[r0,#0x84]
00025e  e9cd1202          STRD     r1,r2,[sp,#8]
000262  e9cd3c04          STRD     r3,r12,[sp,#0x10]
000266  f8902083          LDRB     r2,[r0,#0x83]
00026a  f8901082          LDRB     r1,[r0,#0x82]
00026e  e9cd1200          STRD     r1,r2,[sp,#0]
000272  f8b03080          LDRH     r3,[r0,#0x80]
000276  6fc2              LDR      r2,[r0,#0x7c]
000278  4629              MOV      r1,r5
00027a  a0bb              ADR      r0,|L1.1384|
00027c  f7fffffe          BL       __2printf
000280  1c6d              ADDS     r5,r5,#1
                  |L1.642|
000282  f8940104          LDRB     r0,[r4,#0x104]        ;158
000286  42a8              CMP      r0,r5                 ;158
000288  d8df              BHI      |L1.586|
;;;161                              (int)ec_slave[cnt].FMMU[j].LogStart, ec_slave[cnt].FMMU[j].LogLength, ec_slave[cnt].FMMU[j].LogStartbit,
;;;162                              ec_slave[cnt].FMMU[j].LogEndbit, ec_slave[cnt].FMMU[j].PhysStart, ec_slave[cnt].FMMU[j].PhysStartBit,
;;;163                              ec_slave[cnt].FMMU[j].FMMUtype, ec_slave[cnt].FMMU[j].FMMUactive);
;;;164                   }
;;;165                   printf(" FMMUfunc 0:%d 1:%d 2:%d 3:%d\n",
00028a  f89400bf          LDRB     r0,[r4,#0xbf]
00028e  9000              STR      r0,[sp,#0]
000290  f89420be          LDRB     r2,[r4,#0xbe]
000294  f89410bc          LDRB     r1,[r4,#0xbc]
000298  4613              MOV      r3,r2
00029a  a0c3              ADR      r0,|L1.1448|
00029c  f7fffffe          BL       __2printf
0002a0  1c76              ADDS     r6,r6,#1
0002a2  b2b6              UXTH     r6,r6                 ;149
                  |L1.676|
0002a4  4c73              LDR      r4,|L1.1140|
0002a6  6820              LDR      r0,[r4,#0]            ;149  ; ec_slavecount
0002a8  4286              CMP      r6,r0                 ;149
0002aa  dda6              BLE      |L1.506|
;;;166                            ec_slave[cnt].FMMU0func, ec_slave[cnt].FMMU2func, ec_slave[cnt].FMMU2func, ec_slave[cnt].FMMU3func);
;;;167    
;;;168                }
;;;169    						printf("Request operational state for all slaves\n");
0002ac  a0c6              ADR      r0,|L1.1480|
0002ae  f7fffffe          BL       __2printf
;;;170                ec_slave[0].state = EC_STATE_OPERATIONAL;
0002b2  2008              MOVS     r0,#8
0002b4  465d              MOV      r5,r11
0002b6  f8ab0000          STRH     r0,[r11,#0]
;;;171                /* send one valid process data to make outputs in slaves happy*/
;;;172                ec_send_processdata();
0002ba  f7fffffe          BL       ec_send_processdata
;;;173                ec_receive_processdata(EC_TIMEOUTRET);
0002be  f44f66fa          MOV      r6,#0x7d0
0002c2  4630              MOV      r0,r6
0002c4  f7fffffe          BL       ec_receive_processdata
;;;174                /* �������д�վ���е�OP ״̬ */
;;;175                ec_writestate(0);
0002c8  2000              MOVS     r0,#0
0002ca  f7fffffe          BL       ec_writestate
;;;176    
;;;177                /* �ȴ����д�վ�л��� OP ״̬ */
;;;178                ec_statecheck(0, EC_STATE_OPERATIONAL,  EC_TIMEOUTSTATE);								
0002ce  4a85              LDR      r2,|L1.1252|
0002d0  2108              MOVS     r1,#8
0002d2  2000              MOVS     r0,#0
0002d4  f7fffffe          BL       ec_statecheck
                  |L1.728|
;;;179    					  do
;;;180    				    {
;;;181    				   		ec_send_processdata();
0002d8  f7fffffe          BL       ec_send_processdata
;;;182    				   		ec_receive_processdata(EC_TIMEOUTRET);
0002dc  4630              MOV      r0,r6
0002de  f7fffffe          BL       ec_receive_processdata
;;;183    							ec_statecheck(0, EC_STATE_OPERATIONAL, 50000);
0002e2  463a              MOV      r2,r7
0002e4  2108              MOVS     r1,#8
0002e6  2000              MOVS     r0,#0
0002e8  f7fffffe          BL       ec_statecheck
;;;184    				   		ec_statecheck(1, EC_STATE_OPERATIONAL, 50000);
0002ec  463a              MOV      r2,r7
0002ee  2108              MOVS     r1,#8
0002f0  2001              MOVS     r0,#1
0002f2  f7fffffe          BL       ec_statecheck
;;;185    				    }
;;;186    				    while ((ec_slave[0].state != EC_STATE_OPERATIONAL)|| (ec_slave[1].state != EC_STATE_OPERATIONAL));
0002f6  8828              LDRH     r0,[r5,#0]  ; ec_slave
0002f8  2808              CMP      r0,#8
0002fa  d1ed              BNE      |L1.728|
0002fc  f8b50124          LDRH     r0,[r5,#0x124]  ; ec_slave
000300  2808              CMP      r0,#8
000302  d1e9              BNE      |L1.728|
;;;187    						printf("Slave 0 State=0x%04x\r\n",ec_slave[0].state);
000304  8829              LDRH     r1,[r5,#0]  ; ec_slave
000306  a078              ADR      r0,|L1.1256|
000308  f7fffffe          BL       __2printf
;;;188    						printf("Slave 1 State=0x%04x\r\n",ec_slave[1].state);
00030c  f8b51124          LDRH     r1,[r5,#0x124]  ; ec_slave
000310  a07b              ADR      r0,|L1.1280|
000312  f7fffffe          BL       __2printf
;;;189    						
;;;190    						/* ������д�վ״̬ΪOP ��Դ�վ�� �������������ӳ��*/
;;;191                if (ec_slave[0].state == EC_STATE_OPERATIONAL)
000316  8828              LDRH     r0,[r5,#0]  ; ec_slave
000318  2808              CMP      r0,#8
00031a  d006              BEQ      |L1.810|
;;;192                {	
;;;193                   printf("Operational state reached for all slaves.\n");
;;;194    							 all_slave_op = 1;												
;;;195    							 outputs1 = (PDO_Output *)ec_slave[1].outputs;
;;;196                   inputs1  = (PDO_Input *)ec_slave[1].inputs;
;;;197                }
;;;198                else /* ��֮ ��ӡ��վ״̬*/
;;;199                {
;;;200                   printf("Not all slaves reached operational state.\n");
00031c  a0b5              ADR      r0,|L1.1524|
00031e  f7fffffe          BL       __2printf
;;;201                   ec_readstate();
000322  f7fffffe          BL       ec_readstate
;;;202                   for(i = 1; i<=ec_slavecount ; i++)
000326  2601              MOVS     r6,#1
000328  e01d              B        |L1.870|
                  |L1.810|
00032a  a0bd              ADR      r0,|L1.1568|
00032c  f7fffffe          BL       __2printf
000330  f88a9000          STRB     r9,[r10,#0]           ;194
000334  f8d51144          LDR      r1,[r5,#0x144]        ;195  ; ec_slave
000338  f8ca1014          STR      r1,[r10,#0x14]        ;196  ; outputs1
00033c  f8d51150          LDR      r1,[r5,#0x150]        ;196  ; ec_slave
000340  f8ca1018          STR      r1,[r10,#0x18]        ;196  ; inputs1
000344  e016              B        |L1.884|
                  |L1.838|
;;;203                   {
;;;204                      if(ec_slave[i].state != EC_STATE_OPERATIONAL)
000346  eb0600c6          ADD      r0,r6,r6,LSL #3
00034a  eb001086          ADD      r0,r0,r6,LSL #6
00034e  f8352020          LDRH     r2,[r5,r0,LSL #2]
000352  2a08              CMP      r2,#8
000354  d006              BEQ      |L1.868|
;;;205                      {
;;;206                         printf("Slave %d State=0x%04x StatusCode=0x%04x\n",
000356  eb050080          ADD      r0,r5,r0,LSL #2
00035a  4631              MOV      r1,r6
00035c  8843              LDRH     r3,[r0,#2]
00035e  a0bb              ADR      r0,|L1.1612|
000360  f7fffffe          BL       __2printf
                  |L1.868|
000364  1c76              ADDS     r6,r6,#1
                  |L1.870|
000366  6820              LDR      r0,[r4,#0]            ;202  ; ec_slavecount
000368  4286              CMP      r6,r0                 ;202
00036a  d9ec              BLS      |L1.838|
00036c  e002              B        |L1.884|
                  |L1.878|
;;;207                                 i, ec_slave[i].state, ec_slave[i].ALstatuscode);
;;;208                      }
;;;209                   }
;;;210                }
;;;211    	     }
;;;212    		 else
;;;213    			{
;;;214    				printf("No slaves found!\r\n");
00036e  a0c2              ADR      r0,|L1.1656|
000370  f7fffffe          BL       __2printf
                  |L1.884|
000374  4645              MOV      r5,r8
000376  4654              MOV      r4,r10                ;79
                  |L1.888|
;;;215    			}			
;;;216    	while(1)
;;;217    	{
;;;218    		//PDO��ͨѶ��TIM3�жϺ�����
;;;219       if(pdoTimeFlag == 1)	/* PDOͨѶ��ʱ��־λ */
000378  6920              LDR      r0,[r4,#0x10]  ; pdoTimeFlag
00037a  2801              CMP      r0,#1
00037c  d1fc              BNE      |L1.888|
;;;220    	  {
;;;221    			DM9162_Status=ETH_ReadPHYRegister(DM9162_PHY_ADDRESS, PHY_BSR) & 0x0004;/* ������link״̬��־ */
00037e  2101              MOVS     r1,#1
000380  4608              MOV      r0,r1
000382  f7fffffe          BL       ETH_ReadPHYRegister
000386  f0000004          AND      r0,r0,#4
00038a  7120              STRB     r0,[r4,#4]
;;;222    			DM9000_Status=(dm9k_ReadReg(DM9000_REG_NSR) & DM9000_PHY);/* �����link״̬��־ */
00038c  2001              MOVS     r0,#1
00038e  f7fffffe          BL       dm9k_ReadReg
000392  f0000040          AND      r0,r0,#0x40
000396  70e0              STRB     r0,[r4,#3]
;;;223    			if(( !DM9162_Status) && (!DM9000_Status))/* �����ں�����ڶ�����ʱ��ת��re_check_net �ȴ������������� */
000398  7921              LDRB     r1,[r4,#4]  ; DM9162_Status
00039a  4301              ORRS     r1,r1,r0
00039c  d001              BEQ      |L1.930|
;;;224    			{
;;;225    			 printf("Ethernets are all error,NOW must reset! goto  lable re_check_net\n");
;;;226    			 restart_waittime=1;
;;;227    			 goto	re_check_net;
;;;228    			}				 
;;;229    			pdoTimeFlag=0;
00039e  6125              STR      r5,[r4,#0x10]  ; pdoTimeFlag
0003a0  e7ea              B        |L1.888|
                  |L1.930|
0003a2  48ba              LDR      r0,|L1.1676|
0003a4  f7fffffe          BL       __2printf
0003a8  f8849001          STRB     r9,[r4,#1]            ;226
0003ac  e67b              B        |L1.166|
;;;230    //		  ecat_loop();
;;;231    	  }
;;;232    	}
;;;233    }
;;;234    /**
                          ENDP

                  TIM3_IRQHandler PROC
;;;278      */
;;;279    void TIM3_IRQHandler(void)
0003ae  b510              PUSH     {r4,lr}
;;;280    {
;;;281    	
;;;282    	
;;;283    	if(TIM_GetITStatus(TIM3,TIM_IT_Update)==SET) //����ж�
0003b0  4c15              LDR      r4,|L1.1032|
0003b2  2101              MOVS     r1,#1
0003b4  4620              MOV      r0,r4
0003b6  f7fffffe          BL       TIM_GetITStatus
0003ba  2801              CMP      r0,#1
0003bc  d105              BNE      |L1.970|
;;;284    	{
;;;285    //			pdoTimeFlag = 1;
;;;286    		if(all_slave_op==1)  /* ���д�վ�Ѿ�����OP״̬ ���Խ���PDO�Ĳ��� */
0003be  4a1c              LDR      r2,|L1.1072|
0003c0  7810              LDRB     r0,[r2,#0]  ; all_slave_op
0003c2  2801              CMP      r0,#1
0003c4  d007              BEQ      |L1.982|
;;;287    		{
;;;288    			pdoTimeFlag = 1;   /* PDOͨѶ��ʱ��־λ */
;;;289    			//�������߼�
;;;290    			times_cnt++;
;;;291    			if(times_cnt>100)
;;;292    			{
;;;293    			times_cnt=0;
;;;294    			if(time_cnt<128)
;;;295    				 time_cnt=time_cnt*2;
;;;296    			else 
;;;297    				 time_cnt=1;
;;;298    			 }
;;;299    
;;;300    		   ecat_loop(); /* �����Ʋ������߼���ֵ��RxPDO */
;;;301    		 } 
;;;302    		else
;;;303    		{
;;;304    		  ec_send_processdata();	
0003c6  f7fffffe          BL       ec_send_processdata
                  |L1.970|
;;;305    		}
;;;306    
;;;307    	}
;;;308    	TIM_ClearITPendingBit(TIM3,TIM_IT_Update);  //����жϱ�־λ
0003ca  4620              MOV      r0,r4
0003cc  e8bd4010          POP      {r4,lr}
0003d0  2101              MOVS     r1,#1
0003d2  f7ffbffe          B.W      TIM_ClearITPendingBit
                  |L1.982|
0003d6  2001              MOVS     r0,#1                 ;288
0003d8  6110              STR      r0,[r2,#0x10]         ;288  ; pdoTimeFlag
0003da  88d1              LDRH     r1,[r2,#6]            ;290  ; times_cnt
0003dc  1c49              ADDS     r1,r1,#1              ;290
0003de  b289              UXTH     r1,r1                 ;290
0003e0  80d1              STRH     r1,[r2,#6]            ;290
0003e2  2964              CMP      r1,#0x64              ;291
0003e4  d909              BLS      |L1.1018|
0003e6  2100              MOVS     r1,#0                 ;293
0003e8  80d1              STRH     r1,[r2,#6]            ;293
0003ea  8911              LDRH     r1,[r2,#8]            ;294  ; time_cnt
0003ec  2980              CMP      r1,#0x80              ;294
0003ee  d203              BCS      |L1.1016|
0003f0  f64f70ff          MOV      r0,#0xffff            ;295
0003f4  ea000041          AND      r0,r0,r1,LSL #1       ;295
                  |L1.1016|
0003f8  8110              STRH     r0,[r2,#8]            ;297
                  |L1.1018|
0003fa  f7fffffe          BL       ecat_loop
0003fe  e7e4              B        |L1.970|
                  |L1.1024|
                          DCD      ||.bss||+0x200
                  |L1.1028|
                          DCD      0x7ffffffe
                  |L1.1032|
                          DCD      0x40000400
                  |L1.1036|
00040c  0d0a5765          DCB      "\r\nWelcome to the ECAT World \n\r",0
000410  6c636f6d
000414  6520746f
000418  20746865
00041c  20454341
000420  5420576f
000424  726c6420
000428  0a0d00  
00042b  00                DCB      0
                  |L1.1068|
                          DCD      ec_slave
                  |L1.1072|
                          DCD      ||.data||
                  |L1.1076|
000434  506c6561          DCB      "Please plug in the Ethernet cable first \n\r",0
000438  73652070
00043c  6c756720
000440  696e2074
000444  68652045
000448  74686572
00044c  6e657420
000450  6361626c
000454  65206669
000458  72737420
00045c  0a0d00  
00045f  00                DCB      0
                  |L1.1120|
000460  0d0a536f          DCB      "\r\nSocket Mode: %d\n\r",0
000464  636b6574
000468  204d6f64
00046c  653a2025
000470  640a0d00
                  |L1.1140|
                          DCD      ec_slavecount
                  |L1.1144|
000478  25642073          DCB      "%d slaves found and configured.\r\n",0
00047c  6c617665
000480  7320666f
000484  756e6420
000488  616e6420
00048c  636f6e66
000490  69677572
000494  65642e0d
000498  0a00    
00049a  00                DCB      0
00049b  00                DCB      0
                  |L1.1180|
00049c  466f756e          DCB      "Found %s at position %d\n",0
0004a0  64202573
0004a4  20617420
0004a8  706f7369
0004ac  74696f6e
0004b0  2025640a
0004b4  00      
0004b5  00                DCB      0
0004b6  00                DCB      0
0004b7  00                DCB      0
                  |L1.1208|
                          DCD      ||.bss||
                  |L1.1212|
                          DCD      0x0003d090
                  |L1.1216|
0004c0  536c6176          DCB      "Slaves mapped, state to SAFE_OP.\n",0
0004c4  6573206d
0004c8  61707065
0004cc  642c2073
0004d0  74617465
0004d4  20746f20
0004d8  53414645
0004dc  5f4f502e
0004e0  0a00    
0004e2  00                DCB      0
0004e3  00                DCB      0
                  |L1.1252|
                          DCD      0x001e8480
                  |L1.1256|
0004e8  536c6176          DCB      "Slave 0 State=0x%04x\r\n",0
0004ec  65203020
0004f0  53746174
0004f4  653d3078
0004f8  25303478
0004fc  0d0a00  
0004ff  00                DCB      0
                  |L1.1280|
000500  536c6176          DCB      "Slave 1 State=0x%04x\r\n",0
000504  65203120
000508  53746174
00050c  653d3078
000510  25303478
000514  0d0a00  
000517  00                DCB      0
                  |L1.1304|
                          DCD      ||.conststring||
                  |L1.1308|
00051c  20436f6e          DCB      " Configured address: %x\n",0
000520  66696775
000524  72656420
000528  61646472
00052c  6573733a
000530  2025780a
000534  00      
000535  00                DCB      0
000536  00                DCB      0
000537  00                DCB      0
                  |L1.1336|
000538  204f7574          DCB      " Outputs address: %x\n",0
00053c  70757473
000540  20616464
000544  72657373
000548  3a202578
00054c  0a00    
00054e  00                DCB      0
00054f  00                DCB      0
                  |L1.1360|
000550  20496e70          DCB      " Inputs address: %x\n",0
000554  75747320
000558  61646472
00055c  6573733a
000560  2025780a
000564  00      
000565  00                DCB      0
000566  00                DCB      0
000567  00                DCB      0
                  |L1.1384|
000568  20464d4d          DCB      " FMMU%1d Ls:%x Ll:%4d Lsb:%d Leb:%d Ps:%x Psb:%d Ty:%x "
00056c  55253164
000570  204c733a
000574  2578204c
000578  6c3a2534
00057c  64204c73
000580  623a2564
000584  204c6562
000588  3a256420
00058c  50733a25
000590  78205073
000594  623a2564
000598  2054793a
00059c  257820  
00059f  4163743a          DCB      "Act:%x\n",0
0005a3  25780a00
0005a7  00                DCB      0
                  |L1.1448|
0005a8  20464d4d          DCB      " FMMUfunc 0:%d 1:%d 2:%d 3:%d\n",0
0005ac  5566756e
0005b0  6320303a
0005b4  25642031
0005b8  3a256420
0005bc  323a2564
0005c0  20333a25
0005c4  640a00  
0005c7  00                DCB      0
                  |L1.1480|
0005c8  52657175          DCB      "Request operational state for all slaves\n",0
0005cc  65737420
0005d0  6f706572
0005d4  6174696f
0005d8  6e616c20
0005dc  73746174
0005e0  6520666f
0005e4  7220616c
0005e8  6c20736c
0005ec  61766573
0005f0  0a00    
0005f2  00                DCB      0
0005f3  00                DCB      0
                  |L1.1524|
0005f4  4e6f7420          DCB      "Not all slaves reached operational state.\n",0
0005f8  616c6c20
0005fc  736c6176
000600  65732072
000604  65616368
000608  6564206f
00060c  70657261
000610  74696f6e
000614  616c2073
000618  74617465
00061c  2e0a00  
00061f  00                DCB      0
                  |L1.1568|
000620  4f706572          DCB      "Operational state reached for all slaves.\n",0
000624  6174696f
000628  6e616c20
00062c  73746174
000630  65207265
000634  61636865
000638  6420666f
00063c  7220616c
000640  6c20736c
000644  61766573
000648  2e0a00  
00064b  00                DCB      0
                  |L1.1612|
00064c  536c6176          DCB      "Slave %d State=0x%04x StatusCode=0x%04x\n",0
000650  65202564
000654  20537461
000658  74653d30
00065c  78253034
000660  78205374
000664  61747573
000668  436f6465
00066c  3d307825
000670  3034780a
000674  00      
000675  00                DCB      0
000676  00                DCB      0
000677  00                DCB      0
                  |L1.1656|
000678  4e6f2073          DCB      "No slaves found!\r\n",0
00067c  6c617665
000680  7320666f
000684  756e6421
000688  0d0a00  
00068b  00                DCB      0
                  |L1.1676|
                          DCD      ||.conststring||+0x64
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  IOmap
                          %        512
                  ClockInfo
                          %        16

                          AREA ||area_number.4||, DATA, NOINIT, ALIGN=0

                          EXPORTAS ||area_number.4||, ||.bss||
                  sadkakd
                          %        128

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  0a536c61          DCB      "\nSlave:%d\n Name:%s\n Output size: %dbits\n Input size"
000004  76653a25
000008  640a204e
00000c  616d653a
000010  25730a20
000014  4f757470
000018  75742073
00001c  697a653a
000020  20256462
000024  6974730a
000028  20496e70
00002c  75742073
000030  697a65  
000033  3a202564          DCB      ": %dbits\n State: %d\n Delay: %d[ns]\n Has DC: %d\n",0
000037  62697473
00003b  0a205374
00003f  6174653a
000043  2025640a
000047  2044656c
00004b  61793a20
00004f  25645b6e
000053  735d0a20
000057  48617320
00005b  44433a20
00005f  25640a00
000063  00                DCB      0
000064  45746865          DCB      "Ethernets are all error,NOW must reset! goto  lable re_"
000068  726e6574
00006c  73206172
000070  6520616c
000074  6c206572
000078  726f722c
00007c  4e4f5720
000080  6d757374
000084  20726573
000088  65742120
00008c  676f746f
000090  20206c61
000094  626c6520
000098  72655f  
00009b  63686563          DCB      "check_net\n",0
00009f  6b5f6e65
0000a3  740a00  

                          AREA ||.data||, DATA, ALIGN=2

                  all_slave_op
000000  00                DCB      0x00
                  restart_waittime
000001  00                DCB      0x00
                  socket_mode
000002  00                DCB      0x00
                  DM9000_Status
000003  00                DCB      0x00
                  DM9162_Status
000004  0000              DCB      0x00,0x00
                  times_cnt
000006  0000              DCW      0x0000
                  time_cnt
000008  0001              DCW      0x0001
00000a  0000              DCB      0x00,0x00
                  vid
                          DCD      0x00000000
                  pdoTimeFlag
                          DCD      0x00000000
                  outputs1
                          DCD      0x00000000
                  inputs1
                          DCD      0x00000000

                          AREA ||area_number.8||, DATA, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.data||
                  cur_pos
                          DCD      0x00000000

                          AREA ||area_number.9||, DATA, ALIGN=1

                          EXPORTAS ||area_number.9||, ||.data||
                  cur_status
000000  0000              DCB      0x00,0x00

                          AREA ||area_number.10||, DATA, ALIGN=0

                          EXPORTAS ||area_number.10||, ||.data||
                  cur_mode
000000  00                DCB      0x00

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  sahdasdj
                          DCD      0x00000000

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  timeoftest
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\ETHERCAT\\Ethercat_Master.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_Ethercat_Master_c_vid____REV16|
#line 129 "..\\CORE\\core_cmInstr.h"
|__asm___17_Ethercat_Master_c_vid____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_Ethercat_Master_c_vid____REVSH|
#line 144
|__asm___17_Ethercat_Master_c_vid____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
